<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>《女性主义》观后感</title>
    <url>/%E8%A7%82%E7%82%B9/Gender/%E3%80%8A%E5%A5%B3%E6%80%A7%E4%B8%BB%E4%B9%89%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F/</url>
    <content><![CDATA[<p>这本<a href="https://book.douban.com/subject/30276984/">《女性主义》</a>，对女性主义理论、女性主义运动、女性主义流派、女性主义论争和女性主义之后的思潮进行了条分缕析的梳理。综观这些理论，有些激烈如火，有些平静如水，有些主张做决死抗争，有些认可退让妥协。归根结底就是一句话：在全人类实现男女平等。</p>
<h2 id="个人经验补充"><a href="#个人经验补充" class="headerlink" title="个人经验补充"></a>个人经验补充</h2><p>这本书的最新的参考文献是2001年，即这本书是一本20年前的书。书中的许多情况已经变了，当代女性主义已经在过去20年里经历了巨大的变化和发展。作为一个20多岁的当代人，我的经验或许能够对这本书进行衔接、补充。以下是我个人的一些经验或观察（可能有一定偏见，欢迎批评指正）：</p>
<ol>
<li><p>消费主义：在过去的20多年里，随着物质的丰富和生产的过剩，当代社会逐渐由生产型社会向消费型社会转变。这种转变不仅在挑战了传统的马克思主义观点，同时也在重塑着不同性别在经济生活中的境况。</p>
<ol>
<li>在社交媒体中，时常流传着“消费力排行榜：少女&gt;少妇&gt;小孩&gt;老人&gt;狗&gt;男人”的话语。越来越多规范、广告、文化、娱乐等都与女性相关，女性身份被赋予了与消费相关的话语，大量与女性相关的话语的出现或被发明于社会中。从福柯的‘话语即权力’来说，女性的权力或许正随着消费主义而变化。但很难说这背后是否存在着消费主义的陷阱。</li>
<li>就我个人在以微博、小红书等女性性别居多的社交媒体的观察，大量年轻女性都选择了消费主义，或曰’精致穷‘。这种现象很难简单地归因于女性解放带来的不婚主义、经济下行所带来的消费观念变化，或是女性受教育程度提高所带来的收入增加等因素。这些因素可能相互作用，共同影响着女性在经济生活中的选择和行为。</li>
</ol>
</li>
<li><p>社交媒体的崛起：随着社交媒体的兴起，女性主义运动的声音变得更加多样化和广泛传播。这为女性主义提供了全新的传播渠道和公共空间，很大程度上重塑着社会的性别观念。</p>
<ol>
<li>观点激化与被挤压的温和者：在社交媒体上，由于信息传播的迅速和观点的激化，温和派的表达空间逐渐受到挤压。人们更倾向于关注极端的立场，而温和、理性的声音常常被忽视或淹没在激进的言论中。</li>
<li>不同社交媒介的性开放程度：不同的社交媒介展现出不同程度的性开放。一些平台可能更加开放，容易出现与性别、身体自主权相关的讨论和内容，而另一些则可能更加保守，对于这些议题的讨论较为谨慎或甚至被限制。</li>
<li>女性主义和女同性恋被当做时尚单品：在网络社交中，一些人将女性主义、女同等议题当做时尚单品来消费和展示[1]，而非真正关心和理解其背后的意义和价值。这种现象导致了这些议题被片面化和肤浅化。</li>
<li>权力与责任的讨论：一些激进女性主义的观点，被认为只要权利而不愿承担对应的责任[2]</li>
<li>极端女性主义占据了较多社交媒体的公共讨论空间：近年来, 出现了利用女性弱势地位来诬告男性的情况。这种极端行为已经从社交媒体蔓延到了现实中，在一定程度上破坏了性别关系的平衡和社会的和谐，亟需重视和警惕。例如，王力宏事件，货拉拉跳车案[3]等。  </li>
</ol>
</li>
<li><p>由于女性教育程度变高，收入变高以及大环境下的经济下滑，全球右转，疑似出现了男性越来越保守，女性越来越极端的两极化趋势。</p>
</li>
<li><p>由于医学的发展，性别的流动，已经从理论转向现实 </p>
<ol>
<li>性别流动：医学的进步使得人们越来越意识到性别并非仅有两种选择，即男性和女性。性别身份在个体之间呈现出了更多元、更流动的特征。越来越多的人意识到，性别并不是一个固定的、二元的概念，而是一个多元化、流动的范畴。</li>
<li>性取向的流动：除了性别身份的流动多元化外，性取向也不断流动。人们逐渐意识到性取向不仅仅局限于传统的异性恋和同性恋两种选择，而是一个更加丰富多样的领域。性取向可以随着个体的成长和经历而发生变化，也可以在不同的社会环境中产生不同的表现。</li>
</ol>
</li>
<li><p>在对各种弱势群体的研究和弱势群体的自我分析中，出现了‘“女性”是一种处境’的观点，这超出了本质主义的范畴。</p>
<ol>
<li>在同性恋群体中，也会出现相对的’男性特质’和’女性特质’的现象。例如，[4]</li>
</ol>
</li>
<li><p>重视经济基础：本书对法律、政治等上层建筑的讨论较为深入，但对经济结构和经济水平的探讨略显不足</p>
<!-- 1. 最近流行这个观点：‘家务难以被定价量化’。这个观点结合了经济和家庭的关系。 -->
<!--   1. 对于家务的讨论，在书中并不明确，在此进行补充。-->
<!--   2. 随着女性越来越多地进入职场，家务劳动由谁承担成为了一个社会问题。-->
<ol>
<li>改革开放后，中国开始产生‘钱本位’，金钱对性别关系、婚姻关系产生了影响。<ol>
<li>例如， ’小白脸-富婆’的组合变多了。</li>
</ol>
</li>
</ol>
</li>
<li><p>性别的生理差异被医学的进一步发现</p>
<ol>
<li>例如，在这本书中，没提到性激素在不同年龄的表现情况对性的影响<ol>
<li>性激素在男女身体中的分泌情况不仅在生理上有所不同，而且在不同年龄阶段的表现也存在差异，这对性别特征和性功能的发育和表现都有着重要的影响。<br><img src="https://www.eonway.com/wp-content/uploads/2020/07/%E7%94%B7%E5%A5%B3%E8%B3%80%E7%88%BE%E8%92%99.jpg" alt="性激素"></li>
</ol>
</li>
<li>对于同性恋的生理机制的最新研究[7]</li>
<li>需回到生理性别的差异和本质，以便更好地理解其在性和性别的表现。</li>
</ol>
</li>
<li><p>当今世界的东升西降的现实使得许多过去以西方为主的研究和思考都发生了转变。随着东方国家经济实力的不断增强和文化影响力的扩大，传统上以西方为中心的视角逐渐被挑战和取代。需因地制宜，对西方视角的研究进行扬弃</p>
</li>
<li><p>女性参与战争对女性权益的推动</p>
<ol>
<li>俄乌战争中，乌军女兵参战[5]<blockquote>
<p>程衍梁：我记得你也跟我讲过，你接触了大量女兵。在这场战争中，她们的存在感非常强。有没有一些让你印象特别深刻的故事，可以和我们的听众分享？</p>
<p>吕晓宇：从2022年开始，我就一直在关注乌克兰的女兵问题，战争中的女性。因为曾经有一本非常有名的书，叫《战争中没有女性》。但我的关注点恰恰在于，乌克兰战争中女性的存在非常明确。因为从2014年开始，女兵的比例在不断上升。2022年以后，应该超过了20%，大概有6万人左右。现役女兵里大概有5000到6000人在一线的作战部队。这就意味着，乌克兰军队基本成了二战之后，至少在欧洲的军队里，女性参与比例最高的部队。</p>
<p>值得指出的是，很多人之前有个误解，觉得是因为乌克兰人手不够，所以去征女兵，但其实不是的，乌克兰的女兵都是志愿兵。而且很不同的一点是，参与一线作战的资格是女兵自己争取来的。之前本来是不给女兵参与一线作战的职位，即便有时候她们会参与，但那个职位和分担的任务仍然是行政岗或后勤岗。</p>
<p>从法律上来说，不鼓励女性去前线。是乌克兰女兵自己从2014到2018年做的运动，让军队正式承认女性可以在前线部队，且担任军事指挥官等等。她们把这样的权利视作女性赋权必要的一部部分。</p>
<p>如果去看民调，变化也很明显：2018年之前，可能只有一半人支持女性参军，2022年就到了80%。这就意味着，因为女性的参与，不仅公众对女性参军的态度发生了变化，很多人也开始更加承认女性在整个乌克兰社会中的作用。</p>
<p>也有人跟我说，有很多耽误了很久的女性事业的推进都是在战争中完成的。其中最典型的一个例子就是关于伊斯坦布尔公约。是欧盟委员会关于制止针对妇女暴力的条约，乌克兰在2011年签署的，但没有进入批准阶段。到了2022年7月份一下就批准了。</p>
<p>一方面来说，这当然是乌克兰想要加入整个欧盟，去顺应其规范和价值观的改革的一部分。但从另一个层面来讲，它的社会风貌、社会态度，对于女性的接受程度，对女性的认可也发生了很大的变化。因为，公允地来讲，在前苏联时期和刚独立之后，乌克兰还是一个非常父权制的国家。所以女性地位的变化非常显著地发生在2014年之后。这也是我当时去和女兵做大量访谈的一部分。</p>
</blockquote>
</li>
</ol>
</li>
</ol>
<p>需要提醒的是，由于参与社交媒介程度较高的都是年轻人，不同年龄可能持有不同的立场等，我的观察很有可能是失真的。</p>
<h2 id="对卖淫无罪化的思考"><a href="#对卖淫无罪化的思考" class="headerlink" title="对卖淫无罪化的思考"></a>对卖淫无罪化的思考</h2><p>反对书中的私货：卖淫无罪化。</p>
<p>这不仅是一个道德问题、法律问题。也是经济问题，人权问题，阶级问题。石头被抛入水中，会激起涟漪直到岸边。即蝴蝶效应的发生，一个小问题最终会被扩大成社会中的大问题。</p>
<p>不加限制的自由终会导致强者对弱者的剥削[6]: 尽管一开始买卖双方都是你情我愿的，但最后会出现拐买妇女, 强买强卖的情况。 </p>
<p>如果不对弱者进行周密保护，就会造成强者对弱者的剥削。</p>
<p>个人认为，从更社会构建或者本质主义上来说，性行为并不总是平等的。无论是在异性恋还是同性恋关系中，都存在着一定程度的“强弱”关系。从生理上来说, 性行为通常会涉及到身体的进入，男性和女性的性器官易受性病感染的风险不同，女性还需要考虑怀孕和避孕的问题。此外，在心理层面，也存在虐恋等现象。</p>
<h2 id="由这本书所想到的"><a href="#由这本书所想到的" class="headerlink" title="由这本书所想到的"></a>由这本书所想到的</h2><ol>
<li><p>表演理论中的观点：性别是在相互凝视的过程中确立的。</p>
</li>
<li><p>MBTI划分与性别划分之间的对映：性别的流变与性格的流变。即流变即不确定性已成为这个时代的大特征，即后现代性的一大特质。</p>
</li>
<li><p>什么年纪读什么，读超出自己经验的东西，可能吸收不充分，还是要在生活中沉淀。</p>
</li>
</ol>
<h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>时刻提醒着自己：善良是有代价的。帮助谁就要承受谁的命运。做自己限度内的善事。做量变的前进。</p>
<p>本书介绍了大量关于不同女性主义。我认为，解构的同时，也要建构。想改变现状，就要少谈些主义，多谈些问题。争取个人的尊严，就是争取性别的平等！</p>
<p>思考问题并不会带来什么效益，这个世界还是比较功利的，新学期开始，要收心了，BYE！</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://www.bilibili.com/video/BV1k64y1H7Ch/">装女同和爱女人设是互联网的时尚单品吗，能不能真实点</a><br>[2] <a href="https://www.douyin.com/note/7333246397858254117">https://www.douyin.com/note/7333246397858254117</a><br>[3] <a href="https://www.zhihu.com/question/602559288">货拉拉跳车案当事人周阳春向长沙中院提交再审申诉，如何看待？ - 知乎</a><br>[4] <a href="https://www.bilibili.com/video/BV1D94y1W7ZJ/">40岁老gay回忆两任男朋友</a><br>[5] <a href="https://www.xiaoyuzhoufm.com/episode/6557326d019ad5748af3ef2b">忽左忽右-基辅无战事：吕晓宇的乌克兰亲历记</a><br>[6] <a href="https://www.bilibili.com/video/BV1Jf4y1k7fQ/">【罗翔】【反对代孕】不加限制的自由终会导致强者对弱者的剥削</a><br>[7] Zhou JN, Hofman MA, Gooren LJ, Swaab DF. A sex difference in the human brain and its relation to transsexuality. Nature. 1995 Nov 2;378(6552):68-70. doi: 10.1038/378068a0. PMID: 7477289.</p>
<!-- 个人认为比较可行的实现平权的办法还是参与生产 -->
<!-- 当然，由于我个人的局限性（我个人的立场和能力），使得我很难观察今天女性的本质。从这个角度，任何时代的观察都带有时代的特性或者说是局限性。如何处理这个时代的模糊性和不真诚性，是我当下的一个状态。身在此山中，时代越来越复杂和模糊。该去哪里寻找真实，真诚。靠在不同平台进行对比和穿梭吗？ 如何把握舆情中的话语差异 -->
]]></content>
      <categories>
        <category>观点</category>
      </categories>
      <tags>
        <tag>女性主义</tag>
        <tag>观点</tag>
        <tag>平权</tag>
      </tags>
  </entry>
  <entry>
    <title>《始于极限》观后感</title>
    <url>/%E8%AF%84%E8%AE%BA/Gender/%E3%80%8A%E5%A7%8B%E4%BA%8E%E6%9E%81%E9%99%90%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F/</url>
    <content><![CDATA[<p>作为近期最热的女性主义的社会学家，上野千鹤子是我进行性别（Gender/Sexology）研究道路上，不可错过的一个人、一个现象。</p>
<p>题外话，我很喜欢上野千鹤子在这次演讲的观点：<a href="https://www.bilibili.com/video/BV1T7411f7xu">東京大学入学式-上野千鹤子致辞-努力就会有回报吗。</a></p>
<p>我在豆瓣上进行了考察：《厌女》和《始于极限：女性主义仿佛书简》的评分都是9分且评价人数都是7万 。考虑到前者是2015年出版，而后者是2022出版，本着优先了解当代的原则，我选择先读《始于极限：女性主义往复书简》这本书。</p>
<p>不得不说，铃木凉美不仅文笔差，不知所云，而且每次书信不大符合主题。</p>
<p>我在这本书学到很多尊重女性和弱者的观点，这有助于我反思自己。</p>
<p>在肯定这些内容的同时，并不妨碍我批判这本书存在的问题。</p>
<p>私以为女性主义应当追求保护弱者和男女平权，解放被父权制压迫的男性和女性。</p>
<p>在这本书，可以很明显地看出上野千鹤子夹带私货，即以（日本）整个男性群体为敌人的狭隘女性主义。</p>
<p>这或许与日本的情况有关：男凝严重、畸形的现代化进程、反帝反封建不彻底、狭隘的岛国、大男子主义盛行，少子化等等。</p>
<p>总的来说，这本书中提及的观点比较脱离现实情况比如经济等，甚至不考虑男女的客观生理差异。</p>
<p>本书的女性视角和笼统概括整个性别群体，天然地放大和美化了女性，窄化和丑化了男性，回避了父权制社会对男性的规训。父权制社会下不仅是男性凝视女性，还有女性对男性的规训。</p>
<p>这本书利用偏见简化各种复杂的社会关系和问题，忽视了男性群体和女性群体的复杂构成，即一个群体内部同时存在善人与恶人，仅仅将一个群体臆想为丑恶群体，无益于问题的解决。甚至也否定了人的复杂性：一个人可以同时存在缺点和优点，甚至可以同时保留两种截然不同的观点等。这使得这本书中的众多观点难免偏颇，经不起实体推敲。</p>
<p>另外，将亲密关系仅仅理解为性关系，也过于偏颇了。</p>
<p>在《女性主义》一章节中：</p>
<blockquote>
<p>不过话说回来。正如你所说，女权领域的站队问题着实教人头疼。一说“卖娼这行当还挺有意思”，就会被立刻认定为支持性行业。说“对出卖性抱有厌恶感”，就会马上被划入敌人的范畴。要知道人是一种复杂的生物，“我对××抱有厌恶感，所以才觉得它有意思”也是完全可能的。在关于表达自由的争论中，我属于女性主义者中鲜有的“反（法律）限制派”，因而被打成反女性主义者，AV行业的人也向我发难，而男性的“表达自由派”又误以为我是自己人。这种现象不仅限于女性主义的世界。追求“正确”的人往往不能容忍其他半点“不正确”的事物。人类的历史充斥着异端审判与猎巫。</p>
<p>但我一直认为，女性主义可以不受这些问题的困扰。因为女性主义是一个自我申报的概念。自称女性主义者的人就是女性主义者，女性主义不存在正确和错误之分。女性主义是一种没有政党中央、没有教堂和牧师，也没有中心的运动，所以没有异端审判，也没有除名。女性主义也不是什么智能的机器，只要把问题塞进去，它就会把答案吐出来……我一直都这么想。正因为如此，女性主义长久以来都是论战不止、热火朝天的言论竞技场，今后也不会变。可局外人还是不停地让我们站队，问“你是女权还是反女权”。多荒唐啊。干脆摆下一句话，“我就是我”，随他们去吧。</p>
<p>因此，无论他们说我搞歧视、反日还是别的什么，都没人可以阻止我自称女性主义者，我也不打算摘下这个头衔。毕竟我从那些自称女性主义者的女性的话语中学到了太多太多。我发表的言论大多是借鉴来的，几乎没有原创。再说了，“女性主义”和“社会性别”在日语里也都是用片假名写的外来语。很遗憾，它们都不是日本女性的发明创造。</p>
</blockquote>
<p>上野千鹤子对于’女性主义是什么‘的模糊态度可能导致了一些问题。首先，缺乏对女性主义核心概念的明确定义可能使得其内容变得模糊不清，进而导致社会在理解和实践女性主义时出现混乱和分歧。其次，作为一名社会学家，上野千鹤子应当承担起引导社会对于女性主义进行深入理解和批判性思考的责任，而不仅仅是以模糊的口号来包容一切。她回避对女性主义进行清晰的界定可能意味着她并未充分履行起作为学者的道德责任与良心，而是将其视作获取学术资本和利益的手段。</p>
<p>一本书不可能事无巨细、十全十美，我希望从自我的经验和视野进行一些补充：</p>
<ul>
<li>“当你凝视深渊时，深渊也在凝视你”。父权制下并不只存在‘男凝’。部分女性以父权制为理由合理化其’弱者‘身份，索要高价彩礼，对男性提出更高的经济要求等。这当然是对父权制对女性剥削的回击。只是这种激烈的回击机制，过去、当下和未来不断撕裂和刺痛着男女平等。<ul>
<li>对’女凝‘进行理论化整理，可以作为观点更加建制的学者的课题，以回击极端女权主义者</li>
</ul>
</li>
<li>铃木凉美在书信中，长期控诉自己被人贴上“前AV演员”的标签等。可是，在我看来，人生的每一步都算数。性交易可以谋取高额利润，恰恰是因为它不被法律保护，身体得不到保护，和名誉损害等。用一种冷峻的说法，这种行为只想要利益，却不想支付对应的成本。</li>
</ul>
<p>我想引用刘擎《2000年以来的西方》-&lt;思想暗网和文化左派的危机&gt;的一句话提醒自己：</p>
<blockquote>
<p>从事“申冤型研究”的进步学者曾是边缘性的异端，他们从反建制立场起步，如今已经演变为主流，文化左翼的批判也成为在学术象牙塔中攀升的通途。</p>
<p>他们最终成为一种批判性的建制派，彰显了文化左派如何寄生在一个他们既攻击却又依赖的权力体制中，面对挑战他们的新异端，不约而同地表现出党同伐异的当权派面目，成为新的压制性权力。</p>
<p>当文化左翼成为教条的时候，他们也与自己的思想先驱(那些后结构主义大师们)渐行渐远。</p>
</blockquote>
<p>最后，以刘瑜《可能性的艺术：比较政治学30讲》-&lt;文明的冲突：一个过时的预言？&gt;的这句话作结：</p>
<blockquote>
<p>这种价值冲突是所有文明都不得不穿越的风暴。</p>
<p>危险的不是观念差异，而是这种差异的极化。</p>
<p>最好的可能性当然是，进步主义者走得更慢一点，等等自己走在后面的同胞，对身后的传统抱有更大的温情，而保守主义则走得更快一点，对未知和陌生更加开放。</p>
<p>遗憾的是，人类往往要经历无数撕裂才学会宽容，要被激情的烈焰烫伤后才意识到激情的危险。</p>
<p>在一个价值迅速变迁的时代，世界最终可能会变得更好，但是在此之前，它常常会变得更糟</p>
</blockquote>
]]></content>
      <categories>
        <category>评论</category>
      </categories>
      <tags>
        <tag>女性主义</tag>
        <tag>观点</tag>
        <tag>平权</tag>
        <tag>评论</tag>
      </tags>
  </entry>
  <entry>
    <title>《卡尔森访谈普京》观后感</title>
    <url>/%E6%94%BF%E6%B2%BB/Politics/%E3%80%8A%E5%8D%A1%E5%B0%94%E6%A3%AE%E8%AE%BF%E8%B0%88%E6%99%AE%E4%BA%AC%E3%80%8B%E8%A7%82%E5%90%8E%E6%84%9F/</url>
    <content><![CDATA[<p><a href="https://www.bilibili.com/video/BV1hp421o7cD/">塔克·卡尔森第一视角采访俄罗斯总统普京(网站地址)</a></p>
<p>我看的是英文版本，不知会不会损失掉一些信息。</p>
<p>大约看了一半，想法多到溢出来，我不得不进行记录，以平衡自己。随后，我对这些碎碎念进行丰富，并尝试将其整理成一篇文章。</p>
<p>首先，我认为这次采访可以发生的原因是：普京有想向外界传达的信号，而且他也很好的掌握了这次谈话，说出了自己想说的东西。保守派的采访者也得到了他想要的东西：普京对美国国内即将开展的新一轮总统大选的态度，即对特朗普的支持。从世界各个地缘大国对旧秩序的抵抗可见，退回孤立主义、关注国内事务的特朗普，相比在全球出击的新冷战思维的拜登是更适合的人选。世界上的各个地区强国都渴求在美国在全球的战略收缩，趁此时机，真正实现从美国霸权下的一超多强多极化世界成为由多个地区强国划分下的多极化世界。简而言之，一个想进，一个想退，两者正好契合，因此这次采访得以进行。</p>
<p>总的来说，普京在采访中说了很多一面之词和谎言，不得不感叹沙皇真是老了。</p>
<p>托克维尔评论查理十世：「我们在历史中见过不少领导人，他的知识结构、文化水平、政治判断力和价值选择，会停留在青少年时期的某一阶段。然后不管他活多久，也不管世上发生多少变化，他都表现为某一时刻的僵尸。如果有某个机缘，让他登上大位，他一定会从他智力、知识发展过程中停止的那个时刻去寻找资源，构造他的政治理念、价值选择和治国方略。这种人的性格一般都执拗、偏执，并且愚蠢地自信，愚而自用，以为他捍卫了某种价值，能开辟国家发展的新方向。其实，他们往往穿着古代的戏装，却在现代舞台上表演，像坟墓中的幽灵突然出现在光天化日之下，人人都知道他是幽灵，他却以为自己是真神。但是，他选择的理念，推行的政策，无一不是发霉的旧货。」这段话很贴切地描述了普京。</p>
<p>采访的前半个小时，普京通过回溯俄罗斯的历史，否认乌克兰作为主权国家的合理性，宣称其是一个苏联人工构建的多民族国家，为俄罗斯的侵略进行开脱，并透露了其最低目标：吞并整个乌东和基辅，并邀请罗马尼亚，匈牙利来一起瓜分乌克兰西部。</p>
<p><img src="https://picx.zhimg.com/80/v2-7b3ac440b040645841e4b712946c5cfa_1440w.webp?source=1def8aca" alt="img"></p>
<p>不禁反问，乌克兰作为一个主权国家，凭什么不能像其它反俄国家一样加入北约，难道小国就只能接受俄罗斯的大国沙文主义吗？难道俄罗斯忘记了苏芬战争的惨败（俄罗斯接受芬兰加入北约）？</p>
<p><img src="https://pic1.zhimg.com/80/v2-0477c697f2e3560af3c3f564b0d21708_1440w.webp" alt="img"></p>
<p>从地缘政治的历史意义来看，北约已经顶到俄罗斯的面门，如果不进行反抗，俄罗斯很可能将失去数百年的未来，即真正意义上的被打倒。因此，面对北约的多次扩张，俄罗斯进行了反抗，即反对乌克兰加入北约。然而，这并没有奏效，因此沙皇不得不否定乌克兰是一个正常国家，宣称其是一个苏联构建过程中，人工构建的国家。</p>
<p>——美国捷力破坏俄欧整合，使得俄罗斯倒向中国，如果把世界看做欧美中俄的四国演义来看，俄乌战争或许这正是中国的国运，及时地分散了美国的精力。</p>
<p>——俄罗斯对周边的侵略使得其周边都不信任它。由此产生的“你要比我强大了不得像我欺负你似的欺负我啊”的心理，使其也不会相信周边的善意。（这种心态在美国对中国的态度中也存在。）</p>
<p>——普京提醒：世界正在快速变化，全球格局东升西降，美国别总盯着俄罗斯。</p>
<p>——普京对乌克兰政府向乌东地区移民非俄罗斯族表示不满。然而，向刚侵略来的领土大量移民俄罗斯人以巩固占领，这不就是侵略成性的俄罗斯经常做的事吗？为什么只允许自己这么做，而不允许他人这样做呢？</p>
<p>——由于中国近代的屈辱，和美国对中国的限制（美军在亚太的比例达到60%），对日韩的控制，东南亚引入美国平衡中国对其影响等多重因素，使得中国也将在本土附近与美国力量进行对抗。相比俄罗斯，中国嵌入全球化的程度更深；周边地缘情况可以说是世界上最复杂的；在建立新秩序的同时，对旧秩序（即欧美日韩）的依赖程度也更高。与其说“中国是爱好和平的国家”，不如说中国的爱好和平是被选择的，中国复杂的地缘和使其不敢轻易进行大规模的军事行动，这或许就是中国的和平基因。</p>
<p>需要提醒广大国人：</p>
<ol>
<li><p>一旦中国的一带一路完成，实现以中欧为核心的亚欧大陆的整合，俄罗斯将成为亚欧大陆世界岛的边缘。俄罗斯只有在世界动荡时才能维持其大国地位，一旦世界处于和平，俄罗斯将被迫退回历史的边缘，类似于加拿大那样的边缘角落。</p>
</li>
<li><p>一如老欧洲不接受俄罗斯一样。纵观历史，中国对于东南亚的各个国家始终是一个巨大的存在，而且多个中国历史朝代都对东南亚进行了侵略。这使得对东南亚也不会完全接受中国。大量华人在东南亚国家的存在进一步加深了东南亚国家的焦虑。为了缓解中国对东南亚的影响，他们排斥华人在政治、经济上的存在，或借由民族主义屠杀华人，或引入美国和印度来平衡中国在东南亚的存在。幸运的是，中国庞大的人口及从其衍生出的经济示例可以有更多历史纵深的缓冲，中国有更多时间整合中-东关系，而俄罗斯越来越边缘，已经没有时间可以浪费。</p>
</li>
<li><p>仅仅依靠石油出口，就足以使俄罗斯跻身全球十大经济体！在国家辉煌的时期，要及时扩张！！！！！！！</p>
</li>
<li><p>尽管中俄合作越来越紧密，但俄罗斯不接受中国在合作机制和经济秩序中的主导，即中国的领导。俄罗斯仍将在一带一路、对台、越、印军售，上海合作组织等议题上继续给中国带来不适。</p>
<ol>
<li>在中亚，俄罗斯试图屈从中国使用俄罗斯标准修建铁路，幸好俄罗斯在战场上得到了许多失败，最终不得不同意中国的要求，终于对中亚松口。</li>
</ol>
</li>
</ol>
<p>列宁曾说：“沙皇俄国是俄罗斯各民族的监狱”。可是从现实主义政治来说，总有人要蹲监狱。</p>
]]></content>
      <categories>
        <category>政治</category>
      </categories>
      <tags>
        <tag>观点</tag>
        <tag>评论</tag>
        <tag>思考</tag>
        <tag>地缘政治</tag>
      </tags>
  </entry>
  <entry>
    <title>谈摆烂与自洽</title>
    <url>/%E8%A7%82%E7%82%B9/Growth/%E6%91%86%E7%83%82%E4%B8%8E%E8%87%AA%E6%B4%BD/</url>
    <content><![CDATA[<h2 id="也谈摆烂和自洽"><a href="#也谈摆烂和自洽" class="headerlink" title="也谈摆烂和自洽"></a>也谈摆烂和自洽</h2><p>很多人都在发绚烂精彩的年终总结，激发了我的的感触，那就是对”自强不息，厚德载物“的新注解：</p>
<p>厚德载物，不是说以强者的上位姿态去俯视、包容弱者。恰恰相反，在一个激烈的机会主义和优绩主义大行其道的喧嚣浮躁中，强者总是少数，我觉得更应该习得这样的认知：把自己做为弱者去接受强者的存在，把自己作为普通而沉默的大多数人去兼容别人和自己的不同。</p>
<p>我觉得应该设定一个boundary，分隔别人和自己。把别人的人生拽进自己的人生，作比较，只会戕害自身。如果把别人的人生当作一个参考，择其善者而从之，其不善者而改之，内心就自洽充盈。</p>
<p>如果能在此基础上，保持上进的飞扬，比自己的起点前进一些，那就是自强不息了。</p>
<p>想起了莫言对这个时代的回答，“卷也不好，躺平也不好，摆烂也不好。我突然想起来去年五四的时候，给年轻人写的一句话：不被大风吹倒。”</p>
]]></content>
      <categories>
        <category>观点</category>
      </categories>
      <tags>
        <tag>观点</tag>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title>《禅与摩托车维修艺术》摘录</title>
    <url>/%E9%98%85%E8%AF%BB/Books/%E3%80%8A%E7%A6%85%E4%B8%8E%E6%91%A9%E6%89%98%E8%BD%A6%E7%BB%B4%E4%BF%AE%E8%89%BA%E6%9C%AF%E3%80%8B%E6%91%98%E8%AF%BB/</url>
    <content><![CDATA[<p>文章总有一股上帝般的口气，好像谈论的东西能够永垂不朽。然而情况不是这样的，人们应该了解，这只不过是一个人在特定的时空和环境背景下发表的看法，仅止于此，但是你无法在文章当中使人明白这一点。</p>
]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>书籍</tag>
        <tag>观察</tag>
      </tags>
  </entry>
  <entry>
    <title>好书摘读：《2000年以来的西方》---&lt;反性侵运动和女性主义辩论&gt;</title>
    <url>/%E9%98%85%E8%AF%BB/Books/%E3%80%8A2000%E5%B9%B4%E4%BB%A5%E6%9D%A5%E7%9A%84%E8%A5%BF%E6%96%B9%E3%80%8B%E9%98%85%E8%AF%BB%E6%84%9F%E6%83%B3%E5%92%8C%E6%91%98%E8%AF%BB/</url>
    <content><![CDATA[<h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p>首先聊本书作者，我是在《奇葩说》遇到刘擎老师，后来又在《十三邀》擦身而过，在最近又不小心在一个网页的引用看到这本书的名字，搜索后，对目录很喜欢。第二天，在图书馆翻看时也很喜欢，于是拿来读。由于工科研究生的缘故，兼顾课程、考试、横向、论文和编程，能够用来动脑读书的时间还是需要拨冗，当然读得也没有那么深刻，我也不准备很详细地消化吸收甚至做批评，在拓宽广度的同时能够拓宽一点点深度就满足我的预期了。</p>
<p>算上两个晚上的4h，和一整天，用时15h，总归是读完了。（一天看12h有点偏头疼）</p>
<p>我在检索这本书的豆瓣时，也查了作者的其他著作，《刘擎西方现代思想讲义》也很喜欢，只是这本比较严肃，只能等放假的时候再拜读了。所以本着读完刘瑜读刘擎的狡黠的占有欲。我开始了阅读。不过由于这本书的抽象性更高，从记忆上，这本书比刘瑜站得高一点（因为我是在初中的时候看的刘瑜的散文而且也没做标注或读书笔记，所以忘得差不多了，今年读了《可能性的艺术 : 比较政治学30讲》有很多细碎的具体感受，毕竟身处这个时代）</p>
<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>这本书的内容涉及2003-2019年的西方知识界，很吸引我。在内容不艰深的情况下，关注我未开始严肃看新闻（maybe 2016？）之前，人们在讨论的议题，有一种重新活过的快感。</p>
<p>19,18,17年值得二刷，后面部分略显单薄了。<br>(问：“从2003年开始，您每年写一篇“西方知识界重要事件综述”，自2016年起，您把综述的标题改为“西方思想年度述评”，似乎比较明确地把重心放在了公共议题上。”<br>答：“最近几年我有意识地调整了文章的定位，更加明确地着 眼于公共思想议题，并加强和加深评论的部分，从“综述”变成“述 评”，希望在观点和论辩(而不是信息本身)的层面上让文章具有一 定的新意。”[1])</p>
<p>本书几乎涉及到了我关注或观察的各个社会议题（或许是我过于浅薄了？）。当然也存在一些议题我觉得应该有但是没有讨论到，比如同性恋议题（原因：我不好说），比如宗教(写得太少了)，比如科学（写得太少了），比如性（在西方，已经过时了？）。</p>
<h2 id="我的迷思"><a href="#我的迷思" class="headerlink" title="我的迷思"></a>我的迷思</h2><p>许倬云在《十三邀》和许知远的这句话给我很深印象：“要人心之自由，胸襟开放。拿全世界人类曾经走过的路，都要算是我走过的路之一。要有一个远见，能超越你未见”。私以为不读书就会只活在当下的时代，要把全世界走过的路都当做自己走过的路，把历史的经纬都变成自己的视野。仅仅拥有此生是不够的。</p>
<p>君子论迹不论心。我能理解差评者对该书客观性，广度、深度、媚俗的质疑和诘问。但我想，只要我能从中汲取智识，我就应该做出做感性的表扬。</p>
<p>我还写了几个字，不知道放在哪里好，放在这里好了：</p>
<ol>
<li>作为在经济全球化的最大受益者，这次从新闻和中短视频之外的另一套话语中听到欧美的反对全球化的声音，很涨智识。</li>
<li>有意思的是这本书里面居然敢暗指塞里斯是国家资本主义和威权主义。对于不同媒介的审查程度不同。大家多读书吧。”我们不用时时刻刻都喜欢读书，但希望你读书，希望你读好书，希望你为了自己好好读书，不要放弃，好吗？”</li>
<li>在2015年这一章聊了欧洲的恐怖主义，远比柴静的纪录片，深刻、客观、真实</li>
</ol>
<h2 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h2><p>作为没一页废纸的书，没一句废话，几乎每页我都喜欢的书。我对这本书做了大量标注，但是由于其观点的深刻、多样性，对立性和多层次，以及其大尺度的时代背景、视野和历史纵深，我很难将里面的每一个段落、句子孤立地进行摘录。</p>
<p>出于延续上一次对女性主义的讨论的目的，以及这篇几乎是我标注比最高的一篇文章：Chapter 2017年的《反性侵运动和女性主义辩论》</p>
<p>摘录全文如下：</p>
<blockquote>
<p>   《时代》周刊将2017年度人物授予“打破沉默者”（The Silence Breakers），向控诉和反抗性侵犯与性骚扰的社会运动致敬。封面刊登了五位女士的合影，她们勇敢打破沉默、公开陈述自己遭受性侵扰的经历。照片还包括只露出手臂的“第六个人”，据杂志主编介绍， 这代表着许多匿名的指控者，迫于压力与风险无法暴露身份，但愿意分享自己的遭遇。演员艾希莉·贾德是哈维·韦恩斯坦最早的指控者 之一，她对韦恩斯坦的指控成为这场运动的导火索。10月中旬，演员艾莉莎·米兰诺在推特上发出倡议，邀请曾遭受性侵的受害者们以 “#MeToo”（我也是）作为状态更新的标签，以唤起社会关注。在短短几周内，这个标签在社交媒体上的使用率达到五百万次，从而触发了一场席卷全球的社会运动，许多国家都开始了自己的“#MeToo”运 动 ， 法国则创造了自己的特色标签 ， 称之为“ 拱猪 ”运动 （#Balancetonporc）。 </p>
<p>原本孤立分散的受害者及其支持者通过社交媒体结成广泛的联盟，各大主流媒体迅即呼应，声势浩大的舆论鼓舞了更多的受害者出指控。到12月中旬，美国政界、演艺界、传媒界以及商业和企业行业中，至少有九十八位（其中有一位女性）知名人士受到公开的性侵指控，他们大多被解雇或被迫辞职。12月7日，受到性骚扰指控的联邦参议员艾尔·弗兰肯宣布辞职。12月12日，肯塔基州的州众议员丹· 约翰逊召开新闻发布会否认媒体曝光的性侵指控，随后于次日早晨开枪自杀。</p>
<p>反抗性侵扰的公开行动在美国大约有二十六年的历史 ， “#MeToo”最早是2006年由黑人社会活动家塔拉纳·伯克发明和传播的标签，但从未形成像今天这样广泛和强劲的社会运动，它不仅挑战 了位高权重的施害者，也促发了意识与观念的变革。在《华尔街日报》10月的一项调查中，49%的男性受访者表示，有关“#MeToo”的新闻报道促使他们更认真地思考自己对待女性的行为。</p>
<p>   好莱坞是性骚扰的“重灾区”，也处在反性侵风暴的中心。《纽 约客》的资深记者达纳·古德伊尔最近发表文章《好莱坞可能改变自 己的方式吗？》，报道了“后韦恩斯坦时代”正在展开的严厉“整 治”（remediation）行动。[38]目前好莱坞的整个风气正在发生剧 变，“零容忍”政策冲击着惯常的言谈举止，所有场合使用的语言 （包括在餐馆向人问候的方式）都会受到影响。一位性骚扰问题调查 员表示，一旦接到举报，他们会“即刻”（不是过几天或一周，而是 立即开始）展开调查。与此同时，整治行动也在清算历史旧账，现在 已基本完成。那些被指控者的照片已从墙上取下，他们的名字会被从 捐赠的建筑物上抹去，电影在替换演员之后重拍，网上图书馆的相关 资料会被撤下，电影被搁置。这位调查者说，“与被告者的任何关 联，现在完全是有毒的，经过一波波的清除，然后是苏联式的抹除 （erasure）”。的确，那些曾经盛气凌人的施害者必须受到应有的惩 处，但清除历史的做法不免让人发生警觉的联想。 </p>
<p>   应当如何对待有性侵问题的作者与其作品之间的关系？凯文·史派西已被逐出第六季《纸牌屋》，新电影《金钱世界》删除了他的全 部镜头，在更换演员补拍后刚刚上映。那么如何处理已经发行的作品 呢？是否应当禁映甚至销毁伍迪·艾伦以及（尤其是）罗曼·波兰斯 基的电影？在学术界也有同样的问题。贝卡·罗斯菲尔德在《高等教 育纪事报》上发表文章指出，存在一些重要甚至经典性的学术作品， 其作者的性操守堪忧甚至不可接受，他们本人应当受到谴责或惩处 （如果仍然在世），但“赞颂思想”要与“赞颂人生”脱离。基于作 者的道德操守来查封他们重要研究的做法可能是有害的。无论如 何，这场运动再度触发了一些令人困扰的难题：社会正义是否要求文 化的道德清洗？这会损害艺术与学术的自由以及历史记忆的完整性 吗？ </p>
<p>   另外，这场运动对政治的影响仍然是有限的。《大西洋月刊》发 表文章指出，身陷性丑闻是罗伊·摩尔在亚拉巴马州联邦参议员补选 中落败的一个重要原因，但有调查显示，亚拉巴马州选民的党派分歧 远比性别差异更为显著：共和党的女性选民仍然有90%投票支持摩尔 （只比其男性选民低2%），她们相信摩尔的性侵行为属实的比例也仅 比男性选民高4%，且比民主党男性选民低40%。另有研究指出，就性别 政治问题而言，两党极化趋势的驱动要素不是性别本身（男性或女 性）而是性别立场（是否相信男女应当平等）。10月，皮尤中心的一 项调查显示，对于“这个国家对女性权利的伸张走得还不够远”这一 陈述，在民主党男性中的支持者要比共和党女性中的支持者高出31%。 这意味着“民主党并没有变成女性的党派，而是正在成为女性主义者 的党派”。</p>
<p>   任何一场社会运动都会有支持者和反对者，“#MeToo”运动也不 例外。争议很快就出现了（虽然明显的反弹到2018年初才开始）。值 得关注的意见不是来自保守派阵营的抨击，而是自由派甚至女性主义 内部的批评。11月22日，在线杂志 发表了四位女性学者和作 家（包括杂志主编）的批评意见。12月18日，英国左翼网刊 汇 集了十三位女性知识分子的异议。这些作者都坚持男女平等以及反性 侵的立场，但对“#MeToo”运动的发展趋势感到忧虑甚至强烈的不 满，简要概括起来主要集中在以下几个方面。</p>
<p>   首先，运动目前的趋势可能在女性主义内部导致一种文化转向， “从女性的赋权（empowerment）目标，转向赋予女性受害者的地 位”。最令人不安的倾向是运动演变为一种“告解的竞争”——“一 个女人的证言越可怕，她可能从网上姊妹那里获得的同情就越多。” 沉默多年容忍施害者逍遥法外、现在才站出来的指控者们赢得了欢 呼，被誉为“女英雄”和“强大的女性主义者”，而那些提倡并做到 了当即明确有力地拒绝侵扰，并快乐地继续自己生活的众多女性，现 在却被嘲讽为“受害人的责难者”。在当下的风潮中，好像愿意充当 受害者才是唯一“正确的女人类型”。将女性视为脆弱的受害者，而 不是胜任公共生活的行动者，使受害成为武器，固化女性的脆弱性， 挫伤女性的适应力，这是从以往取得胜利的女性进步事业中倒退。 </p>
<p>   其次，对性侵扰的定义越来越宽泛，使运动失去重心和焦点。真正的受害者在暴力或隐性权力的威胁下陷入困境，不得不忍受侵害， 她们不仅值得同情，也需要声援和司法救助。然而，将任何不合心意 的一句赞美、一个玩笑、一声口哨甚至一次眨眼都界定为性骚扰，这 将使整个运动琐碎化（trivialized）。“当28%的年轻人认为眨眼也 可以是性骚扰，社会就可能怀疑女性判断危险和应对公共生活的能 力。”女性主义应当鼓励女性施展独立自主的能动性，而不是将女性 “婴儿化”。将职场上危及女性生涯的性骚扰与无关紧要的社会麻烦 相并论，这样的运动只是满足了“中产阶级的记者，饥渴于名望的 政客以及显示美德的明星”，“普通工薪阶层的女性根本不会去理 睬”。与世界其他地方的姐妹们相比，西方女性享有非常优越的地位 和法律保护，“却把自己刻画为身处危难的少女，无力应对成人世 界，永远需要援救”。 </p>
<p>   再次，这场运动揭露了严重的性犯罪以及女性被轻视的程度，这是健康的。但现在“它已经演变为一场群体性的歇斯底里”。许多男 性被指控有无法合理定罪的越轨行为，并得到迅速而可怕的惩罚， “但没有清晰的定义也没有法定时效，这在法律上和道德上是荒谬 的”。运动忽视了正当程序与无罪推定的法律传统，逐渐演变为一场 群众性的揭发和公审运动。甚至有位女性主义者在推特上声称，“我 实际上毫不关心无辜的男人们由于受到性侵犯/骚扰的不实指控而失 业”。这是在引导人们“发展围攻心态或建立战区”，而这种行为会 使运动演变为一场针对男性的大规模“猎巫”（witch-hunt）行动， 从而制造群体性的道德恐慌。“在2017年，我们几乎可以凭借一项指 控就摧毁任何一个男人。” </p>
<p>   最后，这场运动的极端趋势正在制造两性关系的对立。假定男性霸权的结构是根深蒂固且无处不在的，男人天然属于“邪恶的压迫阶 级”，而女人则生活在恐怖的性压迫之下。“这个文化时刻已经转变 成女性受害者的狂欢以及对男性的妖魔化。”这将把男女关系塑造为 潜在的施害者与受害者的敌对关系，或至少将本来复杂丰富的两性关 系转变为谨小慎微、彼此提防的关系。“如果我还是一个在寻找伴侣 的年轻女子，我不希望生活在这样一个世界：一个男人在吻我之前必 须确认一份联署协议。”厌女症确实存在，“但如果女性将自己描述 得如此脆弱，无法以健全的常识感应日常生活的微小变化，那么厌女 症的态度将会盛行起来”。 </p>
<p>   这些对“#Metoo”运动的批评和抨击，有许多是片面和过激的，但也并非无可反驳。在事实层面上，以社交媒体为主要载体的自发社 会运动缺乏明确的组织和领导，本身包含了复杂多样的方面和倾向。 批评者很容易选取任何一个有问题的侧面或支流，以偏概全地攻击整 个运动。更为重要的是，这些批评者在强调程序正当的同时，完全漠 视了一个事实——“#Metoo”运动的激进性恰恰是对程序主义功能失 灵的反弹。在职场和校园中，长期以来存在着大量的严格意义上（以 人们普遍认可的标准而言）的性侵犯与性骚扰行为，但受害者或投诉 无门或举报无果，纸上的法律与规章在实践中变得形同虚设，积怨已 久的伤痛爆发为运动的力量，为受害者伸张正义。运动的宗旨并不是 要瓦解法律和程序，而是要激活和改造沉睡已久的程序正义，让它在 实践中恢复活力。的确，法律程序的稳定性与社会运动的激进性之间 存在着张力，如何平衡与协调两者的关系是复杂而困难的问题，这需 要在运动进程中被认真对待和解决，而不应当成为将运动污名化的一 个理由。 </p>
<p>   就批评者的立场而言，这些作者几乎都属于自由派或左翼阵营，甚至大多都自认为是女性主义者，这也反映出女性主义本身在发展中 的内部差异与分裂，而这些分歧由来已久且难以调和。类似的意见分 歧更为突出地体现在年底之后发生的两场争论之中。2018年1月，反性 侵运动遭遇了明显的反弹。法国著名演员凯瑟琳·德纳芙等百名知名 女性联署了一份公开信，对运动提出批评，并引发了激烈争论。在美 国，刚刚荣获金球奖的喜剧演员阿齐兹·安萨里受到化名的性骚扰指 控，由于事件的性质处于“灰色地带”，媒体与网络上出现了大规模 的意见冲突。 </p>
<p>   韦氏词典选择将“feminism”（女性主义）作为2017年度词汇。“#Metoo”运动带来了女性主义的新一波兴起。然而，女性群体并不 是同质化的，她们不仅有经济阶层、教育程度和种族认同等区别，也 并非天然地支持女性主义。在女性主义者内部，也存在复杂的代际差 异以及不同学派之间的分歧，体现为对多种诉求的不同优先级排序， 以及对女性主义实践的不同战略构想。无论如何，2017年的反性侵运 动重新定义了社会对待女性的标准——什么是可以接受的，什么是不 可容忍的。历史上每一次女性主义运动的进展都遭遇了反弹，但“时 代精神”正在发生改变，每一次回潮都可能激发新的反思和勇气，从 而开启下一次运动的大门。</p>
</blockquote>
<p>[1] 澎湃新闻对刘擎的访谈（2018年3月18日）<br>[2] 安溥。不过我更喜欢张悬时期的作品</p>
]]></content>
      <categories>
        <category>阅读</category>
      </categories>
      <tags>
        <tag>书籍</tag>
        <tag>政治</tag>
        <tag>哲学</tag>
        <tag>观察</tag>
        <tag>女性主义</tag>
      </tags>
  </entry>
  <entry>
    <title>他已不在地坛，地坛在我</title>
    <url>/%E7%94%9F%E6%B4%BB/Record/%E5%9C%B0%E5%9D%9B%E5%9C%A8%E6%88%91/</url>
    <content><![CDATA[<p>今天听安图声乐队的《逆流时光》，单曲循环+12s的crossfade（交叉淡入淡出），前奏和尾奏混在一起，像极了这个对太阳比喻：</p>
<blockquote>
<p>但是太阳，它每时每刻都是夕阳也都是旭日。当它熄灭着走下山去收尽苍凉残照之际，正是它在另一面燃烧着爬上山巅布散烈烈朝辉之时。那一天，我也将沉静着走下山去，扶着我的拐杖。有一天，在某一处山洼里，势必会跑上来一个欢蹦的孩子，抱着他的玩具。</p>
<p>当然，那不是我。</p>
<p>但是，那不是我吗？</p>
<p>宇宙以其不息的欲望将一个歌舞炼为永恒，这欲望有怎样一个人间的姓名，大可忽略不计。</p>
</blockquote>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>书籍</tag>
        <tag>音乐</tag>
        <tag>体验</tag>
      </tags>
  </entry>
  <entry>
    <title>brew命令不能正常使用</title>
    <url>/%E8%B8%A9%E5%9D%91/Pitfalls/brew%E8%B8%A9%E5%9D%91/</url>
    <content><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>想尝试一下<a href="https://github.com/AUTOMATIC1111/stable-diffusion-webui，但是运行./webui.sh报错了:大概是gfpgan安装不上。">https://github.com/AUTOMATIC1111/stable-diffusion-webui，但是运行./webui.sh报错了:大概是gfpgan安装不上。</a></p>
<p>定位到launch.py.227:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">gfpgan_package &#x3D; os.environ.get(&#39;GFPGAN_PACKAGE&#39;, &quot;git+https:&#x2F;&#x2F;github.com&#x2F;TencentARC&#x2F;GFPGAN.git@8d2447a2d918f8eba5a4a01463fd48e45126a379&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后修改为：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">gfpgan_package &#x3D; os.environ.get(&#39;GFPGAN_PACKAGE&#39;, &quot;https:&#x2F;&#x2F;github.com&#x2F;TencentARC&#x2F;GFPGAN.git&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>不行。</p>
<p>在./stable-diffusion-webui和./stable-diffusion-webui/venv/lib/pyhton3/site-packages/都手动git clone <a href="https://github.com/TencentARC/GFPGAN.git">https://github.com/TencentARC/GFPGAN.git</a> 还是不行。</p>
<p>遂放弃。</p>
<p>后记：</p>
<p>添加<a href="https://ghproxy.com/即可">https://ghproxy.com/即可</a></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">gfpgan_package &#x3D; os.environ.get(&#39;GFPGAN_PACKAGE&#39;, &quot;https:&#x2F;&#x2F;ghproxy.com&#x2F;https:&#x2F;&#x2F;github.com&#x2F;TencentARC&#x2F;GFPGAN.git&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>居然是网络问题，看报错根本看不出来！啊 哒哒哒！</p>
<p>中途可能使用了该命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git config --global --unset http.proxy

git config --global --unset https.proxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h1 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h1><p>第二天，就不能正常使用brew相关的命令了。（brew update会涉及到git fetch更新一些仓库的命令）</p>
<p>但最近有在这上面有需求，就不能回避了</p>
<p>下面为我踩坑时常看到的信息:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew update --verbose

Checking if we need to fetch &#x2F;opt&#x2F;homebrew...
Fetching &#x2F;opt&#x2F;homebrew...
Checking if we need to fetch &#x2F;opt&#x2F;homebrew&#x2F;Library&#x2F;Taps&#x2F;carlocab&#x2F;homebrew-personal...
Checking if we need to fetch &#x2F;opt&#x2F;homebrew&#x2F;Library&#x2F;Taps&#x2F;dart-lang&#x2F;homebrew-dart...
Checking if we need to fetch &#x2F;opt&#x2F;homebrew&#x2F;Library&#x2F;Taps&#x2F;grpc&#x2F;homebrew-grpc...
Checking if we need to fetch &#x2F;opt&#x2F;homebrew&#x2F;Library&#x2F;Taps&#x2F;homebrew&#x2F;homebrew-cask...
Fetching &#x2F;opt&#x2F;homebrew&#x2F;Library&#x2F;Taps&#x2F;homebrew&#x2F;homebrew-cask...
Checking if we need to fetch &#x2F;opt&#x2F;homebrew&#x2F;Library&#x2F;Taps&#x2F;homebrew&#x2F;homebrew-cask-versions...
Checking if we need to fetch &#x2F;opt&#x2F;homebrew&#x2F;Library&#x2F;Taps&#x2F;homebrew&#x2F;homebrew-core...
Fetching &#x2F;opt&#x2F;homebrew&#x2F;Library&#x2F;Taps&#x2F;homebrew&#x2F;homebrew-core...
Checking if we need to fetch &#x2F;opt&#x2F;homebrew&#x2F;Library&#x2F;Taps&#x2F;homebrew&#x2F;homebrew-services...
Checking if we need to fetch &#x2F;opt&#x2F;homebrew&#x2F;Library&#x2F;Taps&#x2F;mongodb&#x2F;homebrew-brew...
Checking if we need to fetch &#x2F;opt&#x2F;homebrew&#x2F;Library&#x2F;Taps&#x2F;probezy&#x2F;homebrew-core...
Fetching &#x2F;opt&#x2F;homebrew&#x2F;Library&#x2F;Taps&#x2F;dart-lang&#x2F;homebrew-dart...
Fetching &#x2F;opt&#x2F;homebrew&#x2F;Library&#x2F;Taps&#x2F;grpc&#x2F;homebrew-grpc...
Fetching &#x2F;opt&#x2F;homebrew&#x2F;Library&#x2F;Taps&#x2F;homebrew&#x2F;homebrew-cask-versions...
Fetching &#x2F;opt&#x2F;homebrew&#x2F;Library&#x2F;Taps&#x2F;homebrew&#x2F;homebrew-services...
Fetching &#x2F;opt&#x2F;homebrew&#x2F;Library&#x2F;Taps&#x2F;mongodb&#x2F;homebrew-brew...
Fetching &#x2F;opt&#x2F;homebrew&#x2F;Library&#x2F;Taps&#x2F;probezy&#x2F;homebrew-core...
Fetching &#x2F;opt&#x2F;homebrew&#x2F;Library&#x2F;Taps&#x2F;carlocab&#x2F;homebrew-personal...
fatal: unable to access &#39;https:&#x2F;&#x2F;github.com&#x2F;mongodb&#x2F;homebrew-brew&#x2F;&#39;: Failed to connect to github.com port 443 after 75008 ms: Couldn&#39;t connect to server
fatal: unable to access &#39;https:&#x2F;&#x2F;github.com&#x2F;carlocab&#x2F;homebrew-personal&#x2F;&#39;: Failed to connect to github.com port 443 after 75003 ms: Couldn&#39;t connect to server
fatal: unable to access &#39;https:&#x2F;&#x2F;github.com&#x2F;dart-lang&#x2F;homebrew-dart&#x2F;&#39;: HTTP&#x2F;2 stream 1 was not closed cleanly before end of the underlying stream
fatal: unable to access &#39;https:&#x2F;&#x2F;github.com&#x2F;Homebrew&#x2F;homebrew-cask-versions&#x2F;&#39;: HTTP&#x2F;2 stream 1 was not closed cleanly before end of the underlying stream
fatal: unable to access &#39;https:&#x2F;&#x2F;github.com&#x2F;probezy&#x2F;homebrew-core&#x2F;&#39;: HTTP&#x2F;2 stream 1 was not closed cleanly before end of the underlying stream
fatal: unable to access &#39;https:&#x2F;&#x2F;github.com&#x2F;Homebrew&#x2F;homebrew-services&#x2F;&#39;: error:02FFF036:system library:func(4095):Connection reset by peer
fatal: unable to access &#39;https:&#x2F;&#x2F;github.com&#x2F;grpc&#x2F;homebrew-grpc&#x2F;&#39;: error:02FFF036:system library:func(4095):Connection reset by peer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>中途把github的代理弄了好几个版本，也改过DNS8.8.8.8+重启。</p>
<p>把brew改成清华镜像也不是很有用。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>最后的解决方案是：</p>
<h2 id="step1"><a href="#step1" class="headerlink" title="step1:"></a>step1:</h2><p>没改DNS，brew镜像.</p>
<p>下面为brew config的输出，以供参考</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">HOMEBREW_VERSION: 4.0.3-32-ga3207a0
ORIGIN: https:&#x2F;&#x2F;github.com&#x2F;Homebrew&#x2F;brew
HEAD: a3207a03900d7b012c999fad911a701baed82be5
Last commit: 4 hours ago
Core tap origin: https:&#x2F;&#x2F;github.com&#x2F;Homebrew&#x2F;homebrew-core
Core tap HEAD: 3e0f7cf00d2e1b9ea58aeee6009c3c98dd3fc3fe
Core tap last commit: 47 minutes ago
Core tap branch: master
Core tap JSON: 22 Feb 07:36 UTC
HOMEBREW_PREFIX: &#x2F;opt&#x2F;homebrew
HOMEBREW_BOTTLE_DOMAIN: https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;homebrew-bottles
HOMEBREW_CASK_OPTS: []
HOMEBREW_GITHUB_API_TOKEN: set
HOMEBREW_MAKE_JOBS: 8
Homebrew Ruby: 2.6.10 &#x3D;&gt; &#x2F;System&#x2F;Library&#x2F;Frameworks&#x2F;Ruby.framework&#x2F;Versions&#x2F;2.6&#x2F;usr&#x2F;bin&#x2F;ruby
CPU: octa-core 64-bit arm_firestorm_icestorm
Clang: 14.0.0 build 1400
Git: 2.37.1 &#x3D;&gt; &#x2F;Library&#x2F;Developer&#x2F;CommandLineTools&#x2F;usr&#x2F;bin&#x2F;git
Curl: 7.86.0 &#x3D;&gt; &#x2F;usr&#x2F;bin&#x2F;curl
macOS: 13.2.1-arm64
CLT: 14.2.0.0.1.1668646533
Xcode: N&#x2F;A
Rosetta 2: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="step2"><a href="#step2" class="headerlink" title="step2:"></a>step2:</h2><p>修改github的代理为clash的端口(mixed-port为7890，或socks5:7891)。<br>最后我的/Users/changqingaas/.gitconfig文件为:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[user]
	name &#x3D; chang_qing_aas
	email &#x3D; 1736731090@qq.com
[safe]
	directory &#x3D; &#x2F;usr&#x2F;local&#x2F;Homebrew&#x2F;Library&#x2F;Taps&#x2F;homebrew&#x2F;homebrew-core
[core]
	quotepath &#x3D; false
[filter &quot;lfs&quot;]
	clean &#x3D; git-lfs clean -- %f
	smudge &#x3D; git-lfs smudge -- %f
	process &#x3D; git-lfs filter-process
	required &#x3D; true
[http]
	version &#x3D; HTTP&#x2F;1.1
	proxy &#x3D; socks5:&#x2F;&#x2F;127.0.0.1:7891
[https]
	proxy &#x3D; socks5:&#x2F;&#x2F;127.0.0.1:7891
[http &quot;https:&#x2F;&#x2F;github.com&quot;]
	proxy &#x3D; socks5:&#x2F;&#x2F;127.0.0.1:7891
[https &quot;https:&#x2F;&#x2F;github.com&quot;]
	proxy &#x3D; socks5:&#x2F;&#x2F;127.0.0.1:7891<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>具体命令我没保存，如果觉得有用直接vim .gitconfig修改吧。</p>
<p>我还改了.ssh/config:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Host github.com
   HostName github.com
   User git
   #socks5
   ProxyCommand nc -X 5 -x 127.0.0.1:7891 %h %p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在/etc/config添加:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># Github
140.82.114.3 github.com

185.199.110.133 raw.github.com

185.199.110.133 raw.githubusercontent.com

199.232.69.194 github.global.ssl.fastly.net

185.199.108.153 assets-cdn.github.com

185.199.109.153 assets-cdn.github.com

185.199.110.153 assets-cdn.github.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="step3"><a href="#step3" class="headerlink" title="step3:"></a>step3:</h2><p>我在brew cleanup 遇到”Failed to download <a href="https://formulae.brew.sh/api/cask.json">https://formulae.brew.sh/api/cask.json</a> “<br>这个文件不知道为啥下载很慢，以前没这个问题。<br>使用wget测出需要好几十个小时，才能下完。<br>猜测是终端不能翻墙的原因。<br>遂google<br>在这里看到解决办法：<a href="https://github.com/Homebrew/brew/issues/14516">https://github.com/Homebrew/brew/issues/14516</a><br>我做了如下:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rm -r &quot;$(brew --cache)&#x2F;api&quot; # &#x2F;Users&#x2F;changqingaas&#x2F;Library&#x2F;Caches&#x2F;Homebrew&#x2F;api
export HOMEBREW_NO_INSTALL_FROM_API&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>成功了，绕过了这个文件下载很慢的问题。</p>
<p>但是，当我</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>发现了下载速度很慢，不知道这和之前改到清华镜像是否有原因。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">&#x3D;&#x3D;&gt; Fetching node@16
&#x3D;&#x3D;&gt; Downloading https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;homebrew-bottles&#x2F;node%4016-
######################################################################## 100.0%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="step4"><a href="#step4" class="headerlink" title="step4:"></a>step4:</h2><p>到这里事情并没有结束。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">wget https:&#x2F;&#x2F;formulae.brew.sh&#x2F;api&#x2F;formula.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>速度依然很慢。</p>
<p>但是，基本每条brew指令都需要下载该文件。</p>
<p>实践后，可知：每次运行brew命令前，可以执行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">export HOMEBREW_NO_INSTALL_FROM_API&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>执行之后，基本就能使用brew命令了。不过这样只能起到短期效果。</p>
<p>长期解决办法是：把它写进.zshrc or .bash_profile；source一下。</p>
<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>git命令翻墙和终端翻墙可能仍是问题。</p>
<ul>
<li>目前实测git clone <a href="https://github.com/XXX/XXX">https://github.com/XXX/XXX</a> 没问题 <ul>
<li>速度：M/s </li>
</ul>
</li>
<li>目前实测 wget <a href="https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz">https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz</a><ul>
<li>速度：几十kb/s有点慢 </li>
<li>好在可以在浏览器下载后，move到目标文件夹</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>踩坑</category>
      </categories>
      <tags>
        <tag>踩坑</tag>
      </tags>
  </entry>
  <entry>
    <title>《Go Web编程》阅读笔记</title>
    <url>/%E4%B9%A6%E6%91%98/Go/GoWeb%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1 环境配置"></a>1 环境配置</h1><p>Go 是一种新的语言，一种并发的、带垃圾回收的、快速编译的语言。它具有以下特点：</p>
<ul>
<li><p>它可以在一台计算机上用几秒钟的时间编译一个大型的 Go 程序。</p>
</li>
<li><p>Go 为软件构造提供了一种模型，它使依赖分析更加容易，且避免了大部分 C 风格 include 文件与库的开头。</p>
</li>
<li>Go 是静态类型的语言，它的类型系统没有层级。因此用户不需要在定义类型之间的关系上花费时间，这样感觉起来比典型的面向对象语言更轻量级。</li>
<li>Go 完全是垃圾回收型的语言，并为并发执行与通信提供了基本的支持。</li>
<li>按照其设计，Go 打算为多核机器上系统软件的构造提供一种方法。</li>
</ul>
<p>Go 是一种编译型语言，它结合了解释型语言的游刃有余，动态类型语言的开发效率，以及静态类型的安全性。它也打算成为现代的，支持网络与多核计算的语言。要满足这些目标，需要解决一些语言上的问题：一个富有表达能力但轻量级的类型系统，并发与垃圾回收机制，严格的依赖规范等等。这些无法通过库或工具解决好，因此 Go 也就应运而生了。 </p>
<p><img src="https://cdn.learnku.com/build-web-application-with-golang/images/navi1.png?raw=true" alt="img"></p>
<h2 id="1-1-安装-Go"><a href="#1-1-安装-Go" class="headerlink" title="1.1. 安装 Go"></a>1.1. 安装 Go</h2><h3 id="Go-源码安装"><a href="#Go-源码安装" class="headerlink" title="Go 源码安装"></a>Go 源码安装</h3><p>Go 1.5 彻底移除 C 代码，Runtime、Compiler、Linker 均由 Go 编写，实现自举。只需要安装了上一个版本，即可从源码安装。</p>
<p>在 Go 1.5 前，Go 的源代码中，有些部分是用 Plan 9 C 和 AT&amp;T 汇编写的，因此假如你要想从源码安装，就必须安装 C 的编译工具。 </p>
<h2 id="1-2-GOPATH-与工作空间"><a href="#1-2-GOPATH-与工作空间" class="headerlink" title="1.2. GOPATH 与工作空间"></a>1.2. GOPATH 与工作空间</h2><p>GOPATH 来存放 Go 源码，Go 的可运行文件，以及相应的编译之后的包文件。所以这个目录下面有三个子目录：src、bin、pkg</p>
<p>GOPATH 环境变量现在有一个默认值，如果它没有被设置。 它在 Unix 上默认为 <strong>$HOME/go</strong>，在 Windows 上默认为 <strong>%USERPROFILE%/go</strong>。</p>
<h3 id="GOPATH-设置"><a href="#GOPATH-设置" class="headerlink" title="GOPATH 设置"></a>GOPATH 设置</h3><p>GOPATH 允许多个目录，当有多个目录时，请注意分隔符，多个目录的时候 Windows 是分号，Linux 系统是冒号，当有多个 GOPATH 时，默认会将 go get 的内容放在第一个目录下。</p>
<p>以上 $GOPATH 目录约定有三个子目录：</p>
<ul>
<li>src 存放源代码（比如：.go .c .h .s 等）</li>
<li>pkg 编译后生成的文件（比如：.a）</li>
<li>bin 编译后生成的可执行文件（为了方便，可以把此目录加入到 $PATH 变量中，如果有多个 gopath，那么使用 ${GOPATH//://bin:}/bin 添加所有的 bin 目录）</li>
<li>以后我所有的例子都是以 mygo 作为我的 gopath 目录 </li>
</ul>
<h3 id="代码目录结构规划"><a href="#代码目录结构规划" class="headerlink" title="代码目录结构规划"></a>代码目录结构规划</h3><p>GOPATH 下的 src 目录就是接下来开发程序的主要目录，所有的源码都是放在这个目录下面，那么一般我们的做法就是一个目录一个项目，例如: $GOPATH/src/mymath 表示 mymath 这个应用包或者可执行应用，这个根据 package 是 main 还是其他来决定，main 的话就是可执行应用，其他的话就是应用包，这个会在后续详细介绍 package。</p>
<p> 所以当新建应用或者一个代码包时都是在 src 目录下新建一个文件夹，文件夹名称一般是代码包名称，当然也允许多级目录，例如在 src 下面新建了目录 $GOPATH/src/github.com/astaxie/beedb 那么这个包路径就是 “github.com/astaxie/beedb”，包名称是最后一个目录 beedb</p>
<p> <strong>注意：一般建议 package 的名称和目录名保持一致</strong></p>
<p>下面我就以mymath为例来讲述如何编写应用包，执行如下代码</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cd $GOPATH&#x2F;src
mkdir mymath<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>新建文件sqrt.go，内容如下</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">&#x2F;&#x2F; $GOPATH&#x2F;src&#x2F;mymath&#x2F;sqrt.go源码如下：
package mymath

func Sqrt(x float64) float64 &#123;
    z :&#x3D; 0.0
    for i :&#x3D; 0; i &lt; 1000; i++ &#123;
        z -&#x3D; (z*z - x) &#x2F; (2 * x)
    &#125;
    return z
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="编译应用"><a href="#编译应用" class="headerlink" title="编译应用"></a>编译应用</h2><p>1、只要进入对应的应用包目录，然后执行<code>go install</code>，就可以安装了</p>
<p>2、在任意的目录执行如下代码<code>go install mymath</code></p>
<p>安装完之后，我们可以进入如下目录</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cd $GOPATH&#x2F;pkg&#x2F;$&#123;GOOS&#125;_$&#123;GOARCH&#125;
&#x2F;&#x2F;可以看到如下文件
mymath.a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>这个.a文件是应用包，那么我们如何进行调用呢？</p>
<p>接下来我们新建一个应用程序来调用这个应用包</p>
<p>新建应用包mathapp</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cd $GOPATH&#x2F;src
mkdir mathapp
cd mathapp
vim main.go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>$GOPATH/src/mathapp/main.go</code>源码：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">package main

import (
      &quot;mymath&quot;
      &quot;fmt&quot;
)

func main() &#123;
      fmt.Printf(&quot;Hello, world.  Sqrt(2) &#x3D; %v\n&quot;, mymath.Sqrt(2))
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如何编译程序呢？进入该应用目录，然后执行<code>go build</code>，那么在该目录下面会生成一个mathapp的可执行文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">.&#x2F;mathapp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>输出如下内容</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Hello, world.  Sqrt(2) &#x3D; 1.414213562373095<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如何安装该应用，进入该目录执行<code>go install</code>,那么在$GOPATH/bin/下增加了一个可执行文件mathapp, 还记得前面我们把<code>$GOPATH/bin</code>加到我们的PATH里面了，这样可以在命令行输入如下命令就可以执行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mathapp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h3 id="获取远程包"><a href="#获取远程包" class="headerlink" title="获取远程包"></a>获取远程包</h3><p>go语言有一个获取远程包的工具就是<code>go get</code>，目前go get支持多数开源社区(例如：github、googlecode、bitbucket、Launchpad)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go get github.com&#x2F;astaxie&#x2F;beedb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>go get -u 参数可以自动更新包，而且当go get的时候会自动获取该包依赖的其他第三方包</p>
</blockquote>
<p>通过这个命令可以获取相应的源码，对应的开源平台采用不同的源码控制工具，例如github采用git、googlecode采用hg，所以要想获取这些源码，必须先安装相应的源码控制工具</p>
<h2 id="1-3-Go-命令"><a href="#1-3-Go-命令" class="headerlink" title="1.3 Go 命令"></a>1.3 Go 命令</h2><p>略</p>
<h3 id="其它命令"><a href="#其它命令" class="headerlink" title="其它命令"></a>其它命令</h3><p>go还提供了其它很多的工具，例如下面的这些工具</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go version 查看go当前的版本
go env 查看当前go的环境变量
go list 列出当前全部安装的package
go run 编译并运行Go程序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="3-Web基础"><a href="#3-Web基础" class="headerlink" title="3 Web基础"></a>3 Web基础</h1><p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220514221954.png" alt="img"></p>
<h2 id="3-1-Web工作方式"><a href="#3-1-Web工作方式" class="headerlink" title="3.1 Web工作方式"></a>3.1 Web工作方式</h2><p>对于普通的上网过程，系统其实是这样做的：浏览器本身是一个客户端，当你输入URL的时候，首先浏览器会去请求DNS服务器，通过DNS获取相应的域名对应的IP，然后通过IP地址找到IP对应的服务器后，要求建立TCP连接，等浏览器发送完HTTP Request（请求）包后，服务器接收到请求包之后才开始处理请求包，服务器调用自身服务，返回HTTP Response（响应）包；客户端收到来自服务器的响应后开始渲染这个Response包里的主体（body），等收到全部的内容随后断开与该服务器之间的TCP连接。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220514222040.png" alt="img"></p>
<p>一个Web服务器也被称为HTTP服务器，它通过HTTP协议与客户端通信。这个客户端通常指的是Web浏览器(其实手机端客户端内部也是浏览器实现的)。</p>
<p>Web服务器的工作原理可以简单地归纳为：</p>
<ul>
<li>客户机通过TCP/IP协议建立到服务器的TCP连接</li>
<li>客户端向服务器发送HTTP协议请求包，请求服务器里的资源文档</li>
<li>服务器向客户机发送HTTP协议应答包，如果请求的资源包含有动态语言的内容，那么服务器会调用动态语言的解释引擎负责处理“动态内容”，并将处理得到的数据返回给客户端</li>
<li>客户机与服务器断开。由客户端解释HTML文档，在客户端屏幕上渲染图形结果</li>
</ul>
<h3 id="URL和DNS解析"><a href="#URL和DNS解析" class="headerlink" title="URL和DNS解析"></a>URL和DNS解析</h3><p>URL(Uniform Resource Locator)是“统一资源定位符”的英文缩写，用于描述一个网络上的资源, 基本格式如下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">scheme:&#x2F;&#x2F;host[:port#]&#x2F;path&#x2F;...&#x2F;[?query-string][#anchor]
scheme         指定低层使用的协议(例如：http, https, ftp)
host           HTTP服务器的IP地址或者域名
port#          HTTP服务器的默认端口是80，这种情况下端口号可以省略。如果使用了别的端口，必须指明，例如 http:&#x2F;&#x2F;www.cnblogs.com:8080&#x2F;
path           访问资源的路径
query-string   发送给http服务器的数据
anchor         锚<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>DNS(Domain Name System)是“域名系统”的英文缩写，是一种组织成域层次结构的计算机和网络服务命名系统，它用于TCP/IP网络，它从事将主机名或域名转换为实际IP地址的工作。DNS就是这样的一位“翻译官”，它的基本工作原理可用下图来表示。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220514222503.png" alt="img"></p>
<p>更详细的DNS解析的过程如下，这个过程有助于我们理解DNS的工作模式</p>
<ol>
<li>在浏览器中输入www.qq.com域名，操作系统会先检查自己本地的hosts文件是否有这个网址映射关系，如果有，就先调用这个IP地址映射，完成域名解析。</li>
<li>如果hosts里没有这个域名的映射，则查找本地DNS解析器缓存，是否有这个网址映射关系，如果有，直接返回，完成域名解析。</li>
<li>如果hosts与本地DNS解析器缓存都没有相应的网址映射关系，首先会找TCP/IP参数中设置的首选DNS服务器，在此我们叫它本地DNS服务器，此服务器收到查询时，如果要查询的域名，包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析，此解析具有权威性。</li>
<li>如果要查询的域名，不由本地DNS服务器区域解析，但该服务器已缓存了此网址映射关系，则调用这个IP地址映射，完成域名解析，此解析不具有权威性。</li>
<li>如果本地DNS服务器本地区域文件与缓存解析都失效，则根据本地DNS服务器的设置（是否设置转发器）进行查询，如果未用转发模式，本地DNS就把请求发至 “根DNS服务器”，“根DNS服务器”收到请求后会判断这个域名(.com)是谁来授权管理，并会返回一个负责该顶级域名服务器的一个IP。本地DNS服务器收到IP信息后，将会联系负责.com域的这台服务器。这台负责.com域的服务器收到请求后，如果自己无法解析，它就会找一个管理.com域的下一级DNS服务器地址(qq.com)给本地DNS服务器。当本地DNS服务器收到这个地址后，就会找qq.com域服务器，重复上面的动作，进行查询，直至找到www.qq.com主机。</li>
<li>如果用的是转发模式，此DNS服务器就会把请求转发至上一级DNS服务器，由上一级服务器进行解析，上一级服务器如果不能解析，或找根DNS或把转请求转至上上级，以此循环。不管是本地DNS服务器用是是转发，还是根提示，最后都是把结果返回给本地DNS服务器，由此DNS服务器再返回给客户机。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220514222623.png" alt="img"></p>
<p>  DNS解析的整个流程（完成若干次迭代查询，即，问询者角色不变，但反复更替问询对象)</p>
<p>通过上面的步骤，我们最后获取的是IP地址，也就是浏览器最后发起请求的时候是基于IP来和服务器做信息交互的。</p>
<h3 id="HTTP协议详解"><a href="#HTTP协议详解" class="headerlink" title="HTTP协议详解"></a>HTTP协议详解</h3><p>HTTP是一种让Web服务器与浏览器(客户端)通过Internet发送与接收数据的协议,它建立在TCP协议之上，一般采用TCP的80端口。它是一个请求、响应协议—客户端发出一个请求，服务器响应这个请求。在HTTP中，客户端总是通过建立一个连接与发送一个HTTP请求来发起一个事务。服务器不能主动去与客户端联系，也不能给客户端发出一个回调连接。客户端与服务器端都可以提前中断一个连接。例如，当浏览器下载一个文件时，你可以通过点击“停止”键来中断文件的下载，关闭与服务器的HTTP连接。</p>
<p>HTTP协议是无状态的，同一个客户端的这次请求和上次请求是没有对应关系，对HTTP服务器来说，它并不知道这两个请求是否来自同一个客户端。为了解决这个问题， Web程序引入了Cookie机制来维护连接的可持续状态。</p>
<p>HTTP协议是建立在TCP协议之上的，因此TCP攻击一样会影响HTTP的通讯，例如比较常见的一些攻击：SYN Flood是当前最流行的DoS（拒绝服务攻击）与DdoS（分布式拒绝服务攻击）的方式之一，这是一种利用TCP协议缺陷，发送大量伪造的TCP连接请求，从而使得被攻击方资源耗尽（CPU满负荷或内存不足）的攻击方式。</p>
<h4 id="HTTP请求包（浏览器信息）"><a href="#HTTP请求包（浏览器信息）" class="headerlink" title="HTTP请求包（浏览器信息）"></a>HTTP请求包（浏览器信息）</h4><p>我们先来看看Request包的结构, Request包分为3部分，第一部分叫Request line（请求行）, 第二部分叫Request header（请求头）,第三部分是body（主体）。header和body之间有个空行，请求包的例子所示:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET &#x2F;domains&#x2F;example&#x2F; HTTP&#x2F;1.1        &#x2F;&#x2F;请求行: 请求方法 请求URI HTTP协议&#x2F;协议版本
Host：www.iana.org                &#x2F;&#x2F;服务端的主机名
User-Agent：Mozilla&#x2F;5.0 (Windows NT 6.1) AppleWebKit&#x2F;537.4 (KHTML, like Gecko) Chrome&#x2F;22.0.1229.94 Safari&#x2F;537.4            &#x2F;&#x2F;浏览器信息
Accept：text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,*&#x2F;*;q&#x3D;0.8    &#x2F;&#x2F;客户端能接收的mine
Accept-Encoding：gzip,deflate,sdch        &#x2F;&#x2F;是否支持流压缩
Accept-Charset：UTF-8,*;q&#x3D;0.5        &#x2F;&#x2F;客户端字符编码集
&#x2F;&#x2F;空行,用于分割请求头和消息体
&#x2F;&#x2F;消息体,请求资源参数,例如POST传递的参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>HTTP协议定义了很多与服务器交互的请求方法，最基本的有4种，分别是GET,POST,PUT,DELETE。一个URL地址用于描述一个网络上的资源，而HTTP中的GET, POST, PUT, DELETE就对应着对这个资源的查，改，增，删4个操作。我们最常见的就是GET和POST了。GET一般用于获取/查询资源信息，而POST一般用于更新资源信息。</p>
<p>我们看看GET和POST的区别:</p>
<ol>
<li>我们可以看到GET请求消息体为空，POST请求带有消息体。</li>
<li>GET提交的数据会放在URL之后，以<code>?</code>分割URL和传输数据，参数之间以<code>&amp;</code>相连，如<code>EditPosts.aspx?name=test1&amp;id=123456</code>。POST方法是把提交的数据放在HTTP包的body中。</li>
<li>GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制。</li>
<li>GET方式提交数据，会带来安全问题，比如一个登录页面，通过GET方式提交数据时，用户名和密码将出现在URL上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码。</li>
</ol>
<h4 id="HTTP响应包（服务器信息）"><a href="#HTTP响应包（服务器信息）" class="headerlink" title="HTTP响应包（服务器信息）"></a>HTTP响应包（服务器信息）</h4><p>我们再来看看HTTP的response包，他的结构如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">HTTP&#x2F;1.1 200 OK                        &#x2F;&#x2F;状态行
Server: nginx&#x2F;1.0.8                    &#x2F;&#x2F;服务器使用的WEB软件名及版本
Date:Date: Tue, 30 Oct 2012 04:14:25 GMT        &#x2F;&#x2F;发送时间
Content-Type: text&#x2F;html                &#x2F;&#x2F;服务器发送信息的类型
Transfer-Encoding: chunked            &#x2F;&#x2F;表示发送HTTP包是分段发的
Connection: keep-alive                &#x2F;&#x2F;保持连接状态
Content-Length: 90                    &#x2F;&#x2F;主体内容长度
&#x2F;&#x2F;空行 用来分割消息头和主体
&lt;!DOCTYPE html PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD XHTML 1.0 Transitional&#x2F;&#x2F;EN&quot;... &#x2F;&#x2F;消息体<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Response包中的第一行叫做状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成。</p>
<p>状态码用来告诉HTTP客户端,HTTP服务器是否产生了预期的Response。HTTP/1.1协议中定义了5类状态码， 状态码由三位数字组成，第一个数字定义了响应的类别</p>
<ul>
<li>1XX 提示信息 - 表示请求已被成功接收，继续处理</li>
<li>2XX 成功 - 表示请求已被成功接收，理解，接受</li>
<li>3XX 重定向 - 要完成请求必须进行更进一步的处理</li>
<li>4XX 客户端错误 - 请求有语法错误或请求无法实现</li>
<li>5XX 服务器端错误 - 服务器未能实现合法的请求</li>
</ul>
<h4 id="HTTP协议是无状态的和Connection-keep-alive的区别"><a href="#HTTP协议是无状态的和Connection-keep-alive的区别" class="headerlink" title="HTTP协议是无状态的和Connection: keep-alive的区别"></a>HTTP协议是无状态的和Connection: keep-alive的区别</h4><p>无状态是指协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。从另一方面讲，打开一个服务器上的网页和你之前打开这个服务器上的网页之间没有任何联系。</p>
<p>HTTP是一个无状态的面向连接的协议，无状态不代表HTTP不能保持TCP连接，更不能代表HTTP使用的是UDP协议（面对无连接）。</p>
<p>从HTTP/1.1起，默认都开启了Keep-Alive保持连接特性，简单地说，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的TCP连接。</p>
<p>Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同服务器软件（如Apache）中设置这个时间。</p>
<h3 id="请求实例"><a href="#请求实例" class="headerlink" title="请求实例"></a>请求实例</h3><p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220514224125.png" alt="img"></p>
<p>图3.7 一次请求的request和response</p>
<p>上面这张图我们可以了解到整个的通讯过程，同时细心的读者是否注意到了一点，一个URL请求但是左边栏里面为什么会有那么多的资源请求(这些都是静态文件，go对于静态文件有专门的处理方式)。</p>
<p>这个就是浏览器的一个功能，第一次请求url，服务器端返回的是html页面，然后浏览器开始渲染HTML：当解析到HTML DOM里面的图片连接，css脚本和js脚本的链接，浏览器就会自动发起一个请求静态资源的HTTP请求，获取相对应的静态资源，然后浏览器就会渲染出来，最终将所有资源整合、渲染，完整展现在我们面前的屏幕上。</p>
<blockquote>
<p>网页优化方面有一项措施是减少HTTP请求次数，就是把尽量多的css和js资源合并在一起，目的是尽量减少网页请求静态资源的次数，提高网页加载速度，同时减缓服务器的压力。</p>
</blockquote>
<h2 id="3-2-Go搭建一个Web服务器"><a href="#3-2-Go搭建一个Web服务器" class="headerlink" title="3.2 Go搭建一个Web服务器"></a>3.2 Go搭建一个Web服务器</h2><h3 id="http包建立Web服务器"><a href="#http包建立Web服务器" class="headerlink" title="http包建立Web服务器"></a>http包建立Web服务器</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">package main

import (
    &quot;fmt&quot;
    &quot;net&#x2F;http&quot;
    &quot;strings&quot;
    &quot;log&quot;
)

func sayhelloName(w http.ResponseWriter, r *http.Request) &#123;
    r.ParseForm()  &#x2F;&#x2F;解析参数，默认是不会解析的
    fmt.Println(r.Form)  &#x2F;&#x2F;这些信息是输出到服务器端的打印信息
    fmt.Println(&quot;path&quot;, r.URL.Path)
    fmt.Println(&quot;scheme&quot;, r.URL.Scheme)
    fmt.Println(r.Form[&quot;url_long&quot;])
    for k, v :&#x3D; range r.Form &#123;
        fmt.Println(&quot;key:&quot;, k)
        fmt.Println(&quot;val:&quot;, strings.Join(v, &quot;&quot;))
    &#125;
    fmt.Fprintf(w, &quot;Hello astaxie!&quot;) &#x2F;&#x2F;这个写入到w的是输出到客户端的
&#125;

func main() &#123;
    http.HandleFunc(&quot;&#x2F;&quot;, sayhelloName) &#x2F;&#x2F;设置访问的路由
    err :&#x3D; http.ListenAndServe(&quot;:9090&quot;, nil) &#x2F;&#x2F;设置监听的端口
    if err !&#x3D; nil &#123;
        log.Fatal(&quot;ListenAndServe: &quot;, err)
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>浏览器输入：<a href="http://localhost:9090/?url_long=111&amp;url_long=222">http://localhost:9090/?url_long=111&amp;url_long=222</a> </p>
<p>输出如下：</p>
<p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2cb8l936yj20k80g4t94.jpg" alt="image-20220518094052940"></p>
<p>要编写一个Web服务器很简单，只要调用http包的两个函数就可以了。</p>
<blockquote>
<p>如果你以前是PHP程序员，那你也许就会问，我们的nginx、apache服务器不需要吗？Go就是不需要这些，因为他直接就监听tcp端口了，做了nginx做的事情，然后sayhelloName这个其实就是我们写的逻辑函数了，跟php里面的控制层（controller）函数类似。</p>
<p>如果你以前是Python程序员，那么你一定听说过tornado，这个代码和他是不是很像，对，没错，Go就是拥有类似Python这样动态语言的特性，写Web应用很方便。</p>
<p>如果你以前是Ruby程序员，会发现和ROR的/script/server启动有点类似。</p>
</blockquote>
<p>我们看到Go通过简单的几行代码就已经运行起来一个Web服务了，而且这个Web服务内部有支持高并发的特性，</p>
<h2 id="3-3-Go如何使得Web工作"><a href="#3-3-Go如何使得Web工作" class="headerlink" title="3.3 Go如何使得Web工作"></a>3.3 Go如何使得Web工作</h2><h3 id="web工作方式的几个概念"><a href="#web工作方式的几个概念" class="headerlink" title="web工作方式的几个概念"></a>web工作方式的几个概念</h3><p>以下均是服务器端的几个概念</p>
<p>Request：用户请求的信息，用来解析用户的请求信息，包括post、get、cookie、url等信息</p>
<p>Response：服务器需要反馈给客户端的信息</p>
<p>Conn：用户的每次请求链接</p>
<p>Handler：处理请求和生成返回信息的处理逻辑</p>
<h3 id="分析http包运行机制"><a href="#分析http包运行机制" class="headerlink" title="分析http包运行机制"></a>分析http包运行机制</h3><p>如下图所示，是Go实现Web服务的工作模式的流程图</p>
<p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2cbjl2w7ij20k40f0wfd.jpg" alt="img"></p>
<ol>
<li>创建Listen Socket, 监听指定的端口, 等待客户端请求到来。</li>
<li>Listen Socket接受客户端的请求, 得到Client Socket, 接下来通过Client Socket与客户端通信。</li>
<li>处理客户端的请求, 首先从Client Socket读取HTTP请求的协议头, 如果是POST方法, 还可能要读取客户端提交的数据, 然后交给相应的handler处理请求, handler处理完毕准备好客户端需要的数据, 通过Client Socket写给客户端。</li>
</ol>
<p>这整个的过程里面我们只要了解清楚下面三个问题，也就知道Go是如何让Web运行起来了</p>
<ul>
<li>如何监听端口？</li>
<li>如何接收客户端请求？</li>
<li>如何分配handler？</li>
</ul>
<p>前面小节的代码里面我们可以看到，Go是通过一个函数<code>ListenAndServe</code>来处理这些事情的，这个底层其实这样处理的：初始化一个server对象，然后调用了<code>net.Listen(&quot;tcp&quot;, addr)</code>，也就是底层用TCP协议搭建了一个服务，然后监控我们设置的端口。</p>
<p>下面代码来自Go的http包的源码，通过下面的代码我们可以看到整个的http处理过程：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func (srv *Server) Serve(l net.Listener) error &#123;
    defer l.Close()
    var tempDelay time.Duration &#x2F;&#x2F; how long to sleep on accept failure
    for &#123;
        rw, e :&#x3D; l.Accept()
        if e !&#x3D; nil &#123;
            if ne, ok :&#x3D; e.(net.Error); ok &amp;&amp; ne.Temporary() &#123;
                if tempDelay &#x3D;&#x3D; 0 &#123;
                    tempDelay &#x3D; 5 * time.Millisecond
                &#125; else &#123;
                    tempDelay *&#x3D; 2
                &#125;
                if max :&#x3D; 1 * time.Second; tempDelay &gt; max &#123;
                    tempDelay &#x3D; max
                &#125;
                log.Printf(&quot;http: Accept error: %v; retrying in %v&quot;, e, tempDelay)
                time.Sleep(tempDelay)
                continue
            &#125;
            return e
        &#125;
        tempDelay &#x3D; 0
        c, err :&#x3D; srv.newConn(rw)
        if err !&#x3D; nil &#123;
            continue
        &#125;
        go c.serve()
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>监控之后如何接收客户端的请求呢？上面代码执行监控端口之后，调用了<code>srv.Serve(net.Listener)</code>函数，这个函数就是处理接收客户端的请求信息。这个函数里面起了一个<code>for&#123;&#125;</code>，首先通过Listener接收请求，其次创建一个Conn，最后单独开了一个goroutine，把这个请求的数据当做参数扔给这个conn去服务：<code>go c.serve()</code>。这个就是高并发体现了，用户的每一次请求都是在一个新的goroutine去服务，相互不影响。</p>
<p>那么如何具体分配到相应的函数来处理请求呢？conn首先会解析request:<code>c.readRequest()</code>,然后获取相应的handler:<code>handler := c.server.Handler</code>，也就是我们刚才在调用函数<code>ListenAndServe</code>时候的第二个参数，我们前面例子传递的是nil，也就是为空，那么默认获取<code>handler = DefaultServeMux</code>,那么这个变量用来做什么的呢？对，这个变量就是一个路由器，它用来匹配url跳转到其相应的handle函数，那么这个我们有设置过吗?有，我们调用的代码里面第一句不是调用了<code>http.HandleFunc(&quot;/&quot;, sayhelloName)</code>嘛。这个作用就是注册了请求<code>/</code>的路由规则，当请求uri为”/“，路由就会转到函数sayhelloName，DefaultServeMux会调用ServeHTTP方法，这个方法内部其实就是调用sayhelloName本身，最后通过写入response的信息反馈到客户端。</p>
<p>详细的整个流程如下图所示：</p>
<p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h2cefv4idhj20f20ed0tp.jpg" alt="img"></p>
<h2 id="3-4-Go的http包详解"><a href="#3-4-Go的http包详解" class="headerlink" title="3.4 Go的http包详解"></a>3.4 Go的http包详解</h2><p>Go的http有两个核心功能：Conn、ServeMux</p>
<h3 id="Conn的goroutine"><a href="#Conn的goroutine" class="headerlink" title="Conn的goroutine"></a>Conn的goroutine</h3><p>Go为了实现高并发和高性能, 使用了goroutines来处理Conn的读写事件, 这样每个请求都能保持独立，相互不会阻塞，可以高效的响应网络事件。这是Go高效的保证。</p>
<p>Go在等待客户端请求里面是这样写的：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">c, err :&#x3D; srv.newConn(rw)
if err !&#x3D; nil &#123;
  continue
&#125;
go c.serve()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里我们可以看到客户端的每次请求都会创建一个Conn，这个Conn里面保存了该次请求的信息，然后再传递到对应的handler，该handler中便可以读取到相应的header信息，这样保证了每个请求的独立性。</p>
<h3 id="ServeMux的自定义"><a href="#ServeMux的自定义" class="headerlink" title="ServeMux的自定义"></a>ServeMux的自定义</h3><p>conn.server内部是调用了http包默认的路由器，通过路由器把本次请求的信息传递到了后端的处理函数。那么这个路由器是怎么实现的呢？</p>
<p>它的结构如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type ServeMux struct &#123;
    mu sync.RWMutex   &#x2F;&#x2F;锁，由于请求涉及到并发处理，因此这里需要一个锁机制
    m  map[string]muxEntry  &#x2F;&#x2F; 路由规则，一个string对应一个mux实体，这里的string就是注册的路由表达式
    hosts bool &#x2F;&#x2F; 是否在任意的规则中带有host信息
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下面看一下muxEntry</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type muxEntry struct &#123;
    explicit bool   &#x2F;&#x2F; 是否精确匹配
    h        Handler &#x2F;&#x2F; 这个路由表达式对应哪个handler
    pattern  string  &#x2F;&#x2F;匹配字符串
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>接着看一下Handler的定义</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type Handler interface &#123;
    ServeHTTP(ResponseWriter, *Request)  &#x2F;&#x2F; 路由实现器
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>Handler是一个接口，但是前一小节中的<code>sayhelloName</code>函数并没有实现ServeHTTP这个接口，为什么能添加呢？原来在http包里面还定义了一个类型<code>HandlerFunc</code>,我们定义的函数<code>sayhelloName</code>就是这个HandlerFunc调用之后的结果，这个类型默认就实现了ServeHTTP这个接口，即我们调用了HandlerFunc(f),强制类型转换f成为HandlerFunc类型，这样f就拥有了ServeHTTP方法。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type HandlerFunc func(ResponseWriter, *Request)

&#x2F;&#x2F; ServeHTTP calls f(w, r).
func (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) &#123;
    f(w, r)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>路由器里面存储好了相应的路由规则之后，那么具体的请求又是怎么分发的呢？请看下面的代码，默认的路由器实现了<code>ServeHTTP</code>：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func (mux *ServeMux) ServeHTTP(w ResponseWriter, r *Request) &#123;
    if r.RequestURI &#x3D;&#x3D; &quot;*&quot; &#123;
        w.Header().Set(&quot;Connection&quot;, &quot;close&quot;)
        w.WriteHeader(StatusBadRequest)
        return
    &#125;
    h, _ :&#x3D; mux.Handler(r)
    h.ServeHTTP(w, r)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如上所示路由器接收到请求之后，如果是<code>*</code>那么关闭链接，不然调用<code>mux.Handler(r)</code>返回对应设置路由的处理Handler，然后执行<code>h.ServeHTTP(w, r)</code></p>
<p>也就是调用对应路由的handler的ServerHTTP接口，那么mux.Handler(r)怎么处理的呢？</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func (mux *ServeMux) Handler(r *Request) (h Handler, pattern string) &#123;
    if r.Method !&#x3D; &quot;CONNECT&quot; &#123;
        if p :&#x3D; cleanPath(r.URL.Path); p !&#x3D; r.URL.Path &#123;
            _, pattern &#x3D; mux.handler(r.Host, p)
            return RedirectHandler(p, StatusMovedPermanently), pattern
        &#125;
    &#125;    
    return mux.handler(r.Host, r.URL.Path)
&#125;

func (mux *ServeMux) handler(host, path string) (h Handler, pattern string) &#123;
    mux.mu.RLock()
    defer mux.mu.RUnlock()

    &#x2F;&#x2F; Host-specific pattern takes precedence over generic ones
    if mux.hosts &#123;
        h, pattern &#x3D; mux.match(host + path)
    &#125;
    if h &#x3D;&#x3D; nil &#123;
        h, pattern &#x3D; mux.match(path)
    &#125;
    if h &#x3D;&#x3D; nil &#123;
        h, pattern &#x3D; NotFoundHandler(), &quot;&quot;
    &#125;
    return
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>原来他是根据用户请求的URL和路由器里面存储的map去匹配的，当匹配到之后返回存储的handler，调用这个handler的ServeHTTP接口就可以执行到相应的函数了。</p>
<p>通过上面这个介绍，我们了解了整个路由过程，Go其实支持外部实现的路由器 <code>ListenAndServe</code>的第二个参数就是用以配置外部路由器的，它是一个Handler接口，即外部路由器只要实现了Handler接口就可以,我们可以在自己实现的路由器的ServeHTTP里面实现自定义路由功能。</p>
<p>如下代码所示，我们自己实现了一个简易的路由器</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">package main

import (
    &quot;fmt&quot;
    &quot;net&#x2F;http&quot;
)

type MyMux struct &#123;
&#125;

func (p *MyMux) ServeHTTP(w http.ResponseWriter, r *http.Request) &#123;
    if r.URL.Path &#x3D;&#x3D; &quot;&#x2F;&quot; &#123;
        sayhelloName(w, r)
        return
    &#125;
    http.NotFound(w, r)
    return
&#125;

func sayhelloName(w http.ResponseWriter, r *http.Request) &#123;
    fmt.Fprintf(w, &quot;Hello myroute!&quot;)
&#125;

func main() &#123;
    mux :&#x3D; &amp;MyMux&#123;&#125;
    http.ListenAndServe(&quot;:9090&quot;, mux)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Go代码的执行流程"><a href="#Go代码的执行流程" class="headerlink" title="Go代码的执行流程"></a>Go代码的执行流程</h3><p>通过对http包的分析之后，现在让我们来梳理一下整个的代码执行过程。</p>
<ul>
<li><p>首先调用Http.HandleFunc</p>
<p>按顺序做了几件事：</p>
<p>1 调用了DefaultServeMux的HandleFunc</p>
<p>2 调用了DefaultServeMux的Handle</p>
<p>3 往DefaultServeMux的map[string]muxEntry中增加对应的handler和路由规则</p>
</li>
<li><p>其次调用http.ListenAndServe(“:9090”, nil)</p>
<p>按顺序做了几件事情：</p>
<p>1 实例化Server</p>
<p>2 调用Server的ListenAndServe()</p>
<p>3 调用net.Listen(“tcp”, addr)监听端口</p>
<p>4 启动一个for循环，在循环体中Accept请求</p>
<p>5 对每个请求实例化一个Conn，并且开启一个goroutine为这个请求进行服务go c.serve()</p>
<p>6 读取每个请求的内容w, err := c.readRequest()</p>
<p>7 判断handler是否为空，如果没有设置handler（这个例子就没有设置handler），handler就设置为DefaultServeMux</p>
<p>8 调用handler的ServeHttp</p>
<p>9 在这个例子中，下面就进入到DefaultServeMux.ServeHttp</p>
<p>10 根据request选择handler，并且进入到这个handler的ServeHTTP</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">mux.handler(r).ServeHTTP(w, r)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>11 选择handler：</p>
<p>A 判断是否有路由能满足这个request（循环遍历ServerMux的muxEntry）</p>
<p>B 如果有路由满足，调用这个路由handler的ServeHttp</p>
<p>C 如果没有路由满足，调用NotFoundHandler的ServeHttp</p>
</li>
</ul>
<h1 id="4-表单"><a href="#4-表单" class="headerlink" title="4 表单"></a>4 表单</h1><p>在Request里面的有专门的form处理，可以很方便的整合到Web开发里面来，4.1小节里面将讲解Go如何处理表单的输入。由于不能信任任何用户的输入，所以我们需要对这些输入进行有效性验证，4.2小节将就如何进行一些普通的验证进行详细的演示。</p>
<p>HTTP协议是一种无状态的协议，那么如何才能辨别是否是同一个用户呢？同时又如何保证一个表单不出现多次递交的情况呢？4.3和4.4小节里面将对cookie(cookie是存储在客户端的信息，能够每次通过header和服务器进行交互的数据)等进行详细讲解。</p>
<p>表单还有一个很大的功能就是能够上传文件，那么Go是如何处理文件上传的呢？针对大文件上传我们如何有效的处理呢？4.5小节我们将一起学习Go处理文件上传的知识。</p>
<p><img src="https://wizardforcel.gitbooks.io/build-web-application-with-golang/content/images/navi4.png?raw=true" alt="img"></p>
<h2 id="4-1-处理表单的输入"><a href="#4-1-处理表单的输入" class="headerlink" title="4.1 处理表单的输入"></a>4.1 处理表单的输入</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go">package main

import (
    &quot;fmt&quot;
    &quot;html&#x2F;template&quot;
    &quot;log&quot;
    &quot;net&#x2F;http&quot;
    &quot;strings&quot;
)

func sayhelloName(w http.ResponseWriter, r *http.Request) &#123;
    r.ParseForm()       &#x2F;&#x2F;解析url传递的参数，对于POST则解析响应包的主体（request body）
    &#x2F;&#x2F;注意:如果没有调用ParseForm方法，下面无法获取表单的数据
    fmt.Println(r.Form) &#x2F;&#x2F;这些信息是输出到服务器端的打印信息
    fmt.Println(&quot;path&quot;, r.URL.Path)
    fmt.Println(&quot;scheme&quot;, r.URL.Scheme)
    fmt.Println(r.Form[&quot;url_long&quot;])
    for k, v :&#x3D; range r.Form &#123;
        fmt.Println(&quot;key:&quot;, k)
        fmt.Println(&quot;val:&quot;, strings.Join(v, &quot;&quot;))
    &#125;
    fmt.Fprintf(w, &quot;Hello astaxie!&quot;) &#x2F;&#x2F;这个写入到w的是输出到客户端的
&#125;

func login(w http.ResponseWriter, r *http.Request) &#123;
    fmt.Println(&quot;method:&quot;, r.Method) &#x2F;&#x2F;获取请求的方法
    if r.Method &#x3D;&#x3D; &quot;GET&quot; &#123;
        t, _ :&#x3D; template.ParseFiles(&quot;login.html&quot;)
        t.Execute(w, nil)
    &#125; else &#123;
        &#x2F;&#x2F;请求的是登陆数据，那么执行登陆的逻辑判断
        fmt.Println(&quot;username:&quot;, r.Form[&quot;username&quot;])
        fmt.Println(&quot;password:&quot;, r.Form[&quot;password&quot;])
    &#125;
&#125;

func main() &#123;
    http.HandleFunc(&quot;&#x2F;&quot;, sayhelloName)       &#x2F;&#x2F;设置访问的路由
    http.HandleFunc(&quot;&#x2F;login&quot;, login)         &#x2F;&#x2F;设置访问的路由
    err :&#x3D; http.ListenAndServe(&quot;:9090&quot;, nil) &#x2F;&#x2F;设置监听的端口
    if err !&#x3D; nil &#123;
        log.Fatal(&quot;ListenAndServe: &quot;, err)
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    密码:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>登陆<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们输入用户名和密码之后发现在服务器端是不会打印出来任何输出的，为什么呢？默认情况下，Handler里面是不会自动解析form的，必须显式的调用<code>r.ParseForm()</code>后，你才能对这个表单数据进行操作。我们修改一下代码，在<code>fmt.Println(&quot;username:&quot;, r.Form[&quot;username&quot;])</code>之前加一行<code>r.ParseForm()</code>,重新编译，再次测试输入递交，现在是不是在服务器端有输出你的输入的用户名和密码了。</p>
<p><code>r.Form</code>里面包含了所有请求的参数，比如URL中query-string、POST的数据、PUT的数据，所有当你在URL的query-string字段和POST冲突时，会保存成一个slice，里面存储了多个值，Go官方文档中说在接下来的版本里面将会把POST、GET这些数据分离开来。</p>
<p>…….</p>
<p><code>request.Form</code>是一个url.Values类型，里面存储的是对应的类似<code>key=value</code>的信息，下面展示了可以对form数据进行的一些操作:</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">v :&#x3D; url.Values&#123;&#125;
v.Set(&quot;name&quot;, &quot;Ava&quot;)
v.Add(&quot;friend&quot;, &quot;Jess&quot;)
v.Add(&quot;friend&quot;, &quot;Sarah&quot;)
v.Add(&quot;friend&quot;, &quot;Zoe&quot;)
&#x2F;&#x2F; v.Encode() &#x3D;&#x3D; &quot;name&#x3D;Ava&amp;friend&#x3D;Jess&amp;friend&#x3D;Sarah&amp;friend&#x3D;Zoe&quot;
fmt.Println(v.Get(&quot;name&quot;))
fmt.Println(v.Get(&quot;friend&quot;))
fmt.Println(v[&quot;friend&quot;])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p><strong>Tips</strong>: Request本身也提供了FormValue()函数来获取用户提交的参数。如r.Form[“username”]也可写成r.FormValue(“username”)。调用r.FormValue时会自动调用r.ParseForm，所以不必提前调用。r.FormValue只会返回同名参数中的第一个，若参数不存在则返回空字符串。</p>
</blockquote>
<h2 id="4-2-验证表单的输入"><a href="#4-2-验证表单的输入" class="headerlink" title="4.2 验证表单的输入"></a>4.2 验证表单的输入</h2><p>我们平常编写Web应用主要有两方面的数据验证，一个是在页面端的js验证(目前在这方面有很多的插件库，比如ValidationJS插件)，一个是在服务器端的验证，我们这小节讲解的是如何在服务器端验证。</p>
<h3 id="必填字段"><a href="#必填字段" class="headerlink" title="必填字段"></a>必填字段</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">if len(r.Form[&quot;username&quot;][0])&#x3D;&#x3D;0&#123;
    &#x2F;&#x2F;为空的处理
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><code>r.Form</code>对不同类型的表单元素的留空有不同的处理， 对于空文本框、空文本区域以及文件上传，元素的值为空值,而如果是未选中的复选框和单选按钮，则根本不会在r.Form中产生相应条目，如果我们用上面例子中的方式去获取数据时程序就会报错。所以我们需要通过<code>r.Form.Get()</code>来获取值，因为如果字段不存在，通过该方式获取的是空值。但是通过<code>r.Form.Get()</code>只能获取单个的值，如果是map的值，必须通过上面的方式来获取。</p>
<h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><p>如果我们是判断正整数，那么我们先转化成int类型，然后进行处理</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">getint,err:&#x3D;strconv.Atoi(r.Form.Get(&quot;age&quot;))
if err!&#x3D;nil&#123;
    &#x2F;&#x2F;数字转化出错了，那么可能就不是数字
&#125;

&#x2F;&#x2F;接下来就可以判断这个数字的大小范围了
if getint &gt;100 &#123;
    &#x2F;&#x2F;太大了
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>还有一种方式就是正则匹配的方式</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">if m, _ :&#x3D; regexp.MatchString(&quot;^[0-9]+$&quot;, r.Form.Get(&quot;age&quot;)); !m &#123;
    return false
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="中文"><a href="#中文" class="headerlink" title="中文"></a>中文</h3><p>对于中文我们目前有两种方式来验证，可以使用 <code>unicode</code> 包提供的 <code>func Is(rangeTab *RangeTable, r rune) bool</code> 来验证，也可以使用正则方式来验证，这里使用最简单的正则方式，如下代码所示</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">if m, _ :&#x3D; regexp.MatchString(&quot;^\\p&#123;Han&#125;+$&quot;, r.Form.Get(&quot;realname&quot;)); !m &#123;
    return false
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="电子邮件地址"><a href="#电子邮件地址" class="headerlink" title="电子邮件地址"></a>电子邮件地址</h3><p>你想知道用户输入的一个Email地址是否正确，通过如下这个方式可以验证：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">if m, _ :&#x3D; regexp.MatchString(&#96;^([\w\.\_]&#123;2,10&#125;)@(\w&#123;1,&#125;).([a-z]&#123;2,4&#125;)$&#96;, r.Form.Get(&quot;email&quot;)); !m &#123;
    fmt.Println(&quot;no&quot;)
&#125;else&#123;
    fmt.Println(&quot;yes&quot;)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="手机号码"><a href="#手机号码" class="headerlink" title="手机号码"></a>手机号码</h3><p>你想要判断用户输入的手机号码是否正确，通过正则也可以验证：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">if m, _ :&#x3D; regexp.MatchString(&#96;^(1[3|4|5|8][0-9]\d&#123;4,8&#125;)$&#96;, r.Form.Get(&quot;mobile&quot;)); !m &#123;
    return false
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h3><p>如果我们想要判断radio按钮是否有一个被选中了，我们页面的输出可能就是一个男、女性别的选择，但是也可能一个15岁大的无聊小孩，一手拿着http协议的书，另一只手通过telnet客户端向你的程序在发送请求呢，你设定的性别男值是1，女是2，他给你发送一个3，你的程序会出现异常吗？因此我们也需要像下拉菜单的判断方式类似，判断我们获取的值是我们预设的值，而不是额外的值。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>那我们也可以类似下拉菜单的做法一样</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">slice:&#x3D;[]int&#123;1,2&#125;

for _, v :&#x3D; range slice &#123;
    if v &#x3D;&#x3D; r.Form.Get(&quot;gender&quot;) &#123;
        return true
    &#125;
&#125;
return false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>复选框同理。</p>
<h3 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h3><p>你想确定用户填写的日期或时间是否有效。例如 ，用户在日程表中安排8月份的第45天开会，或者提供未来的某个时间作为生日。</p>
<p>Go里面提供了一个time的处理包，我们可以把用户的输入年月日转化成相应的时间，然后进行逻辑判断</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">t :&#x3D; time.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC)
fmt.Printf(&quot;Go launched at %s\n&quot;, t.Local())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>获取time之后我们就可以进行很多时间函数的操作。具体的判断就根据自己的需求调整。</p>
<h3 id="身份证号码"><a href="#身份证号码" class="headerlink" title="身份证号码"></a>身份证号码</h3><p>如果我们想验证表单输入的是否是身份证，通过正则也可以方便的验证，但是身份证有15位和18位，我们两个都需要验证</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">&#x2F;&#x2F;验证15位身份证，15位的是全部数字
if m, _ :&#x3D; regexp.MatchString(&#96;^(\d&#123;15&#125;)$&#96;, r.Form.Get(&quot;usercard&quot;)); !m &#123;
    return false
&#125;

&#x2F;&#x2F;验证18位身份证，18位前17位为数字，最后一位是校验位，可能为数字或字符X。
if m, _ :&#x3D; regexp.MatchString(&#96;^(\d&#123;17&#125;)([0-9]|X)$&#96;, r.Form.Get(&quot;usercard&quot;)); !m &#123;
    return false
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="4-3-预防跨站脚本"><a href="#4-3-预防跨站脚本" class="headerlink" title="4.3 预防跨站脚本"></a>4.3 预防跨站脚本</h2><p>cross-site-scripting （XSS）</p>
<p>攻击者通常会在有漏洞的程序中插入JavaScript、VBScript、 ActiveX或Flash以欺骗用户。一旦得手，他们可以盗取用户帐户信息，修改用户设置，盗取/污染cookie和植入恶意广告等。</p>
<p>对XSS最佳的防护应该结合以下两种方法：一是验证所有输入数据，有效检测攻击(这个我们前面小节已经有过介绍);另一个是对所有输出数据进行适当的处理，以防止任何已成功注入的脚本在浏览器端运行。</p>
<p>那么Go里面是怎么做这个有效防护的呢？Go的html/template里面带有下面几个函数可以帮你转义</p>
<ul>
<li>func HTMLEscape(w io.Writer, b []byte) //把b进行转义之后写到w</li>
<li>func HTMLEscapeString(s string) string //转义s之后返回结果字符串</li>
<li>func HTMLEscaper(args …interface{}) string //支持多个参数一起转义，返回结果字符串</li>
</ul>
<p>我们看4.1小节的例子</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">fmt.Println(&quot;username:&quot;, template.HTMLEscapeString(r.Form.Get(&quot;username&quot;))) &#x2F;&#x2F;输出到服务器端
fmt.Println(&quot;password:&quot;, template.HTMLEscapeString(r.Form.Get(&quot;password&quot;)))
template.HTMLEscape(w, []byte(r.Form.Get(&quot;username&quot;))) &#x2F;&#x2F;输出到客户端<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>如果我们输入的username是<code>&lt;script&gt;alert()&lt;/script&gt;</code>,那么我们可以在浏览器上面看到输出如下所示：</p>
<p><img src="https://wizardforcel.gitbooks.io/build-web-application-with-golang/content/images/4.3.escape.png?raw=true" alt="img"></p>
<p>图4.3 Javascript过滤之后的输出</p>
<p>Go的html/template包默认帮你过滤了html标签，但是有时候你只想要输出这个<code>&lt;script&gt;alert()&lt;/script&gt;</code>看起来正常的信息，该怎么处理？请使用text/template。请看下面的例子：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">import &quot;text&#x2F;template&quot;
...
t, err :&#x3D; template.New(&quot;foo&quot;).Parse(&#96;&#123;&#123;define &quot;T&quot;&#125;&#125;Hello, &#123;&#123;.&#125;&#125;!&#123;&#123;end&#125;&#125;&#96;)
err &#x3D; t.ExecuteTemplate(out, &quot;T&quot;, &quot;&lt;script&gt;alert(&#39;you have been pwned&#39;)&lt;&#x2F;script&gt;&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">Hello, <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'you have been pwned'</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>或者使用template.HTML类型</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">import &quot;html&#x2F;template&quot;
...
t, err :&#x3D; template.New(&quot;foo&quot;).Parse(&#96;&#123;&#123;define &quot;T&quot;&#125;&#125;Hello, &#123;&#123;.&#125;&#125;!&#123;&#123;end&#125;&#125;&#96;)
err &#x3D; t.ExecuteTemplate(out, &quot;T&quot;, template.HTML(&quot;&lt;script&gt;alert(&#39;you have been pwned&#39;)&lt;&#x2F;script&gt;&quot;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">Hello, <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'you have been pwned'</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>转换成<code>template.HTML</code>后，变量的内容也不会被转义</p>
<h2 id="4-4-防止多次递交表单"><a href="#4-4-防止多次递交表单" class="headerlink" title="4.4 防止多次递交表单"></a>4.4 防止多次递交表单</h2><p>解决方案是在表单中添加一个带有唯一值的隐藏字段。在验证表单时，先检查带有该惟一值的表单是否已经递交过了。如果是，拒绝再次递交；如果不是，则处理表单进行逻辑处理。另外，如果是采用了Ajax模式递交表单的话，当表单递交后，通过javascript来禁用表单的递交按钮。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
密码:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>token<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;.&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>登陆<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>隐藏字段<code>token</code>，这个值我们通过MD5(时间戳)来获取惟一值，然后我们把这个值存储到服务器端(session来控制，</strong>我们将在第六章讲解如何保存)，以方便表单提交时比对判定。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func login(w http.ResponseWriter, r *http.Request) &#123;
    fmt.Println(&quot;method:&quot;, r.Method) &#x2F;&#x2F;获取请求的方法
    if r.Method &#x3D;&#x3D; &quot;GET&quot; &#123;
        crutime :&#x3D; time.Now().Unix()
        h :&#x3D; md5.New()
        io.WriteString(h, strconv.FormatInt(crutime, 10))
        token :&#x3D; fmt.Sprintf(&quot;%x&quot;, h.Sum(nil))

        t, _ :&#x3D; template.ParseFiles(&quot;login.gtpl&quot;)
        t.Execute(w, token)
    &#125; else &#123;
        &#x2F;&#x2F;请求的是登陆数据，那么执行登陆的逻辑判断
        r.ParseForm()
        token :&#x3D; r.Form.Get(&quot;token&quot;)
        if token !&#x3D; &quot;&quot; &#123;
            &#x2F;&#x2F;验证token的合法性
        &#125; else &#123;
            &#x2F;&#x2F;不存在token报错
        &#125;
        fmt.Println(&quot;username length:&quot;, len(r.Form[&quot;username&quot;][0]))
        fmt.Println(&quot;username:&quot;, template.HTMLEscapeString(r.Form.Get(&quot;username&quot;))) &#x2F;&#x2F;输出到服务器端
        fmt.Println(&quot;password:&quot;, template.HTMLEscapeString(r.Form.Get(&quot;password&quot;)))
        template.HTMLEscape(w, []byte(r.Form.Get(&quot;username&quot;))) &#x2F;&#x2F;输出到客户端
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的代码输出到页面的源码如下：</p>
<p><img src="https://wizardforcel.gitbooks.io/build-web-application-with-golang/content/images/4.4.token.png?raw=true" alt="img"></p>
<p>图4.4 增加token之后在客户端输出的源码信息</p>
<p>每次刷新这个token的value都会变化。这样就保证了每次显示Form表单的时候都是唯一的，用户递交的表单保持了唯一性</p>
<p>我们的解决方案可以防止非恶意的攻击，并能使恶意用户暂时不知所措，然后，它却不能排除所有的欺骗性的动机，对此类情况还需要更复杂的工作</p>
<h2 id="4-5-处理文件上传"><a href="#4-5-处理文件上传" class="headerlink" title="4.5 处理文件上传"></a>4.5 处理文件上传</h2><p>要使表单能够上传文件，首先第一步就是要添加form的<code>enctype</code>属性，<code>enctype</code>属性有如下三种情况:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">application&#x2F;x-www-form-urlencoded   表示在发送前编码所有字符（默认）
multipart&#x2F;form-data      不对字符编码。在使用包含文件上传控件的表单时，必须使用该值。
text&#x2F;plain      空格转换为 &quot;+&quot; 加号，但不对特殊字符编码。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>所以，表单的html代码应该类似于:</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>上传文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://127.0.0.1:9090/upload<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>uploadfile<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>token<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;&#123;.&#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upload<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在服务器端，我们增加一个handlerFunc:</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">http.HandleFunc(&quot;&#x2F;upload&quot;, upload)

&#x2F;&#x2F; 处理&#x2F;upload 逻辑
func upload(w http.ResponseWriter, r *http.Request) &#123;
    fmt.Println(&quot;method:&quot;, r.Method) &#x2F;&#x2F;获取请求的方法
    if r.Method &#x3D;&#x3D; &quot;GET&quot; &#123;
        crutime :&#x3D; time.Now().Unix()
        h :&#x3D; md5.New()
        io.WriteString(h, strconv.FormatInt(crutime, 10))
        token :&#x3D; fmt.Sprintf(&quot;%x&quot;, h.Sum(nil))

        t, _ :&#x3D; template.ParseFiles(&quot;upload.gtpl&quot;)
        t.Execute(w, token)
    &#125; else &#123;
        r.ParseMultipartForm(32 &lt;&lt; 20)
        file, handler, err :&#x3D; r.FormFile(&quot;uploadfile&quot;)
        if err !&#x3D; nil &#123;
            fmt.Println(err)
            return
        &#125;
        defer file.Close()
        fmt.Fprintf(w, &quot;%v&quot;, handler.Header)
        f, err :&#x3D; os.OpenFile(&quot;.&#x2F;test&#x2F;&quot;+handler.Filename, os.O_WRONLY|os.O_CREATE, 0666)
        if err !&#x3D; nil &#123;
            fmt.Println(err)
            return
        &#125;
        defer f.Close()
        io.Copy(f, file)
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过上面的代码可以看到，处理文件上传我们需要调用<code>r.ParseMultipartForm</code>，里面的参数表示<code>maxMemory</code>，调用<code>ParseMultipartForm</code>之后，上传的文件存储在<code>maxMemory</code>大小的内存里面，如果文件大小超过了<code>maxMemory</code>，那么剩下的部分将存储在系统的临时文件中。我们可以通过<code>r.FormFile</code>获取上面的文件句柄，然后实例中使用了<code>io.Copy</code>来存储文件。</p>
<blockquote>
<p>获取其他非文件字段信息的时候就不需要调用<code>r.ParseForm</code>，因为在需要的时候Go自动会去调用。而且<code>ParseMultipartForm</code>调用一次之后，后面再次调用不会再有效果。</p>
</blockquote>
<p>通过上面的实例我们可以看到我们上传文件主要三步处理：</p>
<ol>
<li>表单中增加enctype=”multipart/form-data”</li>
<li>服务端调用<code>r.ParseMultipartForm</code>,把上传的文件存储在内存和临时文件中</li>
<li>使用<code>r.FormFile</code>获取文件句柄，然后对文件进行存储等处理。</li>
</ol>
<p>文件handler是multipart.FileHeader,里面存储了如下结构信息</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type FileHeader struct &#123;
    Filename string
    Header   textproto.MIMEHeader
    &#x2F;&#x2F; contains filtered or unexported fields
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过上面的实例代码打印出来上传文件的信息如下</p>
<p><img src="https://wizardforcel.gitbooks.io/build-web-application-with-golang/content/images/4.5.upload2.png?raw=true" alt="img"></p>
<p>图4.5 打印文件上传后服务器端接受的信息</p>
<h3 id="客户端上传文件"><a href="#客户端上传文件" class="headerlink" title="客户端上传文件"></a>客户端上传文件</h3><p>我们上面的例子演示了如何通过表单上传文件，然后在服务器端处理文件，其实Go支持模拟客户端表单功能支持文件上传，详细用法请看如下示例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">package main

import (
    &quot;bytes&quot;
    &quot;fmt&quot;
    &quot;io&quot;
    &quot;io&#x2F;ioutil&quot;
    &quot;mime&#x2F;multipart&quot;
    &quot;net&#x2F;http&quot;
    &quot;os&quot;
)

func postFile(filename string, targetUrl string) error &#123;
    bodyBuf :&#x3D; &amp;bytes.Buffer&#123;&#125;
    bodyWriter :&#x3D; multipart.NewWriter(bodyBuf)

    &#x2F;&#x2F;关键的一步操作
    fileWriter, err :&#x3D; bodyWriter.CreateFormFile(&quot;uploadfile&quot;, filename)
    if err !&#x3D; nil &#123;
        fmt.Println(&quot;error writing to buffer&quot;)
        return err
    &#125;

    &#x2F;&#x2F;打开文件句柄操作
    fh, err :&#x3D; os.Open(filename)
    if err !&#x3D; nil &#123;
        fmt.Println(&quot;error opening file&quot;)
        return err
    &#125;
    defer fh.Close()

    &#x2F;&#x2F;iocopy
    _, err &#x3D; io.Copy(fileWriter, fh)
    if err !&#x3D; nil &#123;
        return err
    &#125;

    contentType :&#x3D; bodyWriter.FormDataContentType()
    bodyWriter.Close()

    resp, err :&#x3D; http.Post(targetUrl, contentType, bodyBuf)
    if err !&#x3D; nil &#123;
        return err
    &#125;
    defer resp.Body.Close()
    resp_body, err :&#x3D; ioutil.ReadAll(resp.Body)
    if err !&#x3D; nil &#123;
        return err
    &#125;
    fmt.Println(resp.Status)
    fmt.Println(string(resp_body))
    return nil
&#125;

&#x2F;&#x2F; sample usage
func main() &#123;
    target_url :&#x3D; &quot;http:&#x2F;&#x2F;localhost:9090&#x2F;upload&quot;
    filename :&#x3D; &quot;.&#x2F;astaxie.pdf&quot;
    postFile(filename, target_url)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的例子详细展示了客户端如何向服务器上传一个文件的例子，客户端通过multipart.Write把文件的文本流写入一个缓存中，然后调用http的Post方法把缓存传到服务器。</p>
<blockquote>
<p>如果你还有其他普通字段例如username之类的需要同时写入，那么可以调用multipart的WriteField方法写很多其他类似的字段。</p>
</blockquote>
<h1 id="5-访问数据库"><a href="#5-访问数据库" class="headerlink" title="5 访问数据库"></a>5 访问数据库</h1><p>Go没有内置的驱动支持任何的数据库，但是Go定义了database/sql接口，用户可以基于驱动接口开发相应数据库的驱动，5.1小节里面介绍Go设计的一些驱动，介绍Go是如何设计数据库驱动接口的。5.2至5.4小节介绍目前使用的比较多的一些关系型数据驱动以及如何使用，5.5小节介绍我自己开发一个ORM库，基于database/sql标准接口开发的，可以兼容几乎所有支持database/sql的数据库驱动，可以方便的使用Go style来进行数据库操作。</p>
<p>目前NOSQL已经成为Web开发的一个潮流，很多应用采用了NOSQL作为数据库，而不是以前的缓存，5.6小节将介绍MongoDB和Redis两种NOSQL数据库。</p>
<p><img src="https://wizardforcel.gitbooks.io/build-web-application-with-golang/content/images/navi5.png?raw=true" alt="img"></p>
<h2 id="5-1-database-sql接口"><a href="#5-1-database-sql接口" class="headerlink" title="5.1 database/sql接口"></a>5.1 database/sql接口</h2><p>开发者可以根据定义的接口来开发相应的数据库驱动，这样做有一个好处，只要是按照标准接口开发的代码， 以后需要迁移数据库时，不需要任何修改。</p>
<h3 id="SQL-Register"><a href="#SQL-Register" class="headerlink" title="SQL.Register"></a>SQL.Register</h3><p>这个存在于database/sql的函数是用来注册数据库驱动的，当第三方开发者开发数据库驱动时，都会实现init函数，在init里面会调用这个<code>Register(name string, driver driver.Driver)</code>完成本驱动的注册。</p>
<p>我们来看一下mymysql、sqlite3的驱动里面都是怎么调用的：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">&#x2F;&#x2F;https:&#x2F;&#x2F;github.com&#x2F;mattn&#x2F;go-sqlite3驱动
func init() &#123;
    sql.Register(&quot;sqlite3&quot;, &amp;SQLiteDriver&#123;&#125;)
&#125;

&#x2F;&#x2F;https:&#x2F;&#x2F;github.com&#x2F;mikespook&#x2F;mymysql驱动
&#x2F;&#x2F; Driver automatically registered in database&#x2F;sql
var d &#x3D; Driver&#123;proto: &quot;tcp&quot;, raddr: &quot;127.0.0.1:3306&quot;&#125;
func init() &#123;
    Register(&quot;SET NAMES utf8&quot;)
    sql.Register(&quot;mymysql&quot;, &amp;d)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们看到第三方数据库驱动都是通过调用这个函数来注册自己的数据库驱动名称以及相应的driver实现。在database/sql内部通过一个map来存储用户定义的相应驱动。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var drivers &#x3D; make(map[string]driver.Driver)

drivers[name] &#x3D; driver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>因此通过database/sql的注册函数可以同时注册多个数据库驱动，只要不重复。</p>
<blockquote>
<p>在我们使用database/sql接口和第三方库的时候经常看到如下:</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">import (
    &quot;database&#x2F;sql&quot;
     _ &quot;github.com&#x2F;mattn&#x2F;go-sqlite3&quot;
)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>新手都会被这个<code>_</code>所迷惑，其实这个就是Go设计的巧妙之处，我们在变量赋值的时候经常看到这个符号，它是用来忽略变量赋值的占位符，那么包引入用到这个符号也是相似的作用，这儿使用<code>_</code>的意思是引入后面的包名而不直接使用这个包中定义的函数，变量等资源。</p>
<p>包在引入的时候会自动调用包的init函数以完成对包的初始化。因此，我们引入上面的数据库驱动包之后会自动去调用init函数，然后在init函数里面注册这个数据库驱动，这样我们就可以在接下来的代码中直接使用这个数据库驱动了。</p>
</blockquote>
<h3 id="driver-Driver"><a href="#driver-Driver" class="headerlink" title="driver.Driver"></a>driver.Driver</h3><p>Driver是一个数据库驱动的接口，他定义了一个method： Open(name string)，这个方法返回一个数据库的Conn接口。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type Driver interface &#123;
    Open(name string) (Conn, error)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>返回的Conn只能用来进行一次goroutine的操作，也就是说不能把这个Conn应用于Go的多个goroutine里面。如下代码会出现错误</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">...
go goroutineA (Conn)  &#x2F;&#x2F;执行查询操作
go goroutineB (Conn)  &#x2F;&#x2F;执行插入操作
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面这样的代码可能会使Go不知道某个操作究竟是由哪个goroutine发起的,从而导致数据混乱，比如可能会把goroutineA里面执行的查询操作的结果返回给goroutineB从而使B错误地把此结果当成自己执行的插入数据。</p>
<p>第三方驱动都会定义这个函数，它会解析name参数来获取相关数据库的连接信息，解析完成后，它将使用此信息来初始化一个Conn并返回它。</p>
<h3 id="driver-Conn"><a href="#driver-Conn" class="headerlink" title="driver.Conn"></a>driver.Conn</h3><p>Conn是一个数据库连接的接口定义，他定义了一系列方法，这个Conn只能应用在一个goroutine里面，不能使用在多个goroutine里面，</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type Conn interface &#123;
    Prepare(query string) (Stmt, error)
    Close() error
    Begin() (Tx, error)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Prepare函数返回与当前连接相关的执行Sql语句的准备状态，可以进行查询、删除等操作。</p>
<p>Close函数关闭当前的连接，执行释放连接拥有的资源等清理工作。因为驱动实现了database/sql里面建议的conn pool，所以你不用再去实现缓存conn之类的，这样会容易引起问题。</p>
<p>Begin函数返回一个代表事务处理的Tx，通过它你可以进行查询,更新等操作，或者对事务进行回滚、递交。</p>
<h3 id="driver-Stmt"><a href="#driver-Stmt" class="headerlink" title="driver.Stmt"></a>driver.Stmt</h3><p>Stmt是一种准备好的状态，和Conn相关联，而且只能应用于一个goroutine中，不能应用于多个goroutine。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type Stmt interface &#123;
    Close() error
    NumInput() int
    Exec(args []Value) (Result, error)
    Query(args []Value) (Rows, error)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Close函数关闭当前的链接状态，但是如果当前正在执行query，query还是有效返回rows数据。</p>
<p>NumInput函数返回当前预留参数的个数，当返回&gt;=0时数据库驱动就会智能检查调用者的参数。当数据库驱动包不知道预留参数的时候，返回-1。</p>
<p>Exec函数执行Prepare准备好的sql，传入参数执行update/insert等操作，返回Result数据</p>
<p>Query函数执行Prepare准备好的sql，传入需要的参数执行select操作，返回Rows结果集</p>
<h3 id="Driver-Tx"><a href="#Driver-Tx" class="headerlink" title="Driver.Tx"></a>Driver.Tx</h3><p>事务处理一般就两个过程，递交或者回滚。数据库驱动里面也只需要实现这两个函数就可以</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type Tx interface &#123;
    Commit() error
    Rollback() error
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>这两个函数一个用来递交一个事务，一个用来回滚事务。</p>
<h3 id="driver-Execer"><a href="#driver-Execer" class="headerlink" title="driver.Execer"></a>driver.Execer</h3><p>这是一个Conn可选择实现的接口</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type Execer interface &#123;
    Exec(query string, args []Value) (Result, error)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>如果这个接口没有定义，那么在调用DB.Exec,就会首先调用Prepare返回Stmt，然后执行Stmt的Exec，然后关闭Stmt。</p>
<h3 id="driver-Result"><a href="#driver-Result" class="headerlink" title="driver.Result"></a>driver.Result</h3><p>这个是执行Update/Insert等操作返回的结果接口定义</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type Result interface &#123;
    LastInsertId() (int64, error)
    RowsAffected() (int64, error)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>LastInsertId函数返回由数据库执行插入操作得到的自增ID号。</p>
<p>RowsAffected函数返回query操作影响的数据条目数。</p>
<h3 id="driver-Rows"><a href="#driver-Rows" class="headerlink" title="driver.Rows"></a>driver.Rows</h3><p>Rows是执行查询返回的结果集接口定义</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type Rows interface &#123;
    Columns() []string
    Close() error
    Next(dest []Value) error
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Columns函数返回查询数据库表的字段信息，这个返回的slice和sql查询的字段一一对应，而不是返回整个表的所有字段。</p>
<p>Close函数用来关闭Rows迭代器。</p>
<p>Next函数用来返回下一条数据，把数据赋值给dest。dest里面的元素必须是driver.Value的值除了string，返回的数据里面所有的string都必须要转换成[]byte。如果最后没数据了，Next函数最后返回io.EOF。</p>
<p>……..</p>
<h2 id="5-2-使用MySQL数据库"><a href="#5-2-使用MySQL数据库" class="headerlink" title="5.2 使用MySQL数据库"></a>5.2 使用MySQL数据库</h2><p>目前Internet上流行的网站构架方式是LAMP，其中的M即MySQL,</p>
<h3 id="MySQL驱动"><a href="#MySQL驱动" class="headerlink" title="MySQL驱动"></a>MySQL驱动</h3><p>通过上面的代码我们可以看出，Go操作Mysql数据库是很方便的。</p>
<p>关键的几个函数我解释一下：</p>
<p>sql.Open()函数用来打开一个注册过的数据库驱动，go-sql-driver中注册了mysql这个数据库驱动，第二个参数是DSN(Data Source Name)，它是go-sql-driver定义的一些数据库链接和配置信息。它支持如下格式：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[email protected](&#x2F;path&#x2F;to&#x2F;socket)&#x2F;dbname?charset&#x3D;utf8
user:[email protected](localhost:5555)&#x2F;dbname?charset&#x3D;utf8
user:[email protected]&#x2F;dbname
user:[email protected]([de:ad:be:ef::ca:fe]:80)&#x2F;dbname<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>db.Prepare()函数用来返回准备要执行的sql操作，然后返回准备完毕的执行状态。</p>
<p>db.Query()函数用来直接执行Sql返回Rows结果。</p>
<p>stmt.Exec()函数用来执行stmt准备好的SQL语句</p>
<p>我们可以看到我们传入的参数都是=?对应的数据，这样做的方式可以一定程度上防止SQL注入。</p>
<h2 id="5-3-使用SQLite数据库"><a href="#5-3-使用SQLite数据库" class="headerlink" title="5.3 使用SQLite数据库"></a>5.3 使用SQLite数据库</h2><p>SQLite 是一个开源的嵌入式关系数据库，实现自包容、零配置、支持事务的SQL数据库引擎。其特点是高度便携、使用方便、结构紧凑、高效、可靠。 与其他数据库管理系统不同，SQLite 的安装和运行非常简单，在大多数情况下,只要确保SQLite的二进制文件存在即可开始创建、连接和使用数据库。如果您正在寻找一个嵌入式数据库项目或解决方案，SQLite是绝对值得考虑。SQLite可以是说开源的Access</p>
<h2 id="5-4-使用PostgreSQL数据库"><a href="#5-4-使用PostgreSQL数据库" class="headerlink" title="5.4 使用PostgreSQL数据库"></a>5.4 使用PostgreSQL数据库</h2><p>PostgreSQL 是一个自由的对象-关系数据库服务器(数据库管理系统)，它在灵活的 BSD-风格许可证下发行。它提供了相对其他开放源代码数据库系统(比如 MySQL 和 Firebird)，和对专有系统比如 Oracle、Sybase、IBM 的 DB2 和 Microsoft SQL Server的一种选择。</p>
<p>PostgreSQL和MySQL比较，它更加庞大一点，因为它是用来替代Oracle而设计的。所以在企业应用中采用PostgreSQL是一个明智的选择。</p>
<p>MySQL被Oracle收购之后正在逐步的封闭（自MySQL 5.5.31以后的所有版本将不再遵循GPL协议），鉴于此，将来我们也许会选择PostgreSQL而不是MySQL作为项目的后端数据库。</p>
<h2 id="5-5-使用beedb库进行ORM开发"><a href="#5-5-使用beedb库进行ORM开发" class="headerlink" title="5.5 使用beedb库进行ORM开发"></a>5.5 使用beedb库进行ORM开发</h2><p>beedb是我开发的一个Go进行ORM操作的库，它采用了Go style方式对数据库进行操作，实现了struct到数据表记录的映射。beedb是一个十分轻量级的Go ORM框架，开发这个库的本意降低复杂的ORM学习曲线，尽可能在ORM的运行效率和功能之间寻求一个平衡，beedb是目前开源的Go ORM框架中实现比较完整的一个库，而且运行效率相当不错，功能也基本能满足需求。但是目前还不支持关系关联，这个是接下来版本升级的重点。</p>
<h2 id="5-6-NOSQL数据库操作"><a href="#5-6-NOSQL数据库操作" class="headerlink" title="5.6 NOSQL数据库操作"></a>5.6 NOSQL数据库操作</h2><p>NoSQL(Not Only SQL)，指的是非关系型的数据库。随着Web2.0的兴起，传统的关系数据库在应付Web2.0网站，特别是超大规模和高并发的SNS类型的Web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。</p>
<p>而Go语言作为21世纪的C语言，对NOSQL的支持也是很好，目前流行的NOSQL主要有redis、mongoDB、Cassandra和Membase等。这些数据库都有高性能、高并发读写等特点，目前已经广泛应用于各种应用中。我接下来主要讲解一下redis和mongoDB的操作。</p>
<h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><p>redis是一个key-value存储系统。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)和zset(有序集合)。</p>
<p>目前应用redis最广泛的应该是新浪微博平台，其次还有Facebook收购的图片社交网站instagram。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">package main

import (
    &quot;github.com&#x2F;astaxie&#x2F;goredis&quot;
    &quot;fmt&quot;
)

func main() &#123;
    var client goredis.Client
    &#x2F;&#x2F; 设置端口为redis默认端口
    client.Addr &#x3D; &quot;127.0.0.1:6379&quot;

    &#x2F;&#x2F;字符串操作
    client.Set(&quot;a&quot;, []byte(&quot;hello&quot;))
    val, _ :&#x3D; client.Get(&quot;a&quot;)
    fmt.Println(string(val))
    client.Del(&quot;a&quot;)

    &#x2F;&#x2F;list操作
    vals :&#x3D; []string&#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;&#125;
    for _, v :&#x3D; range vals &#123;
        client.Rpush(&quot;l&quot;, []byte(v))
    &#125;
    dbvals,_ :&#x3D; client.Lrange(&quot;l&quot;, 0, 4)
    for i, v :&#x3D; range dbvals &#123;
        println(i,&quot;:&quot;,string(v))
    &#125;
    client.Del(&quot;l&quot;)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们可以看到操作redis非常的方便，而且我实际项目中应用下来性能也很高。client的命令和redis的命令基本保持一致。所以和原生态操作redis非常类似。</p>
<h3 id="mongoDB"><a href="#mongoDB" class="headerlink" title="mongoDB"></a>mongoDB</h3><p>MongoDB是一个高性能，开源，无模式的文档型数据库，是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。他支持的数据结构非常松散，采用的是类似json的bjson格式来存储数据，因此可以存储比较复杂的数据类型。Mongo最大的特点是他支持的查询语言非常强大，其语法有点类似于面向对象的查询语言，几乎可以实现类似关系数据库单表查询的绝大部分功能，而且还支持对数据建立索引。</p>
<p>下图展示了mysql和mongoDB之间的对应关系，我们可以看出来非常的方便，但是mongoDB的性能非常好。</p>
<p> <img src="https://wizardforcel.gitbooks.io/build-web-application-with-golang/content/images/5.6.mongodb.png?raw=true" alt="img"></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">package main

import (
    &quot;fmt&quot;
    &quot;labix.org&#x2F;v2&#x2F;mgo&quot;
    &quot;labix.org&#x2F;v2&#x2F;mgo&#x2F;bson&quot;
)

type Person struct &#123;
    Name string
    Phone string
&#125;

func main() &#123;
    session, err :&#x3D; mgo.Dial(&quot;server1.example.com,server2.example.com&quot;)
    if err !&#x3D; nil &#123;
        panic(err)
    &#125;
    defer session.Close()

    session.SetMode(mgo.Monotonic, true)

    c :&#x3D; session.DB(&quot;test&quot;).C(&quot;people&quot;)
    err &#x3D; c.Insert(&amp;Person&#123;&quot;Ale&quot;, &quot;+55 53 8116 9639&quot;&#125;,
        &amp;Person&#123;&quot;Cla&quot;, &quot;+55 53 8402 8510&quot;&#125;)
    if err !&#x3D; nil &#123;
        panic(err)
    &#125;

    result :&#x3D; Person&#123;&#125;
    err &#x3D; c.Find(bson.M&#123;&quot;name&quot;: &quot;Ale&quot;&#125;).One(&amp;result)
    if err !&#x3D; nil &#123;
        panic(err)
    &#125;

    fmt.Println(&quot;Phone:&quot;, result.Phone)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们可以看出来mgo的操作方式和beedb的操作方式几乎类似，都是基于struct的操作方式，这个就是Go Style。</p>
<h1 id="6-session和数据存储"><a href="#6-session和数据存储" class="headerlink" title="6 session和数据存储"></a>6 session和数据存储</h1><p>Web开发中一个很重要的议题就是如何做好用户的整个浏览过程的控制，因为HTTP协议是无状态的，所以用户的每一次请求都是无状态的，我们不知道在整个Web操作过程中哪些连接与该用户有关，我们应该如何来解决这个问题呢？Web里面经典的解决方案是cookie和session，cookie机制是一种客户端机制，把用户数据保存在客户端，而session机制是一种服务器端的机制，服务器使用一种类似于散列表的结构来保存信息，每一个网站访客都会被分配给一个唯一的标志符,即sessionID,它的存放形式无非两种:要么经过url传递,要么保存在客户端的cookies里.当然,你也可以将Session保存到数据库里,这样会更安全,但效率方面会有所下降。</p>
<p>6.1小节里面讲介绍session机制和cookie机制的关系和区别，6.2讲解Go语言如何来实现session，里面讲实现一个简易的session管理器，6.3小节讲解如何防止session被劫持的情况，如何有效的保护session。我们知道session其实可以存储在任何地方，6.3小节里面实现的session是存储在内存中的，但是如果我们的应用进一步扩展了，要实现应用的session共享，那么我们可以把session存储在数据库中(memcache或者redis)，6.4小节将详细的讲解如何实现这些功能。</p>
<h2 id="6-1-Session-amp-amp-Cookie"><a href="#6-1-Session-amp-amp-Cookie" class="headerlink" title="6.1 Session&amp;&amp;Cookie"></a>6.1 Session&amp;&amp;Cookie</h2><p>当用户来到微博登陆页面，输入用户名和密码之后点击“登录”后浏览器将认证信息POST给远端的服务器，服务器执行验证逻辑，如果验证通过，则浏览器会跳转到登录用户的微博首页，在登录成功后，服务器如何验证我们对其他受限制页面的访问呢？因为HTTP协议是无状态的，所以很显然服务器不可能知道我们已经在上一次的HTTP请求中通过了验证。当然，最简单的解决方案就是所有的请求里面都带上用户名和密码，这样虽然可行，但大大加重了服务器的负担（对于每个request都需要到数据库验证），也大大降低了用户体验(每个页面都需要重新输入用户名密码，每个页面都带有登录表单)。既然直接在请求中带上用户名与密码不可行，那么就只有在服务器或客户端保存一些类似的可以代表身份的信息了，所以就有了cookie与session。</p>
<p>cookie，简而言之就是在本地计算机保存一些用户操作的历史信息（当然包括登录信息），并在用户再次访问该站点时浏览器通过HTTP协议将本地cookie内容发送给服务器，从而完成验证，或继续上一步操作。</p>
<p><img src="https://wizardforcel.gitbooks.io/build-web-application-with-golang/content/images/6.1.cookie2.png?raw=true" alt="img"></p>
<p>session，简而言之就是在服务器上保存用户操作的历史信息。服务器使用session id来标识session，session id由服务器负责产生，保证随机性与唯一性，相当于一个随机密钥，避免在握手或传输中暴露用户真实密码。但该方式下，仍然需要将发送请求的客户端与session进行对应，所以可以借助cookie机制来获取客户端的标识（即session id），也可以通过GET方式将id提交给服务器。</p>
<p><img src="https://wizardforcel.gitbooks.io/build-web-application-with-golang/content/images/6.1.session.png?raw=true" alt="img"></p>
<h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>Cookie是由浏览器维持的，存储在客户端的一小段文本信息，伴随着用户请求和页面在Web服务器和浏览器之间传递。用户每次访问站点时，Web应用程序都可以读取cookie包含的信息。浏览器设置里面有cookie隐私数据选项，打开它，可以看到很多已访问网站的cookies，</p>
<p>cookie是有时间限制的，根据生命期不同分成两种：会话cookie和持久cookie；</p>
<p>如果不设置过期时间，则表示这个cookie生命周期为从创建到浏览器关闭止，只要关闭浏览器窗口，cookie就消失了。这种生命期为浏览会话期的cookie被称为会话cookie。会话cookie一般不保存在硬盘上而是保存在内存里。</p>
<p>如果设置了过期时间(setMaxAge(60<em>60</em>24))，浏览器就会把cookie保存到硬盘上，关闭后再次打开浏览器，这些cookie依然有效直到超过设定的过期时间。存储在硬盘上的cookie可以在不同的浏览器进程间共享，比如两个IE窗口。而对于保存在内存的cookie，不同的浏览器有不同的处理方式</p>
<p>Go语言中通过net/http包中的SetCookie来设置：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">http.SetCookie(w ResponseWriter, cookie *Cookie)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>w表示需要写入的response，cookie是一个struct，让我们来看一下cookie对象是怎么样的</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type Cookie struct &#123;
    Name       string
    Value      string
    Path       string
    Domain     string
    Expires    time.Time
    RawExpires string

&#x2F;&#x2F; MaxAge&#x3D;0 means no &#39;Max-Age&#39; attribute specified.
&#x2F;&#x2F; MaxAge&lt;0 means delete cookie now, equivalently &#39;Max-Age: 0&#39;
&#x2F;&#x2F; MaxAge&gt;0 means Max-Age attribute present and given in seconds
    MaxAge   int
    Secure   bool
    HttpOnly bool
    Raw      string
    Unparsed []string &#x2F;&#x2F; Raw text of unparsed attribute-value pairs
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们来看一个例子，如何设置cookie</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">expiration :&#x3D; time.Now()
expiration &#x3D; expiration.AddDate(1, 0, 0)
cookie :&#x3D; http.Cookie&#123;Name: &quot;username&quot;, Value: &quot;astaxie&quot;, Expires: expiration&#125;
http.SetCookie(w, &amp;cookie)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>　　</p>
<h4 id="Go读取cookie"><a href="#Go读取cookie" class="headerlink" title="Go读取cookie"></a>Go读取cookie</h4><p>上面的例子演示了如何设置cookie数据，我们这里来演示一下如何读取cookie</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">cookie, _ :&#x3D; r.Cookie(&quot;username&quot;)
fmt.Fprint(w, cookie)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>还有另外一种读取方式 </p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">for _, cookie :&#x3D; range r.Cookies() &#123;
    fmt.Fprint(w, cookie.Name)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>可以看到通过request获取cookie非常方便。</p>
<h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><p>当session一词与网络协议相关联时，它又往往隐含了“面向连接”和/或“保持状态”这样两个含义。</p>
<p>session在Web开发环境下的语义又有了新的扩展，它的含义是指一类用来在客户端与服务器端之间保持状态的解决方案。有时候Session也用来指这种解决方案的存储结构。</p>
<p>session机制是一种服务器端的机制，服务器使用一种类似于散列表的结构(也可能就是使用散列表)来保存信息。</p>
<p>但程序需要为某个客户端的请求创建一个session的时候，服务器首先检查这个客户端的请求里是否包含了一个session标识－称为session id，如果已经包含一个session id则说明以前已经为此客户创建过session，服务器就按照session id把这个session检索出来使用(如果检索不到，可能会新建一个，这种情况可能出现在服务端已经删除了该用户对应的session对象，但用户人为地在请求的URL后面附加上一个JSESSION的参数)。如果客户请求不包含session id，则为此客户创建一个session并且同时生成一个与此session相关联的session id，这个session id将在本次响应中返回给客户端保存。</p>
<p>session机制本身并不复杂，然而其实现和配置上的灵活性却使得具体情况复杂多变。这也要求我们不能把仅仅某一次的经验或者某一个浏览器，服务器的经验当作普遍适用的</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>session和cookie的目的相同，都是为了克服http协议无状态的缺陷，但完成的方法不同。session通过cookie，在客户端保存session id，而将用户的其他会话消息保存在服务端的session对象中，与此相对的，cookie需要将所有信息都保存在客户端。因此cookie存在着一定的安全隐患，例如本地cookie中保存的用户名密码被破译，或cookie被其他网站收集（例如：1. appA主动设置域B cookie，让域B cookie获取；2. XSS，在appA上通过javascript获取document.cookie，并传递给自己的appB）。</p>
<h2 id="6-2-Go语言如何使用Session"><a href="#6-2-Go语言如何使用Session" class="headerlink" title="6.2 Go语言如何使用Session"></a>6.2 Go语言如何使用Session</h2><p>目前Go标准包没有为session提供任何支持，这小节我们将会自己动手来实现go版本的session管理和创建。</p>
<h3 id="Session创建过程"><a href="#Session创建过程" class="headerlink" title="Session创建过程"></a>Session创建过程</h3><p>ession的基本原理是由服务器为每个会话维护一份信息数据，客户端和服务端依靠一个全局唯一的标识来访问这份数据，以达到交互的目的。当用户访问Web应用时，服务端程序会随需要创建session，这个过程可以概括为三个步骤：</p>
<ul>
<li>生成全局唯一标识符（sessionid）；</li>
<li>开辟数据存储空间。一般会在内存中创建相应的数据结构，但这种情况下，系统一旦掉电，所有的会话数据就会丢失，如果是电子商务类网站，这将造成严重的后果。所以为了解决这类问题，你可以将会话数据写到文件里或存储在数据库中，当然这样会增加I/O开销，但是它可以实现某种程度的session持久化，也更有利于session的共享；</li>
<li>将session的全局唯一标示符发送给客户端。</li>
</ul>
<p>以上三个步骤中，最关键的是如何发送这个session的唯一标识这一步上。考虑到HTTP协议的定义，数据无非可以放到请求行、头域或Body里，所以一般来说会有两种常用的方式：cookie和URL重写。</p>
<ol>
<li>Cookie 服务端通过设置Set-cookie头就可以将session的标识符传送到客户端，而客户端此后的每一次请求都会带上这个标识符，另外一般包含session信息的cookie会将失效时间设置为0(会话cookie)，即浏览器进程有效时间。至于浏览器怎么处理这个0，每个浏览器都有自己的方案，但差别都不会太大(一般体现在新建浏览器窗口的时候)；</li>
<li>URL重写 所谓URL重写，就是在返回给用户的页面里的所有的URL后面追加session标识符，这样用户在收到响应之后，无论点击响应页面里的哪个链接或提交表单，都会自动带上session标识符，从而就实现了会话的保持。虽然这种做法比较麻烦，但是，如果客户端禁用了cookie的话，此种方案将会是首选。</li>
</ol>
<h3 id="Go实现session管理"><a href="#Go实现session管理" class="headerlink" title="Go实现session管理"></a>Go实现session管理</h3><p>下面我们将结合session的生命周期（lifecycle），来实现go语言版本的session管理。</p>
<h4 id="Session管理设计"><a href="#Session管理设计" class="headerlink" title="Session管理设计"></a>Session管理设计</h4><p>session管理涉及到如下几个因素</p>
<ul>
<li>全局session管理器</li>
<li>保证sessionid 的全局唯一性</li>
<li>为每个客户关联一个session</li>
<li>session 的存储(可以存储到内存、文件、数据库等)</li>
<li>session 过期处理</li>
</ul>
<p>有过Web开发经验的读者知道，对Session的处理基本就 设置值、读取值、删除值以及获取当前sessionID这四个操作，所以我们的Session接口也就实现这四个操作。</p>
<p><strong>这里有些代码跑不了（推测是修改了goroutine的部分），这本书是14年的用的go1.4，我在22年使用的是Go1.18，因此我决定从这里开始这本书就略读了，以后再用别的方式学习go web吧，有时候看书确实不如看视频合适，交互反馈太少了。其实这个属于我自己的判断错误，应该早点发现的！</strong></p>
<h2 id="6-4-预防session劫持"><a href="#6-4-预防session劫持" class="headerlink" title="6.4 预防session劫持"></a>6.4 预防session劫持</h2><p>session劫持是一种广泛存在的比较严重的安全威胁，在session技术中，客户端和服务端通过session的标识符来维护会话， 但这个标识符很容易就能被嗅探到，从而被其他人利用.它是中间人攻击的一种类型。</p>
<p>本节将通过一个实例来演示会话劫持，希望通过这个实例，能让读者更好地理解session的本质。</p>
<h3 id="session劫持过程"><a href="#session劫持过程" class="headerlink" title="session劫持过程"></a>session劫持过程</h3><p>我们写了如下的代码来展示一个count计数器：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func count(w http.ResponseWriter, r *http.Request) &#123;
    sess :&#x3D; globalSessions.SessionStart(w, r)
    ct :&#x3D; sess.Get(&quot;countnum&quot;)
    if ct &#x3D;&#x3D; nil &#123;
        sess.Set(&quot;countnum&quot;, 1)
    &#125; else &#123;
        sess.Set(&quot;countnum&quot;, (ct.(int) + 1))
    &#125;
    t, _ :&#x3D; template.ParseFiles(&quot;count.gtpl&quot;)
    w.Header().Set(&quot;Content-Type&quot;, &quot;text&#x2F;html&quot;)
    t.Execute(w, sess.Get(&quot;countnum&quot;))
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>count.gtpl的代码如下所示：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">Hi. Now count:&#123;&#123;.&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>然后我们在浏览器里面刷新可以看到如下内容：</p>
<p><img src="https://wizardforcel.gitbooks.io/build-web-application-with-golang/content/images/6.4.hijack.png?raw=true" alt="img"></p>
<p>图6.4 浏览器端显示count数</p>
<p>随着刷新，数字将不断增长，当数字显示为6的时候，打开浏览器(以chrome为例）的cookie管理器，可以看到类似如下的信息：</p>
<p><img src="https://wizardforcel.gitbooks.io/build-web-application-with-golang/content/images/6.4.cookie.png?raw=true" alt="img"></p>
<p>图6.5 获取浏览器端保存的cookie</p>
<p>下面这个步骤最为关键: 打开另一个浏览器(这里我打开了firefox浏览器),复制chrome地址栏里的地址到新打开的浏览器的地址栏中。然后打开firefox的cookie模拟插件，新建一个cookie，把按上图中cookie内容原样在firefox中重建一份:</p>
<p><img src="https://wizardforcel.gitbooks.io/build-web-application-with-golang/content/images/6.4.setcookie.png?raw=true" alt="img"></p>
<p>图6.6 模拟cookie</p>
<p>回车后，你将看到如下内容：</p>
<p><img src="https://wizardforcel.gitbooks.io/build-web-application-with-golang/content/images/6.4.hijacksuccess.png?raw=true" alt="img"></p>
<p>图6.7 劫持session成功</p>
<p>可以看到虽然换了浏览器，但是我们却获得了sessionID，然后模拟了cookie存储的过程。这个例子是在同一台计算机上做的，不过即使换用两台来做，其结果仍然一样。此时如果交替点击两个浏览器里的链接你会发现它们其实操纵的是同一个计数器。不必惊讶，此处firefox盗用了chrome和goserver之间的维持会话的钥匙，即gosessionid，这是一种类型的“会话劫持”。在goserver看来，它从http请求中得到了一个gosessionid，由于HTTP协议的无状态性，它无法得知这个gosessionid是从chrome那里“劫持”来的，它依然会去查找对应的session，并执行相关计算。与此同时 chrome也无法得知自己保持的会话已经被“劫持”</p>
<h1 id="7"><a href="#7" class="headerlink" title="7"></a>7</h1><h2 id="7-4-模板处理"><a href="#7-4-模板处理" class="headerlink" title="7.4 模板处理"></a>7.4 模板处理</h2><p>在Go语言中，我们使用<code>template</code>包来进行模板处理，使用类似<code>Parse</code>、<code>ParseFile</code>、<code>Execute</code>等方法从文件或者字符串加载模板，然后执行类似上面图片展示的模板的merge操作。请看下面的例子：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func handler(w http.ResponseWriter, r *http.Request) &#123;
    t :&#x3D; template.New(&quot;some template&quot;) &#x2F;&#x2F;创建一个模板
    t, _ &#x3D; t.ParseFiles(&quot;tmpl&#x2F;welcome.html&quot;, nil)  &#x2F;&#x2F;解析模板文件
    user :&#x3D; GetUser() &#x2F;&#x2F;获取当前用户信息
    t.Execute(w, user)  &#x2F;&#x2F;执行模板的merger操作
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过上面的例子我们可以看到Go语言的模板操作非常的简单方便，和其他语言的模板处理类似，都是先获取数据，然后渲染数据。</p>
<p>为了演示和测试代码的方便，我们在接下来的例子中采用如下格式的代码</p>
<ul>
<li>使用Parse代替ParseFiles，因为Parse可以直接测试一个字符串，而不需要额外的文件</li>
<li>不使用handler来写演示代码，而是每个测试一个main，方便测试</li>
<li>使用<code>os.Stdout</code>代替<code>http.ResponseWriter</code>，因为<code>os.Stdout</code>实现了<code>io.Writer</code>接口</li>
</ul>
<h3 id="字段操作"><a href="#字段操作" class="headerlink" title="字段操作"></a>字段操作</h3><p>Go语言的模板通过<code>&#123;&#123;&#125;&#125;</code>来包含需要在渲染时被替换的字段，<code>&#123;&#123;.&#125;&#125;</code>表示当前的对象，这和Java或者C++中的this类似，如果要访问当前对象的字段通过<code>&#123;&#123;.FieldName&#125;&#125;</code>,但是需要注意一点：这个字段必须是导出的(字段首字母必须是大写的),否则在渲染的时候就会报错</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">package main

import (
    &quot;html&#x2F;template&quot;
    &quot;os&quot;
)

type Person struct &#123;
    UserName string
&#125;

func main() &#123;
    t :&#x3D; template.New(&quot;fieldname example&quot;)
    t, _ &#x3D; t.Parse(&quot;hello &#123;&#123;.UserName&#125;&#125;!&quot;)
    p :&#x3D; Person&#123;UserName: &quot;Astaxie&quot;&#125;
    t.Execute(os.Stdout, p)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="输出嵌套字段内容"><a href="#输出嵌套字段内容" class="headerlink" title="输出嵌套字段内容"></a>输出嵌套字段内容</h3><p>上面我们例子展示了如何针对一个对象的字段输出，那么如果字段里面还有对象，如何来循环的输出这些内容呢？我们可以使用<code>&#123;&#123;with …&#125;&#125;…&#123;&#123;end&#125;&#125;</code>和<code>&#123;&#123;range …&#125;&#125;&#123;&#123;end&#125;&#125;</code>来进行数据的输出。</p>
<ul>
<li>function range(start, stop, step) {
      if (typeof stop === 'undefined') {
        stop = start;
        start = 0;
        step = 1;
      } else if (!step) {
        step = 1;
      }
      var arr = [];
      if (step > 0) {
        for (var i = start; i < stop; i += step) {
          arr.push(i);
        }
      } else {
        for (var _i = start; _i > stop; _i += step) {
          // eslint-disable-line for-direction
          arr.push(_i);
        }
      }
      return arr;
    } 这个和Go语法里面的range类似，循环操作数据</li>
<li>操作是指当前对象的值，类似上下文的概念</li>
</ul>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">package main

import (
    &quot;html&#x2F;template&quot;
    &quot;os&quot;
)

type Friend struct &#123;
    Fname string
&#125;

type Person struct &#123;
    UserName string
    Emails   []string
    Friends  []*Friend
&#125;

func main() &#123;
    f1 :&#x3D; Friend&#123;Fname: &quot;minux.ma&quot;&#125;
    f2 :&#x3D; Friend&#123;Fname: &quot;xushiwei&quot;&#125;
    t :&#x3D; template.New(&quot;fieldname example&quot;)
    t, _ &#x3D; t.Parse(&#96;hello &#123;&#123;.UserName&#125;&#125;!
            &#123;&#123;range .Emails&#125;&#125;
                an email &#123;&#123;.&#125;&#125;
            &#123;&#123;end&#125;&#125;
            &#123;&#123;with .Friends&#125;&#125;
            &#123;&#123;range .&#125;&#125;
                my friend name is &#123;&#123;.Fname&#125;&#125;
            &#123;&#123;end&#125;&#125;
            &#123;&#123;end&#125;&#125;
            &#96;)
    p :&#x3D; Person&#123;UserName: &quot;Astaxie&quot;,
        Emails:  []string&#123;&quot;astaxie@beego.me&quot;, &quot;astaxie@gmail.com&quot;&#125;,
        Friends: []*Friend&#123;&amp;f1, &amp;f2&#125;&#125;
    t.Execute(os.Stdout, p)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="条件处理"><a href="#条件处理" class="headerlink" title="条件处理"></a>条件处理</h3><p>在Go模板里面如果需要进行条件判断，那么我们可以使用和Go语言的<code>if-else</code>语法类似的方式来处理，如果pipeline为空，那么if就认为是false，下面的例子展示了如何使用<code>if-else</code>语法：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">package main

import (
    &quot;os&quot;
    &quot;text&#x2F;template&quot;
)

func main() &#123;
    tEmpty :&#x3D; template.New(&quot;template test&quot;)
    tEmpty &#x3D; template.Must(tEmpty.Parse(&quot;空 pipeline if demo: &#123;&#123;if &#96;&#96;&#125;&#125; 不会输出. &#123;&#123;end&#125;&#125;\n&quot;))
    tEmpty.Execute(os.Stdout, nil)

    tWithValue :&#x3D; template.New(&quot;template test&quot;)
    tWithValue &#x3D; template.Must(tWithValue.Parse(&quot;不为空的 pipeline if demo: &#123;&#123;if &#96;anything&#96;&#125;&#125; 我有内容，我会输出. &#123;&#123;end&#125;&#125;\n&quot;))
    tWithValue.Execute(os.Stdout, nil)

    tIfElse :&#x3D; template.New(&quot;template test&quot;)
    tIfElse &#x3D; template.Must(tIfElse.Parse(&quot;if-else demo: &#123;&#123;if &#96;anything&#96;&#125;&#125; if部分 &#123;&#123;else&#125;&#125; else部分.&#123;&#123;end&#125;&#125;\n&quot;))
    tIfElse.Execute(os.Stdout, nil)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过上面的演示代码我们知道<code>if-else</code>语法相当的简单，在使用过程中很容易集成到我们的模板代码中。</p>
<blockquote>
<p>注意：if里面无法使用条件判断，例如.Mail==”astaxie@gmail.com”，这样的判断是不正确的，if里面只能是bool值</p>
</blockquote>
<h3 id="pipelines"><a href="#pipelines" class="headerlink" title="pipelines"></a>pipelines</h3><p>Unix用户已经很熟悉什么是<code>pipe</code>了，<code>ls | grep &quot;beego&quot;</code>类似这样的语法你是不是经常使用，过滤当前目录下面的文件，显示含有”beego”的数据，表达的意思就是前面的输出可以当做后面的输入，最后显示我们想要的数据，而Go语言模板最强大的一点就是支持pipe数据，在Go语言里面任何<code>&#123;&#123;&#125;&#125;</code>里面的都是pipelines数据，例如我们上面输出的email里面如果还有一些可能引起XSS注入的，那么我们如何来进行转化呢？</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&#123;&#123;. | html&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在email输出的地方我们可以采用如上方式可以把输出全部转化html的实体，上面的这种方式和我们平常写Unix的方式是不是一模一样，操作起来相当的简便，调用其他的函数也是类似的方式。</p>
<h3 id="模板函数"><a href="#模板函数" class="headerlink" title="模板函数"></a>模板函数</h3><p>模板在输出对象的字段值时，采用了<code>fmt</code>包把对象转化成了字符串。但是有时候我们的需求可能不是这样的，例如有时候我们为了防止垃圾邮件发送者通过采集网页的方式来发送给我们的邮箱信息，我们希望把<code>@</code>替换成<code>at</code>例如：<code>astaxie at beego.me</code>，如果要实现这样的功能，我们就需要自定义函数来做这个功能。</p>
<p>每一个模板函数都有一个唯一值的名字，然后与一个Go函数关联，通过如下的方式来关联</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type FuncMap map[string]interface&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>例如，如果我们想要的email函数的模板函数名是<code>emailDeal</code>，它关联的Go函数名称是<code>EmailDealWith</code>,那么我们可以通过下面的方式来注册这个函数</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">t &#x3D; t.Funcs(template.FuncMap&#123;&quot;emailDeal&quot;: EmailDealWith&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><code>EmailDealWith</code>这个函数的参数和返回值定义如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func EmailDealWith(args …interface&#123;&#125;) string<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>我们来看下面的实现例子：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">package main

import (
    &quot;fmt&quot;
    &quot;html&#x2F;template&quot;
    &quot;os&quot;
    &quot;strings&quot;
)

type Friend struct &#123;
    Fname string
&#125;

type Person struct &#123;
    UserName string
    Emails   []string
    Friends  []*Friend
&#125;

func EmailDealWith(args ...interface&#123;&#125;) string &#123;
    ok :&#x3D; false
    var s string
    if len(args) &#x3D;&#x3D; 1 &#123;
        s, ok &#x3D; args[0].(string)
    &#125;
    if !ok &#123;
        s &#x3D; fmt.Sprint(args...)
    &#125;
    &#x2F;&#x2F; find the @ symbol
    substrs :&#x3D; strings.Split(s, &quot;@&quot;)
    if len(substrs) !&#x3D; 2 &#123;
        return s
    &#125;
    &#x2F;&#x2F; replace the @ by &quot; at &quot;
    return (substrs[0] + &quot; at &quot; + substrs[1])
&#125;

func main() &#123;
    f1 :&#x3D; Friend&#123;Fname: &quot;minux.ma&quot;&#125;
    f2 :&#x3D; Friend&#123;Fname: &quot;xushiwei&quot;&#125;
    t :&#x3D; template.New(&quot;fieldname example&quot;)
    t &#x3D; t.Funcs(template.FuncMap&#123;&quot;emailDeal&quot;: EmailDealWith&#125;)
    t, _ &#x3D; t.Parse(&#96;hello &#123;&#123;.UserName&#125;&#125;!
                &#123;&#123;range .Emails&#125;&#125;
                    an emails &#123;&#123;.|emailDeal&#125;&#125;
                &#123;&#123;end&#125;&#125;
                &#123;&#123;with .Friends&#125;&#125;
                &#123;&#123;range .&#125;&#125;
                    my friend name is &#123;&#123;.Fname&#125;&#125;
                &#123;&#123;end&#125;&#125;
                &#123;&#123;end&#125;&#125;
                &#96;)
    p :&#x3D; Person&#123;UserName: &quot;Astaxie&quot;,
        Emails:  []string&#123;&quot;astaxie@beego.me&quot;, &quot;astaxie@gmail.com&quot;&#125;,
        Friends: []*Friend&#123;&amp;f1, &amp;f2&#125;&#125;
    t.Execute(os.Stdout, p)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面演示了如何自定义函数，其实，在模板包内部已经有内置的实现函数，下面代码截取自模板包里面</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var builtins &#x3D; FuncMap&#123;
    &quot;and&quot;:      and,
    &quot;call&quot;:     call,
    &quot;html&quot;:     HTMLEscaper,
    &quot;index&quot;:    index,
    &quot;js&quot;:       JSEscaper,
    &quot;len&quot;:      length,
    &quot;not&quot;:      not,
    &quot;or&quot;:       or,
    &quot;print&quot;:    fmt.Sprint,
    &quot;printf&quot;:   fmt.Sprintf,
    &quot;println&quot;:  fmt.Sprintln,
    &quot;urlquery&quot;: URLQueryEscaper,
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Must操作"><a href="#Must操作" class="headerlink" title="Must操作"></a>Must操作</h2><p>模板包里面有一个函数<code>Must</code>，它的作用是检测模板是否正确，例如大括号是否匹配，注释是否正确的关闭，变量是否正确的书写。接下来我们演示一个例子，用Must来判断模板是否正确：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">package main

import (
    &quot;fmt&quot;
    &quot;text&#x2F;template&quot;
)

func main() &#123;
    tOk :&#x3D; template.New(&quot;first&quot;)
    template.Must(tOk.Parse(&quot; some static text &#x2F;* and a comment *&#x2F;&quot;))
    fmt.Println(&quot;The first one parsed OK.&quot;)

    template.Must(template.New(&quot;second&quot;).Parse(&quot;some static text &#123;&#123; .Name &#125;&#125;&quot;))
    fmt.Println(&quot;The second one parsed OK.&quot;)

    fmt.Println(&quot;The next one ought to fail.&quot;)
    tErr :&#x3D; template.New(&quot;check parse error with Must&quot;)
    template.Must(tErr.Parse(&quot; some static text &#123;&#123; .Name &#125;&quot;))
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>讲输出如下内容</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">The first one parsed OK.
The second one parsed OK.
The next one ought to fail.
panic: template: check parse error with Must:1: unexpected &quot;&#125;&quot; in command<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="8-Web服务"><a href="#8-Web服务" class="headerlink" title="8 Web服务"></a>8 Web服务</h1><p>Web服务背后的关键在于平台的无关性，你可以运行你的服务在Linux系统，可以与其他Windows的asp.net程序交互，同样的，也可以通过同一个接口和运行在FreeBSD上面的JSP无障碍地通信。</p>
<p>目前主流的有如下几种Web服务：REST、SOAP。</p>
<p>REST请求是很直观的，因为REST是基于HTTP协议的一个补充，他的每一次请求都是一个HTTP请求，然后根据不同的method来处理不同的逻辑，很多Web开发者都熟悉HTTP协议，所以学习REST是一件比较容易的事情。所以我们在8.3小节讲详细的讲解如何在Go语言中来实现REST方式。</p>
<p>SOAP是W3C在跨网络信息传递和远程计算机函数调用方面的一个标准。但是SOAP非常复杂，其完整的规范篇幅很长，而且内容仍然在增加。Go语言是以简单著称，所以我们不会介绍SOAP这样复杂的东西。而Go语言提供了一种天生性能很不错，开发起来很方便的RPC机制，我们将会在8.4小节详细介绍如何使用Go语言来实现RPC。</p>
<h2 id="8-3-REST"><a href="#8-3-REST" class="headerlink" title="8.3 REST"></a>8.3 REST</h2><p>RESTful，是目前最为流行的一种互联网软件架构。因为它结构清晰、符合标准、易于理解、扩展方便，所以正得到越来越多网站的采用。</p>
<p>REST就是根据不同的method访问同一个资源的时候实现不同的逻辑处理。</p>
<h1 id="9-安全与加密"><a href="#9-安全与加密" class="headerlink" title="9 安全与加密"></a>9 安全与加密</h1><p>很多Web应用程序中的安全问题都是由于轻信了第三方提供的数据造成的。比如对于用户的输入数据，在对其进行验证之前都应该将其视为不安全的数据。如果直接把这些不安全的数据输出到客户端，就可能造成跨站脚本攻击(XSS)的问题。如果把不安全的数据用于数据库查询，那么就可能造成SQL注入问题，</p>
<p>在使用第三方提供的数据，包括用户提供的数据时，首先检验这些数据的合法性非常重要，这个过程叫做过滤，我们将在9.2小节介绍如何保证对所有输入的数据进行过滤处理。</p>
<p>过滤输入和转义输出并不能解决所有的安全问题，我们将会在9.1讲解的CSRF攻击，会导致受骗者发送攻击者指定的请求从而造成一些破坏。</p>
<p>与安全加密相关的，能够增强我们的Web应用程序的强大手段就是加密，CSDN泄密事件就是因为密码保存的是明文，使得攻击拿手库之后就可以直接实施一些破坏行为了。不过，和其他工具一样，加密手段也必须运用得当。我们将在9.5小节介绍如何存储密码，如何让密码存储的安全。</p>
<p>加密的本质就是扰乱数据，某些不可恢复的数据扰乱我们称为单向加密或者散列算法。另外还有一种双向加密方式，也就是可以对加密后的数据进行解密。我们将会在9.6小节介绍如何实现这种双向加密方式。</p>
<h2 id="9-1-预防CSRF攻击"><a href="#9-1-预防CSRF攻击" class="headerlink" title="9.1 预防CSRF攻击"></a>9.1 预防CSRF攻击</h2><h3 id="什么是CSRF"><a href="#什么是CSRF" class="headerlink" title="什么是CSRF"></a>什么是CSRF</h3><p>CSRF（Cross-site request forgery），中文名称：跨站请求伪造，也被称为：one click attack/session riding，缩写为：CSRF/XSRF。</p>
<p>那么CSRF到底能够干嘛呢？你可以这样简单的理解：攻击者可以盗用你的登陆信息，以你的身份模拟发送各种请求。攻击者只要借助少许的社会工程学的诡计，例如通过QQ等聊天软件发送的链接(有些还伪装成短域名，用户无法分辨)，攻击者就能迫使Web应用的用户去执行攻击者预设的操作。例如，当用户登录网络银行去查看其存款余额，在他没有退出时，就点击了一个QQ好友发来的链接，那么该用户银行帐户中的资金就有可能被转移到攻击者指定的帐户中。</p>
<p>所以遇到CSRF攻击时，将对终端用户的数据和操作指令构成严重的威胁；当受攻击的终端用户具有管理员帐户的时候，CSRF攻击将危及整个Web应用程序。</p>
<h3 id="CSRF的原理"><a href="#CSRF的原理" class="headerlink" title="CSRF的原理"></a>CSRF的原理</h3><p><img src="https://wizardforcel.gitbooks.io/build-web-application-with-golang/content/images/9.1.csrf.png?raw=true" alt="img"></p>
<p>从上图可以看出，要完成一次CSRF攻击，受害者必须依次完成两个步骤 ：</p>
<ul>
<li>1.登录受信任网站A，并在本地生成Cookie 。</li>
<li>2.在不退出A的情况下，访问危险网站B。</li>
</ul>
<p>读者也许会问：“如果我不满足以上两个条件中的任意一个，就不会受到CSRF的攻击”。是的，确实如此，但你不能保证以下情况不会发生：</p>
<ul>
<li>你不能保证你登录了一个网站后，不再打开一个tab页面并访问另外的网站，特别现在浏览器都是支持多tab的。</li>
<li>你不能保证你关闭浏览器了后，你本地的Cookie立刻过期，你上次的会话已经结束。</li>
<li>上图中所谓的攻击网站，可能是一个存在其他漏洞的可信任的经常被人访问的网站。</li>
</ul>
<p>CSRF攻击主要是因为Web的隐式身份验证机制，Web的身份验证机制虽然可以保证一个请求是来自于某个用户的浏览器，但却无法保证该请求是用户批准发送的。</p>
<h3 id="如何预防CSRF"><a href="#如何预防CSRF" class="headerlink" title="如何预防CSRF"></a>如何预防CSRF</h3><p>CSRF的防御可以从服务端和客户端两方面着手，防御效果是从服务端着手效果比较好，现在一般的CSRF防御也都在服务端进行。</p>
<p>服务端的预防CSRF攻击的方式方法有多种，但思想上都是差不多的，主要从以下2个方面入手：</p>
<ul>
<li>1、正确使用GET,POST和Cookie；</li>
<li>2、在非GET请求中增加伪随机数；</li>
</ul>
<p>一般而言，普通的Web应用都是以GET、POST为主，还有一种请求是Cookie方式。我们一般都是按照如下方式设计应用：</p>
<p>1、GET常用在查看，列举，展示等不需要改变资源属性的时候；</p>
<p>2、POST常用在下达订单，改变一个资源的属性或者做其他一些事情；</p>
<h2 id="9-4-避免SQL注入"><a href="#9-4-避免SQL注入" class="headerlink" title="9.4 避免SQL注入"></a>9.4 避免SQL注入</h2><h3 id="什么是SQL注入"><a href="#什么是SQL注入" class="headerlink" title="什么是SQL注入"></a>什么是SQL注入</h3><p>SQL注入攻击（SQL Injection），简称注入攻击，是Web开发中最常见的一种安全漏洞。可以用它来从数据库获取敏感信息，或者利用数据库的特性执行添加用户，导出文件等一系列恶意操作，甚至有可能获取数据库乃至系统用户最高权限。</p>
<p>而造成SQL注入的原因是因为程序没有有效过滤用户的输入，使攻击者成功的向服务器提交恶意的SQL查询代码，程序在接收后错误的将攻击者的输入作为查询语句的一部分执行，导致原始的查询逻辑被改变，额外的执行了攻击者精心构造的恶意代码。</p>
<h3 id="SQL注入实例"><a href="#SQL注入实例" class="headerlink" title="SQL注入实例"></a>SQL注入实例</h3><p>很多Web开发者没有意识到SQL查询是可以被篡改的，从而把SQL查询当作可信任的命令。殊不知，SQL查询是可以绕开访问控制，从而绕过身份验证和权限检查的。更有甚者，有可能通过SQL查询去运行主机系统级的命令。</p>
<p>下面将通过一些真实的例子来详细讲解SQL注入的方式。</p>
<p>考虑以下简单的登录表单：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Username: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Password: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>登陆<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们的处理里面的SQL可能是这样的：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">username:&#x3D;r.Form.Get(&quot;username&quot;)
password:&#x3D;r.Form.Get(&quot;password&quot;)
sql:&#x3D;&quot;SELECT * FROM user WHERE username&#x3D;&#39;&quot;+username+&quot;&#39; AND password&#x3D;&#39;&quot;+password+&quot;&#39;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>如果用户的输入的用户名如下，密码任意</p>
<blockquote>
<p>myuser’ or ‘foo’ = ‘foo’ —</p>
</blockquote>
<p>那么我们的SQL变成了如下所示：</p>
<blockquote>
<p>SELECT *<br>FROM user<br>WHERE username = ‘myuser’ or ‘foo’==’foo’ —‘’ AND password=’xxx’</p>
</blockquote>
<p>在SQL里面—是注释标记，所以查询语句会在此中断。这就让攻击者在不知道任何合法用户名和密码的情况下成功登录了。</p>
<p>PS：这行sql注入确实牛逼，hexo博客里的用来高亮代码的prismJs在这里报错了，查了很久才查出来，索性就在这句话里不用高亮了（狗头，看似半小时搞完，实则好几个月才解决掉）</p>
<h1 id="10-国际化与本地化"><a href="#10-国际化与本地化" class="headerlink" title="10 国际化与本地化"></a>10 国际化与本地化</h1><h2 id="10-1-设置默认地区"><a href="#10-1-设置默认地区" class="headerlink" title="10.1 设置默认地区"></a>10.1 设置默认地区</h2><p>Locale是一组描述世界上某一特定区域文本格式和语言习惯的设置的集合。locale名通常由三个部分组成：第一部分，是一个强制性的，表示语言的缩写，例如”en”表示英文或”zh”表示中文。第二部分，跟在一个下划线之后，是一个可选的国家说明符，用于区分讲同一种语言的不同国家，例如”en_US”表示美国英语，而”en_UK”表示英国英语。最后一部分，跟在一个句点之后，是可选的字符集说明符，例如”zh_CN.gb2312”表示中国使用gb2312字符集。</p>
<p>设置Locale的办法这一就是在应用运行的时候采用域名分级的方式，例如，我们采用www.asta.com当做我们的英文站(默认站)，而把域名www.asta.cn当做中文站。</p>
<p>但是我们一般开发Web应用的时候不会采用这种方式，因为首先域名成本比较高，开发一个Locale就需要一个域名，而且往往统一名称的域名不一定能申请的到，其次我们不愿意为每个站点去本地化一个配置，而更多的是采用url后面带参数的方式</p>
<h4 id="从域名参数设置Locale"><a href="#从域名参数设置Locale" class="headerlink" title="从域名参数设置Locale"></a>从域名参数设置Locale</h4><p>目前最常用的设置Locale的方式是在URL里面带上参数，例如www.asta.com/hello?locale=zh或者www.asta.com/zh/hello。这样我们就可以设置地区：<code>i18n.SetLocale(params[&quot;locale&quot;])</code></p>
<h3 id="本地化文本消息"><a href="#本地化文本消息" class="headerlink" title="本地化文本消息"></a>本地化文本消息</h3><p>本信息是编写Web应用中最常用到的，也是本地化资源中最多的信息，想要以适合本地语言的方式来显示文本信息，可行的一种方案是:建立需要的语言相应的map来维护一个key-value的关系，在输出之前按需从适合的map中去获取相应的文本，如下是一个简单的示例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">package main

import &quot;fmt&quot;

var locales map[string]map[string]string

func main() &#123;
    locales &#x3D; make(map[string]map[string]string, 2)
    en :&#x3D; make(map[string]string, 10)
    en[&quot;pea&quot;] &#x3D; &quot;pea&quot;
    en[&quot;bean&quot;] &#x3D; &quot;bean&quot;
    locales[&quot;en&quot;] &#x3D; en
    cn :&#x3D; make(map[string]string, 10)
    cn[&quot;pea&quot;] &#x3D; &quot;豌豆&quot;
    cn[&quot;bean&quot;] &#x3D; &quot;毛豆&quot;
    locales[&quot;zh-CN&quot;] &#x3D; cn
    lang :&#x3D; &quot;zh-CN&quot;
    fmt.Println(msg(lang, &quot;pea&quot;))
    fmt.Println(msg(lang, &quot;bean&quot;))
&#125;

func msg(locale, key string) string &#123;
    if v, ok :&#x3D; locales[locale]; ok &#123;
        if v2, ok :&#x3D; v[key]; ok &#123;
            return v2
        &#125;
    &#125;
    return &quot;&quot;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="本地化视图和资源"><a href="#本地化视图和资源" class="headerlink" title="本地化视图和资源"></a>本地化视图和资源</h3><p>我们可能会根据Locale的不同来展示视图，这些视图包含不同的图片、css、js等各种静态资源。那么应如何来处理这些信息呢？首先我们应按locale来组织文件信息，请看下面的文件目录安排：</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">views
|--en  &#x2F;&#x2F;英文模板
    |--images     &#x2F;&#x2F;存储图片信息
    |--js         &#x2F;&#x2F;存储JS文件
    |--css        &#x2F;&#x2F;存储css文件
    index.tpl     &#x2F;&#x2F;用户首页
    login.tpl     &#x2F;&#x2F;登陆首页
|--zh-CN &#x2F;&#x2F;中文模板
    |--images
    |--js
    |--css
    index.tpl
    login.tpl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>有了这个目录结构后我们就可以在渲染的地方这样来实现代码：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">s1, _ :&#x3D; template.ParseFiles(&quot;views&quot;+lang+&quot;index.tpl&quot;)
VV.Lang&#x3D;lang
s1.Execute(os.Stdout, VV)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>而对于里面的index.tpl里面的资源设置如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// js文件</span>
<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span> src<span class="token operator">=</span><span class="token string">"views/&#123;&#123;.VV.Lang&#125;&#125;/js/jquery/jquery-1.8.0.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token comment">// css文件</span>
<span class="token operator">&lt;</span>link href<span class="token operator">=</span><span class="token string">"views/&#123;&#123;.VV.Lang&#125;&#125;/css/bootstrap-responsive.min.css"</span> rel<span class="token operator">=</span><span class="token string">"stylesheet"</span><span class="token operator">></span>
<span class="token comment">// 图片文件</span>
<span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">"views/&#123;&#123;.VV.Lang&#125;&#125;/images/btn.png"</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>采用这种方式来本地化视图以及资源时，我们就可以很容易的进行扩展了。</p>
<p>本小节介绍了如何使用及存储本地资源，有时需要通过转换函数来实现，有时通过lang来设置，但是最终都是通过key-value的方式来存储Locale对应的数据，在需要时取出相应于Locale的信息后，如果是文本信息就直接输出，如果是时间日期或者货币，则需要先通过<code>fmt.Printf</code>或其他格式化函数来处理，而对于不同Locale的视图和资源则是最简单的，只要在路径里面增加lang就可以实现了。</p>
<h2 id="10-3-国际化站点"><a href="#10-3-国际化站点" class="headerlink" title="10.3 国际化站点"></a>10.3 国际化站点</h2><h3 id="管理多个本地包"><a href="#管理多个本地包" class="headerlink" title="管理多个本地包"></a>管理多个本地包</h3><p>在开发一个应用的时候，首先我们要决定是只支持一种语言，还是多种语言，如果要支持多种语言，我们则需要制定一个组织结构，以方便将来更多语言的添加。在此我们设计如下：Locale有关的文件放置在config/locales下，假设你要支持中文和英文，那么你需要在这个文件夹下放置en.json和zh.json。大概的内容如下所示：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"># zh<span class="token punctuation">.</span>json

<span class="token punctuation">&#123;</span>
<span class="token string-property property">"zh"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token string-property property">"submit"</span><span class="token operator">:</span> <span class="token string">"提交"</span><span class="token punctuation">,</span>
    <span class="token string-property property">"create"</span><span class="token operator">:</span> <span class="token string">"创建"</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

#en<span class="token punctuation">.</span>json

<span class="token punctuation">&#123;</span>
<span class="token string-property property">"en"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token string-property property">"submit"</span><span class="token operator">:</span> <span class="token string">"Submit"</span><span class="token punctuation">,</span>
    <span class="token string-property property">"create"</span><span class="token operator">:</span> <span class="token string">"Create"</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>为了支持国际化，在此我们使用了一个国际化相关的包——<a href="https://github.com/astaxie/go-i18n">go-i18n</a>，首先我们向go-i18n包注册config/locales这个目录,以加载所有的locale文件</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">Tr:&#x3D;i18n.NewLocale()
Tr.LoadPath(&quot;config&#x2F;locales&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h1 id="11-错误处理，调试和测试"><a href="#11-错误处理，调试和测试" class="headerlink" title="11 错误处理，调试和测试"></a>11 错误处理，调试和测试</h1><p>在C语言里面是通过返回-1或者NULL之类的信息来表示错误，但是对于使用者来说，不查看相应的API说明文档，根本搞不清楚这个返回值究竟代表什么意思，比如:返回0是成功，还是失败,而Go定义了一个叫做error的类型，来显式表达错误。在使用时，通过把返回的error变量与nil的比较，来判定操作是否成功</p>
<h2 id="11-2-使用GDB调试"><a href="#11-2-使用GDB调试" class="headerlink" title="11.2 使用GDB调试"></a>11.2 使用GDB调试</h2><p>开发程序过程中调试代码是开发者经常要做的一件事情，Go语言不像PHP、Python等动态语言，只要修改不需要编译就可以直接输出，而且可以动态的在运行环境下打印数据</p>
<h1 id="12-部署与维护"><a href="#12-部署与维护" class="headerlink" title="12 部署与维护"></a>12 部署与维护</h1><h1 id="13-如何设计一个WEB框架"><a href="#13-如何设计一个WEB框架" class="headerlink" title="13 如何设计一个WEB框架"></a>13 如何设计一个WEB框架</h1><h2 id="13-1-项目规划"><a href="#13-1-项目规划" class="headerlink" title="13.1 项目规划"></a>13.1 项目规划</h2><h2 id="应用程序流程图"><a href="#应用程序流程图" class="headerlink" title="应用程序流程图"></a>应用程序流程图</h2><p>博客系统是基于模型-视图-控制器这一设计模式的。MVC是一种将应用程序的逻辑层和表现层进行分离的结构方式。在实践中，由于表现层从Go中分离了出来，所以它允许你的网页中只包含很少的脚本。</p>
<ul>
<li>模型 (Model) 代表数据结构。通常来说，模型类将包含取出、插入、更新数据库资料等这些功能。</li>
<li>视图 (View) 是展示给用户的信息的结构及样式。一个视图通常是一个网页，但是在Go中，一个视图也可以是一个页面片段，如页头、页尾。它还可以是一个 RSS 页面，或其它类型的“页面”，Go实现的template包已经很好的实现了View层中的部分功能。</li>
<li>控制器 (Controller) 是模型、视图以及其他任何处理HTTP请求所必须的资源之间的中介，并生成网页。</li>
</ul>
<p>下图显示了项目设计中框架的数据流是如何贯穿整个系统:</p>
<p><img src="https://wizardforcel.gitbooks.io/build-web-application-with-golang/content/images/13.1.flow.png?raw=true" alt="img"></p>
<p>图13.3 框架的数据流</p>
<ol>
<li>main.go作为应用入口，初始化一些运行博客所需要的基本资源，配置信息，监听端口。</li>
<li>路由功能检查HTTP请求，根据URL以及method来确定谁(控制层)来处理请求的转发资源。</li>
<li>如果缓存文件存在，它将绕过通常的流程执行，被直接发送给浏览器。</li>
<li>安全检测：应用程序控制器调用之前，HTTP请求和任一用户提交的数据将被过滤。</li>
<li>控制器装载模型、核心库、辅助函数，以及任何处理特定请求所需的其它资源，控制器主要负责处理业务逻辑。</li>
<li>输出视图层中渲染好的即将发送到Web浏览器中的内容。如果开启缓存，视图首先被缓存，将用于以后的常规请求。</li>
</ol>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>根据上面的应用程序流程设计，博客的目录结构设计如下：</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">|——main.go         入口文件
|——conf            配置文件和处理模块
|——controllers     控制器入口
|——models          数据库处理模块
|——utils           辅助函数库
|——static          静态文件目录
|——views           视图库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="框架设计"><a href="#框架设计" class="headerlink" title="框架设计"></a>框架设计</h3><p>为了实现博客的快速搭建，打算基于上面的流程设计开发一个最小化的框架，框架包括路由功能、支持REST的控制器、自动化的模板渲染，日志系统、配置管理等。</p>
<h2 id="13-2-自定义路由器设计"><a href="#13-2-自定义路由器设计" class="headerlink" title="13.2 自定义路由器设计"></a>13.2 自定义路由器设计</h2><p>Go默认的路由添加是通过函数<code>http.Handle</code>和<code>http.HandleFunc</code>等来添加，底层都是调用了<code>DefaultServeMux.Handle(pattern string, handler Handler)</code>,这个函数会把路由信息存储在一个map信息中<code>map[string]muxEntry</code></p>
<h2 id="13-3-controller设计"><a href="#13-3-controller设计" class="headerlink" title="13.3 controller设计"></a>13.3 controller设计</h2><h1 id="14-拓展Web框架"><a href="#14-拓展Web框架" class="headerlink" title="14 拓展Web框架"></a>14 拓展Web框架</h1><h2 id="14-1-静态文件支持"><a href="#14-1-静态文件支持" class="headerlink" title="14.1 静态文件支持"></a>14.1 静态文件支持</h2>]]></content>
      <categories>
        <category>书摘</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>《Go语言高级编程》阅读笔记</title>
    <url>/%E4%B9%A6%E6%91%98/Go/Go%E8%AF%AD%E8%A8%80%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="第一章-语言基础"><a href="#第一章-语言基础" class="headerlink" title="第一章 语言基础"></a>第一章 语言基础</h1><h2 id="1-1-Go语言创世纪"><a href="#1-1-Go语言创世纪" class="headerlink" title="1.1 Go语言创世纪"></a>1.1 Go语言创世纪</h2><p>Go语言是对C语言最彻底的一次扬弃，不仅仅是语法和C语言有着很多差异，最重要的是舍弃了C语言中灵活但是危险的指针运算。而且，Go语言还重新设计了C语言中部分不太合理运算符的优先级，并在很多细微的地方都做了必要的打磨和改变。</p>
<h2 id="1-5-面向并发的内存模型"><a href="#1-5-面向并发的内存模型" class="headerlink" title="1.5 面向并发的内存模型"></a>1.5 面向并发的内存模型</h2><p>在早期，CPU都是以单核的形式顺序执行机器指令。Go语言的祖先C语言正是这种顺序编程语言的代表。顺序编程语言中的顺序是指：所有的指令都是以串行的方式执行，在相同的时刻有且仅有一个CPU在顺序执行程序的指令。</p>
<p>Go语言正是在多核和网络化的时代背景下诞生的原生支持并发的编程语言。</p>
<p>常见的并行编程有多种模型，主要有多线程、消息传递等。从理论上来看，多线程和基于消息的并发编程是等价的。由于多线程并发模型可以自然对应到多核的处理器，主流的操作系统因此也都提供了系统级的多线程支持，同时从概念上讲多线程似乎也更直观，因此多线程编程模型逐步被吸纳到主流的编程语言特性或语言扩展库中。而主流编程语言对基于消息的并发编程模型支持则相比较少，Go语言是基于消息并发模型的集大成者，它将基于CSP模型的并发编程内置到了语言中，通过一个go关键字就可以轻易地启动一个Goroutine，与Erlang不同的是Go语言的Goroutine之间是共享内存的。</p>
<h3 id="1-5-1-Goroutine和系统线程"><a href="#1-5-1-Goroutine和系统线程" class="headerlink" title="1.5.1 Goroutine和系统线程"></a>1.5.1 Goroutine和系统线程</h3><p>Goroutine是Go语言特有的并发体，是一种轻量级的线程，由go关键字启动。在真实的Go语言的实现中，goroutine和系统线程也不是等价的。尽管两者的区别实际上只是一个量的区别，但正是这个量变引发了Go语言并发编程质的飞跃。</p>
<p>首先，每个系统级线程都会有一个固定大小的栈（一般默认可能是2MB），这个栈主要用来保存函数递归调用时参数和局部变量。固定了栈的大小导致了两个问题：一是对于很多只需要很小的栈空间的线程来说是一个巨大的浪费，二是对于少数需要巨大栈空间的线程来说又面临栈溢出的风险。针对这两个问题的解决方案是：要么降低固定的栈大小，提升空间的利用率；要么增大栈的大小以允许更深的函数递归调用，但这两者是没法同时兼得的。相反，一个Goroutine会以一个很小的栈启动（可能是2KB或4KB），当遇到深度递归导致当前栈空间不足时，Goroutine会根据需要动态地伸缩栈的大小（主流实现中栈的最大值可达到1GB）。因为启动的代价很小，所以我们可以轻易地启动成千上万个Goroutine。</p>
<p>Go的运行时还包含了其自己的调度器，这个调度器使用了一些技术手段，可以在n个操作系统线程上多工调度m个Goroutine。Go调度器的工作和内核的调度是相似的，但是这个调度器只关注单独的Go程序中的Goroutine。Goroutine采用的是半抢占式的协作调度，只有在当前Goroutine发生阻塞时才会导致调度；同时发生在用户态，调度器会根据具体函数只保存必要的寄存器，切换的代价要比系统线程低得多。运行时有一个<code>runtime.GOMAXPROCS</code>变量，用于控制当前运行正常非阻塞Goroutine的系统线程数目。</p>
<h3 id="1-5-2-原子操作"><a href="#1-5-2-原子操作" class="headerlink" title="1.5.2 原子操作"></a>1.5.2 原子操作</h3><p>所谓的原子操作就是并发编程中“最小的且不可并行化”的操作。通常，如果多个并发体对同一个共享资源进行的操作是原子的话，那么同一时刻最多只能有一个并发体对该资源进行操作。从线程角度看，在当前线程修改共享资源期间，其它的线程是不能访问该资源的。原子操作对于多线程并发编程模型来说，不会发生有别于单线程的意外情况，共享资源的完整性可以得到保证。</p>
<p>一般情况下，原子操作都是通过“互斥”访问来保证的，通常由特殊的CPU指令提供保护。当然，如果仅仅是想模拟下粗粒度的原子操作，我们可以借助于<code>sync.Mutex</code>来实现</p>
<p>用互斥锁来保护一个数值型的共享资源，麻烦且效率低下。标准库的<code>sync/atomic</code>包对原子操作提供了丰富的支持</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">import (
    &quot;sync&quot;
    &quot;sync&#x2F;atomic&quot;
)

var total uint64

func worker(wg *sync.WaitGroup) &#123;
    defer wg.Done()

    var i uint64
    for i &#x3D; 0; i &lt;&#x3D; 100; i++ &#123;
        atomic.AddUint64(&amp;total, i)
        &#x2F;&#x2F; 但是atomic包下没有sub的操作，支持的操作有限
    &#125;
&#125;

func main() &#123;
    var wg sync.WaitGroup
    wg.Add(2)

    go worker(&amp;wg)
    go worker(&amp;wg)
    wg.Wait()
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>原子操作配合互斥锁可以实现非常高效的单件模式。互斥锁的代价比普通整数的原子读写高很多，在性能敏感的地方可以增加一个数字型的标志位，通过原子检测标志位状态降低互斥锁的使用次数来提高性能。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type singleton struct &#123;&#125;

var (
    instance    *singleton
    initialized uint32
    mu          sync.Mutex
)

func Instance() *singleton &#123;
    if atomic.LoadUint32(&amp;initialized) &#x3D;&#x3D; 1 &#123;
        return instance
    &#125;

    mu.Lock()
    defer mu.Unlock()

    if instance &#x3D;&#x3D; nil &#123;
        defer atomic.StoreUint32(&amp;initialized, 1)
        instance &#x3D; &amp;singleton&#123;&#125;
    &#125;
    return instance
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们可以将通用的代码提取出来，就成了标准库中<code>sync.Once</code>的实现：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type Once struct &#123;
    m    Mutex
    done uint32
&#125;

func (o *Once) Do(f func()) &#123;
    if atomic.LoadUint32(&amp;o.done) &#x3D;&#x3D; 1 &#123;
        return
    &#125;

    o.m.Lock()
    defer o.m.Unlock()

    if o.done &#x3D;&#x3D; 0 &#123;
        defer atomic.StoreUint32(&amp;o.done, 1)
        f()
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>基于<code>sync.Once</code>重新实现单件模式：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var (
    instance *singleton
    once     sync.Once
)

func Instance() *singleton &#123;
    once.Do(func() &#123;
        instance &#x3D; &amp;singleton&#123;&#125;
    &#125;)
    return instance
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>sync/atomic</code>包对基本的数值类型及复杂对象的读写都提供了原子操作的支持。<code>atomic.Value</code>原子对象提供了<code>Load</code>和<code>Store</code>两个原子方法，分别用于加载和保存数据，返回值和参数都是<code>interface&#123;&#125;</code>类型，因此可以用于任意的自定义复杂类型。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var config atomic.Value &#x2F;&#x2F; 保存当前配置信息

&#x2F;&#x2F; 初始化配置信息
config.Store(loadConfig())

&#x2F;&#x2F; 启动一个后台线程, 加载更新后的配置信息
go func() &#123;
    for &#123;
        time.Sleep(time.Second)
        config.Store(loadConfig())
    &#125;
&#125;()

&#x2F;&#x2F; 用于处理请求的工作者线程始终采用最新的配置信息
for i :&#x3D; 0; i &lt; 10; i++ &#123;
    go func() &#123;
        for r :&#x3D; range requests() &#123;
            c :&#x3D; config.Load()
            &#x2F;&#x2F; ...
        &#125;
    &#125;()
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这是一个简化的生产者消费者模型：后台线程生成最新的配置信息；前台多个工作者线程获取最新的配置信息。所有线程共享配置信息资源。</p>
<h3 id="1-5-3-顺序一致性内存模型"><a href="#1-5-3-顺序一致性内存模型" class="headerlink" title="1.5.3 顺序一致性内存模型"></a>1.5.3 顺序一致性内存模型</h3><p>如果只是想简单地在线程之间进行数据同步的话，原子操作已经为编程人员提供了一些同步保障。不过这种保障有一个前提：顺序一致性的内存模型。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var a string
var done bool

func setup() &#123;
    a &#x3D; &quot;hello, world&quot;
    done &#x3D; true
&#125;

func main() &#123;
    go setup()
    for !done &#123;&#125;
    print(a)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们创建了<code>setup</code>线程，用于对字符串<code>a</code>的初始化工作，初始化完成之后设置<code>done</code>标志为<code>true</code>。<code>main</code>函数所在的主线程中，通过<code>for !done &#123;&#125;</code>检测<code>done</code>变为<code>true</code>时，认为字符串初始化工作完成，然后进行字符串的打印工作。</p>
<p>但是Go语言并不保证在<code>main</code>函数中观测到的对<code>done</code>的写入操作发生在对字符串<code>a</code>的写入的操作之后，因此程序很可能打印一个空字符串。更糟糕的是，因为两个线程之间没有同步事件，<code>setup</code>线程对<code>done</code>的写入操作甚至无法被<code>main</code>线程看到，<code>main</code>函数有可能陷入死循环中。</p>
<p>在Go语言中，同一个Goroutine线程内部，顺序一致性内存模型是得到保证的。但是不同的Goroutine之间，并不满足顺序一致性内存模型，需要通过明确定义的同步事件来作为同步的参考。如果两个事件不可排序，那么就说这两个事件是并发的。为了最大化并行，Go语言的编译器和处理器在不影响上述规定的前提下可能会对执行语句重新排序（CPU也会对一些指令进行乱序执行）。</p>
<p>因此，如果在一个Goroutine中顺序执行<code>a = 1; b = 2;</code>两个语句，虽然在当前的Goroutine中可以认为<code>a = 1;</code>语句先于<code>b = 2;</code>语句执行，但是在另一个Goroutine中<code>b = 2;</code>语句可能会先于<code>a = 1;</code>语句执行，甚至在另一个Goroutine中无法看到它们的变化（可能始终在寄存器中）。也就是说在另一个Goroutine看来, <code>a = 1; b = 2;</code>两个语句的执行顺序是不确定的。如果一个并发程序无法确定事件的顺序关系，那么程序的运行结果往往会有不确定的结果。比如下面这个程序：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    go println(&quot;你好, 世界&quot;)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>根据Go语言规范，<code>main</code>函数退出时程序结束，不会等待任何后台线程。因为Goroutine的执行和<code>main</code>函数的返回事件是并发的，谁都有可能先发生，所以什么时候打印，能否打印都是未知的。</p>
<p>用前面的原子操作并不能解决问题，因为我们无法确定两个原子操作之间的顺序。解决问题的办法就是通过同步原语来给两个事件明确排序：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    done :&#x3D; make(chan int)

    go func()&#123;
        println(&quot;你好, 世界&quot;)
        done &lt;- 1
    &#125;()

    &lt;-done
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="1-5-4-初始化顺序"><a href="#1-5-4-初始化顺序" class="headerlink" title="1.5.4 初始化顺序"></a>1.5.4 初始化顺序</h3><p><img src="https://chai2010.cn/advanced-go-programming-book/images/ch1-12-init.ditaa.png" alt="img"></p>
<p>（<code>init</code>不是普通函数，可以定义有多个，所以不能被其它函数调用）。</p>
<p>要注意的是，在<code>main.main</code>函数执行之前所有代码都运行在同一个Goroutine中，也是运行在程序的主系统线程中。如果某个<code>init</code>函数内部用go关键字启动了新的Goroutine的话，新的Goroutine和<code>main.main</code>函数是并发执行的。</p>
<p>因为所有的<code>init</code>函数和<code>main</code>函数都是在主线程完成，它们也是满足顺序一致性模型的。</p>
<h3 id="1-5-6-基于Channel的通信"><a href="#1-5-6-基于Channel的通信" class="headerlink" title="1.5.6 基于Channel的通信"></a>1.5.6 基于Channel的通信</h3><p>Channel通信是在Goroutine之间进行同步的主要方法。在无缓存的Channel上的每一次发送操作都有与其对应的接收操作相配对，发送和接收操作通常发生在不同的Goroutine上（在同一个Goroutine上执行2个操作很容易导致死锁。<strong>无缓存的Channel上的发送操作总在对应的接收操作完成前发生.</strong></p>
<p>若在关闭Channel后继续从中接收数据，接收者就会收到该Channel返回的零值。因此在这个例子中，用<code>close(c)</code>关闭管道代替<code>done &lt;- false</code>依然能保证该程序产生相同的行为。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var done &#x3D; make(chan bool)
var msg string

func aGoroutine() &#123;
    msg &#x3D; &quot;你好, 世界&quot;
    close(done)
&#125;

func main() &#123;
    go aGoroutine()
    &lt;-done
    println(msg)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>对于从无缓冲Channel进行的接收，发生在对该Channel进行的发送完成之前。</strong></p>
<p>基于上面这个规则可知，交换两个Goroutine中的接收和发送操作也是可以的（但是很危险）：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var done &#x3D; make(chan bool)
var msg string

func aGoroutine() &#123;
    msg &#x3D; &quot;hello, world&quot;
    &lt;-done
&#125;
func main() &#123;
    go aGoroutine()
    done &lt;- true
    println(msg)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>也可保证打印出“hello, world”。因为<code>main</code>线程中<code>done &lt;- true</code>发送完成前，后台线程<code>&lt;-done</code>接收已经开始，这保证<code>msg = &quot;hello, world&quot;</code>被执行了，所以之后<code>println(msg)</code>的msg已经被赋值过了。简而言之，后台线程首先对<code>msg</code>进行写入，然后从<code>done</code>中接收信号，随后<code>main</code>线程向<code>done</code>发送对应的信号，最后执行<code>println</code>函数完成。但是，若该Channel为带缓冲的（例如，<code>done = make(chan bool, 1)</code>），<code>main</code>线程的<code>done &lt;- true</code>接收操作将不会被后台线程的<code>&lt;-done</code>接收操作阻塞，该程序将无法保证打印出“hello, world”。</p>
<p>对于带缓冲的Channel，<strong>对于Channel的第<code>K</code>个接收完成操作发生在第<code>K+C</code>个发送操作完成之前，其中<code>C</code>是Channel的缓存大小。</strong> 如果将<code>C</code>设置为0自然就对应无缓存的Channel，也即使第K个接收完成在第K个发送完成之前。因为无缓存的Channel只能同步发1个，也就简化为前面无缓存Channel的规则：<strong>对于从无缓冲Channel进行的接收，发生在对该Channel进行的发送完成之前。</strong></p>
<p>我们可以根据控制Channel的缓存大小来控制并发执行的Goroutine的最大数目, 例如:</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var limit &#x3D; make(chan int, 3)

func main() &#123;
    for _, w :&#x3D; range work &#123;
        go func() &#123;
            limit &lt;- 1
            w()
            &lt;-limit
        &#125;()
    &#125;
    select&#123;&#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后一句<code>select&#123;&#125;</code>是一个空的管道选择语句，该语句会导致<code>main</code>线程阻塞，从而避免程序过早退出。还有<code>for&#123;&#125;</code>、<code>&lt;-make(chan int)</code>等诸多方法可以达到类似的效果。因为<code>main</code>线程被阻塞了，如果需要程序正常退出的话可以通过调用<code>os.Exit(0)</code>实现</p>
<h3 id="1-5-7-不靠谱的同步"><a href="#1-5-7-不靠谱的同步" class="headerlink" title="1.5.7 不靠谱的同步"></a>1.5.7 不靠谱的同步</h3><p>严谨的并发程序的正确性不应该是依赖于CPU的执行速度和休眠时间等不靠谱的因素的。严谨的并发也应该是可以静态推导出结果的：根据线程内顺序一致性，结合Channel或<code>sync</code>同步事件的可排序性来推导，最终完成各个线程各段代码的偏序关系排序。如果两个事件无法根据此规则来排序，那么它们就是并发的，也就是执行先后顺序不可靠的。</p>
<p><strong>解决同步问题的思路是相同的：使用显式的同步。</strong></p>
<h2 id="1-6-常见的并发模式"><a href="#1-6-常见的并发模式" class="headerlink" title="1.6 常见的并发模式"></a>1.6 常见的并发模式</h2><p>Go语言并发体系的理论是C.A.R Hoare在1978年提出的CSP（Communicating Sequential Process，通讯顺序进程）</p>
<p>作为Go并发编程核心的CSP理论的核心概念只有一个：同步通信。</p>
<p>首先要明确一个概念：并发不是并行。并发更关注的是程序的设计层面，并发的程序完全是可以顺序执行的，只有在真正的多核CPU上才可能真正地同时运行。并行更关注的是程序的运行层面，并行一般是简单的大量重复，例如GPU中对图像处理都会有大量的并行运算。为更好的编写并发程序，从设计之初Go语言就注重如何在编程语言层级上设计一个简洁安全高效的抽象模型，让程序员专注于分解问题和组合方案，而且不用被线程管理和信号互斥这些繁琐的操作分散精力。</p>
<p>在并发编程中，对共享资源的正确访问需要精确的控制，在目前的绝大多数语言中，都是通过加锁等线程同步方案来解决这一困难问题，而Go语言却另辟蹊径，它将共享的值通过Channel传递(实际上多个独立执行的线程很少主动共享资源)。在任意给定的时刻，最好只有一个Goroutine能够拥有该资源。数据竞争从设计层面上就被杜绝了。为了提倡这种思考方式，Go语言将其并发编程哲学化为一句口号：</p>
<blockquote>
<p>Do not communicate by sharing memory; instead, share memory by communicating.</p>
<p>不要通过共享内存来通信，而应通过通信来共享内存。</p>
</blockquote>
<p>这是更高层次的并发编程哲学(通过管道来传值是Go语言推荐的做法)。虽然像引用计数这类简单的并发问题通过原子操作或互斥锁就能很好地实现，但是通过Channel来控制访问能够让你写出更简洁正确的程序。</p>
<h3 id="1-6-1-并发版本的Hello-world"><a href="#1-6-1-并发版本的Hello-world" class="headerlink" title="1.6.1 并发版本的Hello world"></a>1.6.1 并发版本的Hello world</h3><p>我们先以在一个新的Goroutine中输出“Hello world”，<code>main</code>等待后台线程输出工作完成之后退出，这样一个简单的并发程序作为热身。</p>
<p>并发编程的核心概念是同步通信，但是同步的方式却有多种。我们先以大家熟悉的互斥量<code>sync.Mutex</code>来实现同步通信。根据文档，我们不能直接对一个未加锁状态的<code>sync.Mutex</code>进行解锁，这会导致运行时异常。下面这种方式并不能保证正常工作：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    var mu sync.Mutex

    go func()&#123;
        fmt.Println(&quot;你好, 世界&quot;)
        mu.Lock()
    &#125;()

    mu.Unlock()
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>因为<code>mu.Lock()</code>和<code>mu.Unlock()</code>并不在同一个Goroutine中，所以也就不满足顺序一致性内存模型。同时它们也没有其它的同步事件可以参考，这两个事件不可排序也就是可以并发的。因为可能是并发的事件，所以<code>main</code>函数中的<code>mu.Unlock()</code>很有可能先发生，而这个时刻<code>mu</code>互斥对象还处于未加锁的状态，从而会导致运行时异常。</p>
<p>下面是修复后的代码：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    var mu sync.Mutex

    mu.Lock()
    go func()&#123;
        fmt.Println(&quot;你好, 世界&quot;)
        mu.Unlock()
    &#125;()

    mu.Lock()
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>修复的方式是在<code>main</code>函数所在线程中执行两次<code>mu.Lock()</code>，当第二次加锁时会因为锁已经被占用（不是递归锁）而阻塞，<code>main</code>函数的阻塞状态驱动后台线程继续向前执行。</p>
<p>使用<code>sync.Mutex</code>互斥锁同步是比较低级的做法。我们现在改用无缓存的管道来实现同步：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    done :&#x3D; make(chan int)

    go func()&#123;
        fmt.Println(&quot;你好, 世界&quot;)
        &lt;-done
    &#125;()

    done &lt;- 1
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的代码虽然可以正确同步，但是对管道的缓存大小太敏感：如果管道有缓存的话，就无法保证main退出之前后台线程能正常打印了。更好的做法是将管道的发送和接收方向调换一下，这样可以避免同步事件受管道缓存大小的影响：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    done :&#x3D; make(chan int, 1) &#x2F;&#x2F; 带缓存的管道

    go func()&#123;
        fmt.Println(&quot;你好, 世界&quot;)
        done &lt;- 1
    &#125;()

    &lt;-done
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对于带缓冲的Channel，对于Channel的第K个接收完成操作发生在第K+C个发送操作完成之前，其中C是Channel的缓存大小。虽然管道是带缓存的，<code>main</code>线程接收完成是在后台线程发送开始但还未完成的时刻，此时打印工作也是已经完成的。</p>
<p>基于带缓存的管道，我们可以很容易将打印线程扩展到N个。下面的例子是开启10个后台线程分别打印：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    done :&#x3D; make(chan int, 10) &#x2F;&#x2F; 带 10 个缓存

    &#x2F;&#x2F; 开N个后台打印线程
    for i :&#x3D; 0; i &lt; cap(done); i++ &#123;
        go func()&#123;
            fmt.Println(&quot;你好, 世界&quot;)
            done &lt;- 1
        &#125;()
    &#125;

    &#x2F;&#x2F; 等待N个后台线程完成
    for i :&#x3D; 0; i &lt; cap(done); i++ &#123;
        &lt;-done
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对于这种要等待N个线程完成后再进行下一步的同步操作有一个简单的做法，就是使用<code>sync.WaitGroup</code>来等待一组事件：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    var wg sync.WaitGroup

    &#x2F;&#x2F; 开N个后台打印线程
    for i :&#x3D; 0; i &lt; 10; i++ &#123;
        wg.Add(1)

        go func() &#123;
            fmt.Println(&quot;你好, 世界&quot;)
            wg.Done()
        &#125;()
    &#125;

    &#x2F;&#x2F; 等待N个后台线程完成
    wg.Wait()
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中<code>wg.Add(1)</code>用于增加等待事件的个数，必须确保在后台线程启动之前执行（如果放到后台线程之中执行则不能保证被正常执行到）。当后台线程完成打印工作之后，调用<code>wg.Done()</code>表示完成一个事件。<code>main</code>函数的<code>wg.Wait()</code>是等待全部的事件完成。</p>
<h3 id="1-6-4-控制并发数"><a href="#1-6-4-控制并发数" class="headerlink" title="1.6.4 控制并发数"></a>1.6.4 控制并发数</h3><p>在Go语言自带的godoc程序实现中有一个<code>vfs</code>的包对应虚拟的文件系统，在<code>vfs</code>包下面有一个<code>gatefs</code>的子包，<code>gatefs</code>子包的目的就是为了控制访问该虚拟文件系统的最大并发数。<code>gatefs</code>包的应用很简单：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">import (
    &quot;golang.org&#x2F;x&#x2F;tools&#x2F;godoc&#x2F;vfs&quot;
    &quot;golang.org&#x2F;x&#x2F;tools&#x2F;godoc&#x2F;vfs&#x2F;gatefs&quot;
)

func main() &#123;
    fs :&#x3D; gatefs.New(vfs.OS(&quot;&#x2F;path&quot;), make(chan bool, 8))
    &#x2F;&#x2F; ...
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中<code>vfs.OS(&quot;/path&quot;)</code>基于本地文件系统构造一个虚拟的文件系统，然后<code>gatefs.New</code>基于现有的虚拟文件系统构造一个并发受控的虚拟文件系统。并发数控制的原理在前面一节已经讲过，就是通过带缓存管道的发送和接收规则来实现最大并发阻塞：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var limit &#x3D; make(chan int, 3)

func main() &#123;
    for _, w :&#x3D; range work &#123;
        go func() &#123;
            limit &lt;- 1
            w()
            &lt;-limit
        &#125;()
    &#125;
    select&#123;&#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>不过<code>gatefs</code>对此做一个抽象类型<code>gate</code>，增加了<code>enter</code>和<code>leave</code>方法分别对应并发代码的进入和离开。当超出并发数目限制的时候，<code>enter</code>方法会阻塞直到并发数降下来为止。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type gate chan bool

func (g gate) enter() &#123; g &lt;- true &#125;
func (g gate) leave() &#123; &lt;-g &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>gatefs</code>包装的新的虚拟文件系统就是将需要控制并发的方法增加了<code>enter</code>和<code>leave</code>调用而已：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type gatefs struct &#123;
    fs vfs.FileSystem
    gate
&#125;

func (fs gatefs) Lstat(p string) (os.FileInfo, error) &#123;
    fs.enter()
    defer fs.leave()
    return fs.fs.Lstat(p)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们不仅可以控制最大的并发数目，而且可以通过带缓存Channel的使用量和最大容量比例来判断程序运行的并发率。当管道为空的时候可以认为是空闲状态，当管道满了时任务是繁忙状态，这对于后台一些低级任务的运行是有参考价值的。</p>
<h2 id="1-6-5-赢者为王"><a href="#1-6-5-赢者为王" class="headerlink" title="1.6.5 赢者为王"></a>1.6.5 赢者为王</h2><p>假设我们想快速地搜索“golang”相关的主题，我们可能会同时打开Bing、Google或百度等多个检索引擎。当某个搜索最先返回结果后，就可以关闭其它搜索页面了。因为受网络环境和搜索引擎算法的影响，某些搜索引擎可能很快返回搜索结果，某些搜索引擎也可能等到他们公司倒闭也没有完成搜索。我们可以采用类似的策略来编写这个程序：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    ch :&#x3D; make(chan string, 32)

    go func() &#123;
        ch &lt;- searchByBing(&quot;golang&quot;)
    &#125;()
    go func() &#123;
        ch &lt;- searchByGoogle(&quot;golang&quot;)
    &#125;()
    go func() &#123;
        ch &lt;- searchByBaidu(&quot;golang&quot;)
    &#125;()

    fmt.Println(&lt;-ch)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>首先，我们创建了一个带缓存的管道，管道的缓存数目要足够大，保证不会因为缓存的容量引起不必要的阻塞。然后我们开启了多个后台线程，分别向不同的搜索引擎提交搜索请求。当任意一个搜索引擎最先有结果之后，都会马上将结果发到管道中（因为管道带了足够的缓存，这个过程不会阻塞）。但是最终我们只从管道取第一个结果，也就是最先返回的结果。</p>
<p>通过适当开启一些冗余的线程，尝试用不同途径去解决同样的问题，最终以赢者为王的方式提升了程序的相应性能。</p>
<h3 id="1-6-6-素数筛"><a href="#1-6-6-素数筛" class="headerlink" title="1.6.6 素数筛"></a>1.6.6 素数筛</h3><p>并发版本的素数筛是一个经典的并发例子，通过它我们可以更深刻地理解Go语言的并发特性。“素数筛”的原理如图：</p>
<p><img src="https://chai2010.cn/advanced-go-programming-book/images/ch1-13-prime-sieve.png" alt="img"></p>
<p><em>图 1-13 素数筛</em></p>
<p>我们需要先生成最初的<code>2, 3, 4, ...</code>自然数序列（不包含开头的0、1）：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">&#x2F;&#x2F; 返回生成自然数序列的管道: 2, 3, 4, ...
func GenerateNatural() chan int &#123;
    ch :&#x3D; make(chan int)
    go func() &#123;
        for i :&#x3D; 2; ; i++ &#123;
            ch &lt;- i
        &#125;
    &#125;()
    return ch
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>GenerateNatural</code>函数内部启动一个Goroutine生产序列，返回对应的管道。</p>
<p>然后是为每个素数构造一个筛子：将输入序列中是素数倍数的数提出，并返回新的序列，是一个新的管道。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">&#x2F;&#x2F; 管道过滤器: 删除能被素数整除的数
func PrimeFilter(in &lt;-chan int, prime int) chan int &#123;
    out :&#x3D; make(chan int)
    go func() &#123;
        for &#123;
            if i :&#x3D; &lt;-in; i%prime !&#x3D; 0 &#123;
                out &lt;- i
            &#125;
        &#125;
    &#125;()
    return out
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>PrimeFilter</code>函数也是内部启动一个Goroutine生产序列，返回过滤后序列对应的管道。</p>
<p>现在我们可以在<code>main</code>函数中驱动这个并发的素数筛了：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    ch :&#x3D; GenerateNatural() &#x2F;&#x2F; 自然数序列: 2, 3, 4, ...
    for i :&#x3D; 0; i &lt; 100; i++ &#123;
        prime :&#x3D; &lt;-ch &#x2F;&#x2F; 新出现的素数
        fmt.Printf(&quot;%v: %v\n&quot;, i+1, prime)
        ch &#x3D; PrimeFilter(ch, prime) &#x2F;&#x2F; 基于新素数构造的过滤器
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们先是调用<code>GenerateNatural()</code>生成最原始的从2开始的自然数序列。然后开始一个100次迭代的循环，希望生成100个素数。在每次循环迭代开始的时候，管道中的第一个数必定是素数，我们先读取并打印这个素数。然后基于管道中剩余的数列，并以当前取出的素数为筛子过滤后面的素数。不同的素数筛子对应的管道是串联在一起的。</p>
<p>素数筛展示了一种优雅的并发程序结构。但是因为每个并发体处理的任务粒度太细微，程序整体的性能并不理想。对于细粒度的并发程序，CSP模型中固有的消息传递的代价太高了（多线程并发模型同样要面临线程启动的代价）。</p>
<h3 id="1-6-7-并发的安全退出"><a href="#1-6-7-并发的安全退出" class="headerlink" title="1.6.7 并发的安全退出"></a>1.6.7 并发的安全退出</h3><p>有时候我们需要通知goroutine停止它正在干的事情，特别是当它工作在错误的方向上的时候。Go语言并没有提供在一个直接终止Goroutine的方法，由于这样会导致goroutine之间的共享变量处在未定义的状态上。但是如果我们想要退出两个或者任意多个Goroutine怎么办呢？</p>
<p>Go语言中不同Goroutine之间主要依靠管道进行通信和同步。要同时处理多个管道的发送或接收操作，我们需要使用<code>select</code>关键字（这个关键字和网络编程中的<code>select</code>函数的行为类似）。当<code>select</code>有多个分支时，会随机选择一个可用的管道分支，如果没有可用的管道分支则选择<code>default</code>分支，否则会一直保存阻塞状态。</p>
<p>基于<code>select</code>实现的管道的超时判断：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">select &#123;
case v :&#x3D; &lt;-in:
    fmt.Println(v)
case &lt;-time.After(time.Second):
    return &#x2F;&#x2F; 超时
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过<code>select</code>的<code>default</code>分支实现非阻塞的管道发送或接收操作：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">select &#123;
case v :&#x3D; &lt;-in:
    fmt.Println(v)
default:
    &#x2F;&#x2F; 没有数据
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过<code>select</code>来阻止<code>main</code>函数退出：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    &#x2F;&#x2F; do some thins
    select&#123;&#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>当有多个管道均可操作时，<code>select</code>会随机选择一个管道。基于该特性我们可以用<code>select</code>实现一个生成随机数序列的程序：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    ch :&#x3D; make(chan int)
    go func() &#123;
        for &#123;
            select &#123;
            case ch &lt;- 0:
            case ch &lt;- 1:
            &#125;
        &#125;
    &#125;()

    for v :&#x3D; range ch &#123;
        fmt.Println(v)
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们通过<code>select</code>和<code>default</code>分支可以很容易实现一个Goroutine的退出控制:</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func worker(cannel chan bool) &#123;
    for &#123;
        select &#123;
        default:
            fmt.Println(&quot;hello&quot;)
            &#x2F;&#x2F; 正常工作
        case &lt;-cannel:
            &#x2F;&#x2F; 退出
        &#125;
    &#125;
&#125;

func main() &#123;
    cannel :&#x3D; make(chan bool)
    go worker(cannel)

    time.Sleep(time.Second)
    cannel &lt;- true
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>但是管道的发送操作和接收操作是一一对应的，如果要停止多个Goroutine那么可能需要创建同样数量的管道，这个代价太大了。其实我们可以通过<code>close</code>关闭一个管道来实现广播的效果，所有从关闭管道接收的操作均会收到一个零值和一个可选的失败标志。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func worker(cannel chan bool) &#123;
    for &#123;
        select &#123;
        default:
            fmt.Println(&quot;hello&quot;)
            &#x2F;&#x2F; 正常工作
        case &lt;-cannel:
            &#x2F;&#x2F; 退出
        &#125;
    &#125;
&#125;

func main() &#123;
    cancel :&#x3D; make(chan bool)

    for i :&#x3D; 0; i &lt; 10; i++ &#123;
        go worker(cancel)
    &#125;

    time.Sleep(time.Second)
    close(cancel)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们通过<code>close</code>来关闭<code>cancel</code>管道向多个Goroutine广播退出的指令。不过这个程序依然不够稳健：当每个Goroutine收到退出指令退出时一般会进行一定的清理工作，但是退出的清理工作并不能保证被完成，因为<code>main</code>线程并没有等待各个工作Goroutine退出工作完成的机制。我们可以结合<code>sync.WaitGroup</code>来改进:</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func worker(wg *sync.WaitGroup, cannel chan bool) &#123;
    defer wg.Done()

    for &#123;
        select &#123;
        default:
            fmt.Println(&quot;hello&quot;)
        case &lt;-cannel:
            return
        &#125;
    &#125;
&#125;

func main() &#123;
    cancel :&#x3D; make(chan bool)

    var wg sync.WaitGroup
    for i :&#x3D; 0; i &lt; 10; i++ &#123;
        wg.Add(1)
        go worker(&amp;wg, cancel)
    &#125;

    time.Sleep(time.Second)
    close(cancel)
    wg.Wait()
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>现在每个工作者并发体的创建、运行、暂停和退出都是在<code>main</code>函数的安全控制之下了</p>
<h3 id="1-6-8-context包"><a href="#1-6-8-context包" class="headerlink" title="1.6.8 context包"></a>1.6.8 context包</h3><p>在Go1.7发布时，标准库增加了一个<code>context</code>包，用来简化对于处理单个请求的多个Goroutine之间与请求域的数据、超时和退出等操作，官方有博文对此做了专门介绍。我们可以用<code>context</code>包来重新实现前面的线程安全退出或超时的控制:</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func worker(ctx context.Context, wg *sync.WaitGroup) error &#123;
    defer wg.Done()

    for &#123;
        select &#123;
        default:
            fmt.Println(&quot;hello&quot;)
        case &lt;-ctx.Done():
            return ctx.Err()
        &#125;
    &#125;
&#125;

func main() &#123;
    ctx, cancel :&#x3D; context.WithTimeout(context.Background(), 10*time.Second)

    var wg sync.WaitGroup
    for i :&#x3D; 0; i &lt; 10; i++ &#123;
        wg.Add(1)
        go worker(ctx, &amp;wg)
    &#125;

    time.Sleep(time.Second)
    cancel()

    wg.Wait()
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当并发体超时或<code>main</code>主动停止工作者Goroutine时，每个工作者都可以安全退出。</p>
<p>Go语言是带内存自动回收特性的，因此内存一般不会泄漏。</p>
<p>在前面素数筛的例子中，<code>GenerateNatural</code>和<code>PrimeFilter</code>函数内部都启动了新的Goroutine，当<code>main</code>函数不再使用管道时后台Goroutine有泄漏的风险。我们可以通过<code>context</code>包来避免这个问题，下面是改进的素数筛实现：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">&#x2F;&#x2F; 返回生成自然数序列的管道: 2, 3, 4, ...
func GenerateNatural(ctx context.Context) chan int &#123;
    ch :&#x3D; make(chan int)
    go func() &#123;
        for i :&#x3D; 2; ; i++ &#123;
            select &#123;
            case &lt;- ctx.Done():
                return
            case ch &lt;- i:
            &#125;
        &#125;
    &#125;()
    return ch
&#125;

&#x2F;&#x2F; 管道过滤器: 删除能被素数整除的数
func PrimeFilter(ctx context.Context, in &lt;-chan int, prime int) chan int &#123;
    out :&#x3D; make(chan int)
    go func() &#123;
        for &#123;
            if i :&#x3D; &lt;-in; i%prime !&#x3D; 0 &#123;
                select &#123;
                case &lt;- ctx.Done():
                    return
                case out &lt;- i:
                &#125;
            &#125;
        &#125;
    &#125;()
    return out
&#125;

func main() &#123;
    &#x2F;&#x2F; 通过 Context 控制后台Goroutine状态
    ctx, cancel :&#x3D; context.WithCancel(context.Background())

    ch :&#x3D; GenerateNatural(ctx) &#x2F;&#x2F; 自然数序列: 2, 3, 4, ...
    for i :&#x3D; 0; i &lt; 100; i++ &#123;
        prime :&#x3D; &lt;-ch &#x2F;&#x2F; 新出现的素数
        fmt.Printf(&quot;%v: %v\n&quot;, i+1, prime)
        ch &#x3D; PrimeFilter(ctx, ch, prime) &#x2F;&#x2F; 基于新素数构造的过滤器
    &#125;

    cancel()
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="1-7-错误和异常"><a href="#1-7-错误和异常" class="headerlink" title="1.7 错误和异常"></a>1.7 错误和异常</h2><p>在Go语言中，错误被认为是一种可以预期的结果；而异常则是一种非预期的结果，发生异常可能表示程序中存在BUG或发生了其它不可控的问题。Go语言推荐使用<code>recover</code>函数将内部异常转为错误处理，这使得用户可以真正的关心业务相关的错误处理。</p>
<p>捕获异常不是最终的目的。如果异常不可预测，直接输出异常信息是最好的处理方式</p>
<h3 id="1-7-1-错误处理策略"><a href="#1-7-1-错误处理策略" class="headerlink" title="1.7.1 错误处理策略"></a>1.7.1 错误处理策略</h3><p>Go语言中的导出函数一般不抛出异常，一个未受控的异常可以看作是程序的BUG。但是对于那些提供类似Web服务的框架而言；它们经常需要接入第三方的中间件。因为第三方的中间件是否存在BUG是否会抛出异常，Web框架本身是不能确定的。为了提高系统的稳定性，Web框架一般会通过<code>recover</code>来防御性地捕获所有处理流程中可能产生的异常，然后将异常转为普通的错误返回。</p>
<p>让我们以JSON解析器为例，说明recover的使用场景。考虑到JSON解析器的复杂性，即使某个语言解析器目前工作正常，也无法肯定它没有漏洞。因此，当某个异常出现时，我们不会选择让解析器崩溃，而是会将panic异常当作普通的解析错误，并附加额外信息提醒用户报告此错误。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func ParseJSON(input string) (s *Syntax, err error) &#123;
    defer func() &#123;
        if p :&#x3D; recover(); p !&#x3D; nil &#123;
            err &#x3D; fmt.Errorf(&quot;JSON: internal error: %v&quot;, p)
        &#125;
    &#125;()
    &#x2F;&#x2F; ...parser...
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>标准库中的<code>json</code>包，在内部递归解析JSON数据的时候如果遇到错误，会通过抛出异常的方式来快速跳出深度嵌套的函数调用，然后由最外一级的接口通过<code>recover</code>捕获<code>panic</code>，然后返回相应的错误信息。</p>
<p>Go语言库的实现习惯: 即使在包内部使用了<code>panic</code>，但是在导出函数时会被转化为明确的错误值。</p>
<h3 id="1-7-2-获取错误的上下文"><a href="#1-7-2-获取错误的上下文" class="headerlink" title="1.7.2 获取错误的上下文"></a>1.7.2 获取错误的上下文</h3><p>上层用户在遇到错误时，可以很容易从业务层面理解错误发生的原因。但是鱼和熊掌总是很难兼得，在上层用户获得新的错误的同时，我们也丢失了底层最原始的错误类型（只剩下错误描述信息了）。</p>
<p>为了记录这种错误类型在包装的变迁过程中的信息，我们一般会定义一个辅助的<code>WrapError</code>函数，用于包装原始的错误，同时保留完整的原始错误类型。为了问题定位的方便，同时也为了能记录错误发生时的函数调用状态，我们很多时候希望在出现致命错误的时候保存完整的函数调用信息。同时，为了支持RPC等跨网络的传输，我们可能要需要将错误序列化为类似JSON格式的数据，然后再从这些数据中将错误解码恢出来。</p>
<p>在Go语言中，错误处理也有一套独特的编码风格。检查某个子函数是否失败后，我们通常将处理失败的逻辑代码放在处理成功的代码之前。如果某个错误会导致函数返回，那么成功时的逻辑代码不应放在<code>else</code>语句块中，而应直接放在函数体中。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">f, err :&#x3D; os.Open(&quot;filename.ext&quot;)
if err !&#x3D; nil &#123;
    &#x2F;&#x2F; 失败的情形, 马上返回错误
&#125;

&#x2F;&#x2F; 正常的处理流程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Go语言中大部分函数的代码结构几乎相同，首先是一系列的初始检查，用于防止错误发生，之后是函数的实际逻辑。</p>
<h3 id="1-7-3-错误的错误返回"><a href="#1-7-3-错误的错误返回" class="headerlink" title="1.7.3 错误的错误返回"></a>1.7.3 错误的错误返回</h3><p>Go语言作为一个强类型语言，不同类型之间必须要显式的转换（而且必须有相同的基础类型）。但是，Go语言中<code>interface</code>是一个例外：非接口类型到接口类型，或者是接口类型之间的转换都是隐式的。这是为了支持鸭子类型，当然会牺牲一定的安全性。</p>
<p>鸭子类型（英語：duck typing）在程序设计中是动态类型的一种风格。 在这种风格中，一个对象有效的语义，不是由继承自特定的类或实现特定的接口，而是由”当前方法和属性的集合”决定。</p>
<p><strong>后面没记了，现用现查吧！</strong></p>
<h1 id="第2章-CGO编程"><a href="#第2章-CGO编程" class="headerlink" title="第2章 CGO编程"></a>第2章 CGO编程</h1><p>C语言作为一个通用语言，很多库会选择提供一个C兼容的API，然后用其他不同的编程语言实现。Go语言通过自带的一个叫CGO的工具来支持C语言函数调用，同时我们可以用Go语言导出C动态库接口给其它语言使用。</p>
<h2 id="2-1-快速入门"><a href="#2-1-快速入门" class="headerlink" title="2.1 快速入门"></a>2.1 快速入门</h2><p>通过<code>import &quot;C&quot;</code>语句启用CGO特性。即使没有调用CGO的相关函数，但是<code>go build</code>命令会在编译和链接阶段启动gcc编译器，这已经是一个完整的CGO程序了。</p>
<h2 id="2-1-2-基于C标准库函数输出字符串"><a href="#2-1-2-基于C标准库函数输出字符串" class="headerlink" title="2.1.2 基于C标准库函数输出字符串"></a>2.1.2 基于C标准库函数输出字符串</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go">&#x2F;&#x2F; hello.go
package main

&#x2F;&#x2F;#include &lt;stdio.h&gt;
import &quot;C&quot;

func main() &#123;
    C.puts(C.CString(&quot;Hello, World\n&quot;))
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们不仅仅通过<code>import &quot;C&quot;</code>语句启用CGO特性，同时包含C语言的<code>&lt;stdio.h&gt;</code>头文件。然后通过CGO包的<code>C.CString</code>函数将Go语言字符串转为C语言字符串，最后调用CGO包的<code>C.puts</code>函数向标准输出窗口打印转换后的C字符串。</p>
<p>没有释放使用<code>C.CString</code>创建的C语言字符串会导致内存泄漏。但是对于这个小程序来说，这样是没有问题的，因为程序退出后操作系统会自动回收程序的所有资源。</p>
<h2 id="2-1-3-使用自己的C函数"><a href="#2-1-3-使用自己的C函数" class="headerlink" title="2.1.3 使用自己的C函数"></a>2.1.3 使用自己的C函数</h2><p>现在我们先自定义一个叫<code>SayHello</code>的C函数来实现打印，然后从Go语言环境中调用这个<code>SayHello</code>函数：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">&#x2F;&#x2F; hello.go
package main

&#x2F;*
#include &lt;stdio.h&gt;

static void SayHello(const char* s) &#123;
    puts(s);
&#125;
*&#x2F;
import &quot;C&quot;

func main() &#123;
    C.SayHello(C.CString(&quot;Hello, World\n&quot;))
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>除了<code>SayHello</code>函数是我们自己实现的之外，其它的部分和前面的例子基本相似</p>
<p>我们也可以将<code>SayHello</code>函数放到当前目录下的一个C语言源文件中（后缀名必须是<code>.c</code>）。因为是编写在独立的C文件中，为了允许外部引用，所以需要去掉函数的<code>static</code>修饰符。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">&#x2F;&#x2F; hello.c

#include &lt;stdio.h&gt;

void SayHello(const char* s) &#123;
    puts(s);
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后在CGO部分先声明<code>SayHello</code>函数，其它部分不变：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">&#x2F;&#x2F; hello.go
package main

&#x2F;&#x2F;void SayHello(const char* s);
import &quot;C&quot;

func main() &#123;
    C.SayHello(C.CString(&quot;Hello, World\n&quot;))
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意，如果之前运行的命令是<code>go run hello.go</code>或<code>go build hello.go</code>的话，此处须使用<code>go run &quot;your/package&quot;</code>或<code>go build &quot;your/package&quot;</code>才可以。若本就在包路径下的话，也可以直接运行<code>go run .</code>或<code>go build</code>。</p>
<p>既然<code>SayHello</code>函数已经放到独立的C文件中了，我们自然可以将对应的C文件编译打包为静态库或动态库文件供使用。如果是以静态库或动态库方式引用<code>SayHello</code>函数的话，需要将对应的C源文件移出当前目录（CGO构建程序会自动构建当前目录下的C源文件，从而导致C函数名冲突）。</p>
<h2 id="2-1-4-C代码的模块化"><a href="#2-1-4-C代码的模块化" class="headerlink" title="2.1.4 C代码的模块化"></a>2.1.4 C代码的模块化</h2><p>模块化编程的核心是面向程序接口编程（这里的接口并不是Go语言的interface，而是API的概念）。</p>
<p>在前面的例子中，我们可以抽象一个名为hello的模块，模块的全部接口函数都在hello.h头文件定义：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">&#x2F;&#x2F; hello.h
void SayHello(const char* s);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>其中只有一个SayHello函数的声明。但是作为hello模块的用户来说，就可以放心地使用SayHello函数，而无需关心函数的具体实现。而作为SayHello函数的实现者来说，函数的实现只要满足头文件中函数的声明的规范即可。</p>
<p>在采用面向C语言API接口编程之后，我们彻底解放了模块实现者的语言枷锁：实现者可以用任何编程语言实现模块，只要最终满足公开的API约定即可。我们可以用C语言实现SayHello函数，也可以使用更复杂的C++语言来实现SayHello函数，当然我们也可以用汇编语言甚至Go语言来重新实现SayHello函数。</p>
<h3 id="2-1-5用Go重新实现C函数"><a href="#2-1-5用Go重新实现C函数" class="headerlink" title="2.1.5用Go重新实现C函数"></a>2.1.5用Go重新实现C函数</h3><p>其实CGO不仅仅用于Go语言中调用C语言函数，还可以用于导出Go语言函数给C语言函数调用。在前面的例子中，我们已经抽象一个名为hello的模块，模块的全部接口函数都在hello.h头文件定义：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">&#x2F;&#x2F; hello.h
void SayHello(&#x2F;*const*&#x2F; char* s);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>现在我们创建一个hello.go文件，用Go语言重新实现C语言接口的SayHello函数:</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">&#x2F;&#x2F; hello.go
package main

import &quot;C&quot;

import &quot;fmt&quot;

&#x2F;&#x2F;export SayHello
func SayHello(s *C.char) &#123;
    fmt.Print(C.GoString(s))
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们通过CGO的<code>//export SayHello</code>指令将Go语言实现的函数<code>SayHello</code>导出为C语言函数。为了适配CGO导出的C语言函数，我们禁止了在函数的声明语句中的const修饰符。需要注意的是，这里其实有两个版本的<code>SayHello</code>函数：一个Go语言环境的；另一个是C语言环境的。cgo生成的C语言版本SayHello函数最终会通过桥接代码调用Go语言版本的SayHello函数。</p>
<p>通过面向C语言接口的编程技术，我们不仅仅解放了函数的实现者，同时也简化的函数的使用者。现在我们可以将SayHello当作一个标准库的函数使用（和puts函数的使用方式类似）：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">package main

&#x2F;&#x2F;#include &lt;hello.h&gt;
import &quot;C&quot;

func main() &#123;
    C.SayHello(C.CString(&quot;Hello, World\n&quot;))
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-1-6-面向C接口的Go编程"><a href="#2-1-6-面向C接口的Go编程" class="headerlink" title="2.1.6 面向C接口的Go编程"></a>2.1.6 面向C接口的Go编程</h3><p>正所谓合久必分、分久必合，我们现在尝试将例子中的几个文件重新合并到一个Go文件。下面是合并后的成果：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">package main

&#x2F;&#x2F;void SayHello(char* s);
import &quot;C&quot;

import (
    &quot;fmt&quot;
)

func main() &#123;
    C.SayHello(C.CString(&quot;Hello, World\n&quot;))
&#125;

&#x2F;&#x2F;export SayHello
func SayHello(s *C.char) &#123;
    fmt.Print(C.GoString(s))
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过分析可以发现<code>SayHello</code>函数的参数如果可以直接使用Go字符串是最直接的。在Go1.10中CGO新增加了一个<code>_GoString_</code>预定义的C语言类型，用来表示Go语言字符串。下面是改进后的代码：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">package main

&#x2F;&#x2F;void SayHello(_GoString_ s);
import &quot;C&quot;

import (
    &quot;fmt&quot;
)

func main() &#123;
    C.SayHello(&quot;Hello, World\n&quot;)
&#125;

&#x2F;&#x2F;export SayHello
func SayHello(s string) &#123;
    fmt.Print(s)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>虽然看起来全部是Go语言代码，但是执行的时候是先从Go语言的<code>main</code>函数，到CGO自动生成的C语言版本<code>SayHello</code>桥接函数，最后又回到了Go语言环境的<code>SayHello</code>函数。这个代码包含了CGO编程的精华，读者需要深入理解。</p>
<h2 id="2-2-CGO基础"><a href="#2-2-CGO基础" class="headerlink" title="2.2 CGO基础"></a>2.2 CGO基础</h2><p>要使用CGO特性，需要安装C/C++构建工具链，在macOS和Linux下是要安装GCC，在windows下是需要安装MinGW工具。同时需要保证环境变量<code>CGO_ENABLED</code>被设置为1，这表示CGO是被启用的状态。在本地构建时<code>CGO_ENABLED</code>默认是启用的，当交叉构建时CGO默认是禁止的。比如要交叉构建ARM环境运行的Go程序，需要手工设置好C/C++交叉构建的工具链，同时开启<code>CGO_ENABLED</code>环境变量。然后通过<code>import &quot;C&quot;</code>语句启用CGO特性。</p>
<h3 id="2-2-1-import-quot-C-quot-语句"><a href="#2-2-1-import-quot-C-quot-语句" class="headerlink" title="2.2.1 import &quot;C&quot;语句"></a>2.2.1 <code>import &quot;C&quot;</code>语句</h3><p>如果在Go代码中出现了<code>import &quot;C&quot;</code>语句则表示使用了CGO特性，紧跟在这行语句前面的注释是一种特殊语法，里面包含的是正常的C语言代码。当确保CGO启用的情况下，还可以在当前目录中包含C/C++对应的源文件。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">package main

&#x2F;*
#include &lt;stdio.h&gt;

void printint(int v) &#123;
    printf(&quot;printint: %d\n&quot;, v);
&#125;
*&#x2F;
import &quot;C&quot;

func main() &#123;
    v :&#x3D; 42
    C.printint(C.int(v))
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个例子展示了cgo的基本使用方法。开头的注释中写了要调用的C函数和相关的头文件，头文件被include之后里面的所有的C语言元素都会被加入到”C”这个虚拟的包中。需要注意的是，import “C”导入语句需要单独一行，不能与其他包一同import。向C函数传递参数也很简单，就直接转化成对应C语言类型传递就可以。如上例中<code>C.int(v)</code>用于将一个Go中的int类型值强制类型转换转化为C语言中的int类型值，然后调用C语言定义的printint函数进行打印。</p>
<p>需要注意的是，Go是强类型语言，所以cgo中传递的参数类型必须与声明的类型完全一致，而且传递前必须用”C”中的转化函数转换成对应的C类型，不能直接传入Go中类型的变量。同时通过虚拟的C包导入的C语言符号并不需要是大写字母开头，它们不受Go语言的导出规则约束。</p>
<p>cgo将当前包引用的C语言符号都放到了虚拟的C包中，同时当前包依赖的其它Go语言包内部可能也通过cgo引入了相似的虚拟C包，但是不同的Go语言包引入的虚拟的C包之间的类型是不能通用的。这个约束对于要自己构造一些cgo辅助函数时有可能会造成一点的影响。</p>
<p>比如我们希望在Go中定义一个C语言字符指针对应的CChar类型，然后增加一个GoString方法返回Go语言字符串：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">package cgo_helper

&#x2F;&#x2F;#include &lt;stdio.h&gt;
import &quot;C&quot;

type CChar C.char

func (p *CChar) GoString() string &#123;
    return C.GoString((*C.char)(p))
&#125;

func PrintCString(cs *C.char) &#123;
    C.puts(cs)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>现在我们可能会想在其它的Go语言包中也使用这个辅助函数：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">package main

&#x2F;&#x2F;static const char* cs &#x3D; &quot;hello&quot;;
import &quot;C&quot;
import &quot;.&#x2F;cgo_helper&quot;

func main() &#123;
    cgo_helper.PrintCString(C.cs)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这段代码是不能正常工作的，因为当前main包引入的<code>C.cs</code>变量的类型是当前main包的cgo构造的虚拟的C包下的<em>char类型（具体点是`</em>C.char<code>，更具体点是</code><em>main.C.char<code>），它和cgo_helper包引入的</code></em>C.char<code>类型（具体点是</code><em>cgo_helper.C.char<code>）是不同的。在Go语言中方法是依附于类型存在的，不同Go包中引入的虚拟的C包的类型却是不同的（</code>main.C<code>不等</code>cgo_helper.C<code>），这导致从它们延伸出来的Go类型也是不同的类型（</code></em>main.C.char<code>不等</code>*cgo_helper.C.char`），这最终导致了前面代码不能正常工作。</p>
<p>有Go语言使用经验的用户可能会建议参数转型后再传入。但是这个方法似乎也是不可行的，因为<code>cgo_helper.PrintCString</code>的参数是它自身包引入的<code>*C.char</code>类型，在外部是无法直接获取这个类型的。换言之，一个包如果在公开的接口中直接使用了<code>*C.char</code>等类似的虚拟C包的类型，其它的Go包是无法直接使用这些类型的，除非这个Go包同时也提供了<code>*C.char</code>类型的构造函数。因为这些诸多因素，如果想在go test环境直接测试这些cgo导出的类型也会有相同的限制。</p>
<h3 id="2-2-2-cgo语句"><a href="#2-2-2-cgo语句" class="headerlink" title="2.2.2 #cgo语句"></a>2.2.2 <code>#cgo</code>语句</h3><p>在<code>import &quot;C&quot;</code>语句前的注释中可以通过<code>#cgo</code>语句设置编译阶段和链接阶段的相关参数。编译阶段的参数主要用于定义相关宏和指定头文件检索路径。链接阶段的参数主要是指定库文件检索路径和要链接的库文件。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">&#x2F;&#x2F; #cgo CFLAGS: -DPNG_DEBUG&#x3D;1 -I.&#x2F;include
&#x2F;&#x2F; #cgo LDFLAGS: -L&#x2F;usr&#x2F;local&#x2F;lib -lpng
&#x2F;&#x2F; #include &lt;png.h&gt;
import &quot;C&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的代码中，CFLAGS部分，<code>-D</code>部分定义了宏PNG_DEBUG，值为1；<code>-I</code>定义了头文件包含的检索目录。LDFLAGS部分，<code>-L</code>指定了链接时库文件检索目录，<code>-l</code>指定了链接时需要链接png库。</p>
<p>因为C/C++遗留的问题，C头文件检索目录可以是相对目录，但是库文件检索目录则需要绝对路径。在库文件的检索目录中可以通过<code>$&#123;SRCDIR&#125;</code>变量表示当前包目录的绝对路径：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">&#x2F;&#x2F; #cgo LDFLAGS: -L$&#123;SRCDIR&#125;&#x2F;libs -lfoo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>上面的代码在链接时将被展开为：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">&#x2F;&#x2F; #cgo LDFLAGS: -L&#x2F;go&#x2F;src&#x2F;foo&#x2F;libs -lfoo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><code>#cgo</code>语句主要影响CFLAGS、CPPFLAGS、CXXFLAGS、FFLAGS和LDFLAGS几个编译器环境变量。LDFLAGS用于设置链接时的参数，除此之外的几个变量用于改变编译阶段的构建参数(CFLAGS用于针对C语言代码设置编译参数)。</p>
<p>对于在cgo环境混合使用C和C++的用户来说，可能有三种不同的编译选项：其中CFLAGS对应C语言特有的编译选项、CXXFLAGS对应是C++特有的编译选项、CPPFLAGS则对应C和C++共有的编译选项。但是在链接阶段，C和C++的链接选项是通用的，因此这个时候已经不再有C和C++语言的区别，它们的目标文件的类型是相同的。</p>
<h3 id="2-2-3-build-tag-条件编译"><a href="#2-2-3-build-tag-条件编译" class="headerlink" title="2.2.3 build tag 条件编译"></a>2.2.3 build tag 条件编译</h3><h2 id="2-3-类型转换"><a href="#2-3-类型转换" class="headerlink" title="2.3 类型转换"></a>2.3 类型转换</h2><h3 id="2-3-1-数值类型"><a href="#2-3-1-数值类型" class="headerlink" title="2.3.1 数值类型"></a>2.3.1 数值类型</h3><div class="table-container">
<table>
<thead>
<tr>
<th>C语言类型</th>
<th>CGO类型</th>
<th>Go语言类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>char</td>
<td>C.char</td>
<td>byte</td>
</tr>
<tr>
<td>singed char</td>
<td>C.schar</td>
<td>int8</td>
</tr>
<tr>
<td>unsigned char</td>
<td>C.uchar</td>
<td>uint8</td>
</tr>
<tr>
<td>short</td>
<td>C.short</td>
<td>int16</td>
</tr>
<tr>
<td>unsigned short</td>
<td>C.ushort</td>
<td>uint16</td>
</tr>
<tr>
<td>int</td>
<td>C.int</td>
<td>int32</td>
</tr>
<tr>
<td>unsigned int</td>
<td>C.uint</td>
<td>uint32</td>
</tr>
<tr>
<td>long</td>
<td>C.long</td>
<td>int32</td>
</tr>
<tr>
<td>unsigned long</td>
<td>C.ulong</td>
<td>uint32</td>
</tr>
<tr>
<td>long long int</td>
<td>C.longlong</td>
<td>int64</td>
</tr>
<tr>
<td>unsigned long long int</td>
<td>C.ulonglong</td>
<td>uint64</td>
</tr>
<tr>
<td>float</td>
<td>C.float</td>
<td>float32</td>
</tr>
<tr>
<td>double</td>
<td>C.double</td>
<td>float64</td>
</tr>
<tr>
<td>size_t</td>
<td>C.size_t</td>
<td>uint</td>
</tr>
</tbody>
</table>
</div>
<p>虽然在C语言中<code>int</code>、<code>short</code>等类型没有明确定义内存大小，但是在CGO中它们的内存大小是确定的。在CGO中，C语言的<code>int</code>和<code>long</code>类型都是对应4个字节的内存大小，<code>size_t</code>类型可以当作Go语言<code>uint</code>无符号整数类型对待。</p>
<h2 id="2-11-补充说明"><a href="#2-11-补充说明" class="headerlink" title="2.11 补充说明"></a>2.11 补充说明</h2><p> 为何要话费巨大的精力学习CGO是一个问题。任何技术和语言都有它自身的优点和不足，Go语言不是银弹，它无法解决全部问题。而通过CGO可以继承C/C++将近半个世纪的软件遗产，通过CGO可以用Go给其它系统写C接口的共享库，通过CGO技术可以让Go语言编写的代码可以很好地融入现有的软件生态——而现在的软件正式建立在C/C++语言之上的。因此说CGO是一个保底的后备技术，它是Go的一个重量级的替补技术，值得任何一个严肃的Go语言开发人员学习。</p>
<p><strong>感觉有点偏了，CGO暂时先不学了</strong></p>
<h1 id="第3章-Go汇编语言"><a href="#第3章-Go汇编语言" class="headerlink" title="第3章 Go汇编语言"></a>第3章 Go汇编语言</h1><p>无论高级语言如何发展，作为最接近CPU的汇编语言的地位依然是无法彻底被替代的。只有通过汇编语言才能彻底挖掘CPU芯片的全部功能，因此操作系统的引导过程必须要依赖汇编语言的帮助。只有通过汇编语言才能彻底榨干CPU芯片的性能，因此很多底层的加密解密等对性能敏感的算法会考虑通过汇编语言进行性能优化。</p>
<p><strong>感觉有点偏了，这部分暂时先不学了</strong></p>
<h1 id="第4章-RPC和Protobuf"><a href="#第4章-RPC和Protobuf" class="headerlink" title="第4章 RPC和Protobuf"></a>第4章 RPC和Protobuf</h1><p>RPC是远程过程调用的缩写（Remote Procedure Call），通俗地说就是调用远处的一个函数。因为RPC涉及的函数可能非常之远，远到它们之间说着完全不同的语言，语言就成了两边的沟通障碍。而Protobuf因为支持多种不同的语言（甚至不支持的语言也可以扩展支持），其本身特性也非常方便描述服务的接口（也就是方法列表），因此非常适合作为RPC世界的接口交流语言。本章将讨论RPC的基本用法，如何针对不同场景设计自己的RPC服务，以及围绕Protobuf构造的更为庞大的RPC生态。</p>
<h2 id="4-1-RPC入门"><a href="#4-1-RPC入门" class="headerlink" title="4.1 RPC入门"></a>4.1 RPC入门</h2><p>我们先构造一个HelloService类型，其中的Hello方法用于实现打印功能：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type HelloService struct &#123;&#125;

func (p *HelloService) Hello(request string, reply *string) error &#123;
    *reply &#x3D; &quot;hello:&quot; + request
    return nil
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中Hello方法必须满足Go语言的RPC规则：方法只能有两个可序列化的参数，其中第二个参数是指针类型，并且返回一个error类型，同时必须是公开的方法。</p>
<p>然后就可以将HelloService类型的对象注册为一个RPC服务：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    rpc.RegisterName(&quot;HelloService&quot;, new(HelloService))

    listener, err :&#x3D; net.Listen(&quot;tcp&quot;, &quot;:1234&quot;)
    if err !&#x3D; nil &#123;
        log.Fatal(&quot;ListenTCP error:&quot;, err)
    &#125;

    conn, err :&#x3D; listener.Accept()
    if err !&#x3D; nil &#123;
        log.Fatal(&quot;Accept error:&quot;, err)
    &#125;

    rpc.ServeConn(conn)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中rpc.Register函数调用会将对象类型中所有满足RPC规则的对象方法注册为RPC函数，所有注册的方法会放在“HelloService”服务空间之下。然后我们建立一个唯一的TCP链接，并且通过rpc.ServeConn函数在该TCP链接上为对方提供RPC服务。</p>
<p>下面是客户端请求HelloService服务的代码：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    client, err :&#x3D; rpc.Dial(&quot;tcp&quot;, &quot;localhost:1234&quot;)
    if err !&#x3D; nil &#123;
        log.Fatal(&quot;dialing:&quot;, err)
    &#125;

    var reply string
    err &#x3D; client.Call(&quot;HelloService.Hello&quot;, &quot;hello&quot;, &amp;reply)
    if err !&#x3D; nil &#123;
        log.Fatal(err)
    &#125;

    fmt.Println(reply)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>首选是通过rpc.Dial拨号RPC服务，然后通过client.Call调用具体的RPC方法。在调用client.Call时，第一个参数是用点号链接的RPC服务名字和方法名字，第二和第三个参数分别我们定义RPC方法的两个参数。</p>
<h3 id="4-1-2-更安全的RPC接口"><a href="#4-1-2-更安全的RPC接口" class="headerlink" title="4.1.2 更安全的RPC接口"></a>4.1.2 更安全的RPC接口</h3><p>在涉及RPC的应用中，作为开发人员一般至少有三种角色：首选是服务端实现RPC方法的开发人员，其次是客户端调用RPC方法的人员，最后也是最重要的是制定服务端和客户端RPC接口规范的设计人员。</p>
<p>在前面的例子中我们为了简化将以上几种角色的工作全部放到了一起，虽然看似实现简单，但是不利于后期的维护和工作的切割。</p>
<h2 id="4-2-Protobuf"><a href="#4-2-Protobuf" class="headerlink" title="4.2 Protobuf"></a>4.2 Protobuf</h2><h3 id="4-2-1-Protobuf入门"><a href="#4-2-1-Protobuf入门" class="headerlink" title="4.2.1 Protobuf入门"></a>4.2.1 Protobuf入门</h3><p>对于没有用过Protobuf的读者，建议先从官网了解下基本用法。这里我们尝试将Protobuf和RPC结合在一起使用，通过Protobuf来最终保证RPC的接口规范和安全。Protobuf中最基本的数据单元是message，是类似Go语言中结构体的存在。在message中可以嵌套message或其它的基础数据类型的成员。</p>
<p>首先创建hello.proto文件，其中包装HelloService服务中用到的字符串类型：</p>
<pre class="line-numbers language-protobuf" data-language="protobuf"><code class="language-protobuf">syntax &#x3D; &quot;proto3&quot;;

package main;

message String &#123;
    string value &#x3D; 1;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>开头的syntax语句表示采用proto3的语法。第三版的Protobuf对语言进行了提炼简化，所有成员均采用类似Go语言中的零值初始化（不再支持自定义默认值），因此消息成员也不再需要支持required特性。然后package指令指明当前是main包（这样可以和Go的包名保持一致，简化例子代码），当然用户也可以针对不同的语言定制对应的包路径和名称。最后message关键字定义一个新的String类型，在最终生成的Go语言代码中对应一个String结构体。String类型中只有一个字符串类型的value成员，该成员编码时用1编号代替名字。</p>
<p>在XML或JSON等数据描述语言中，一般通过成员的名字来绑定对应的数据。但是Protobuf编码却是通过成员的唯一编号来绑定对应的数据，因此Protobuf编码后数据的体积会比较小，但是也非常不便于人类查阅。我们目前并不关注Protobuf的编码技术，最终生成的Go结构体可以自由采用JSON或gob等编码格式，因此大家可以暂时忽略Protobuf的成员编码部分。</p>
<p>Protobuf核心的工具集是C++语言开发的，在官方的protoc编译器中并不支持Go语言。要想基于上面的hello.proto文件生成相应的Go代码，需要安装相应的插件。首先是安装官方的protoc工具，可以从 <a href="https://github.com/google/protobuf/releases">https://github.com/google/protobuf/releases</a> 下载。然后是安装针对Go语言的代码生成插件，可以通过<code>go get github.com/golang/protobuf/protoc-gen-go</code>命令安装。</p>
<p><strong>感觉这一章也不是很实用，暂且搁置了</strong></p>
<h1 id="第五章-go-web"><a href="#第五章-go-web" class="headerlink" title="第五章 go web"></a>第五章 go web</h1><h2 id="5-1-web-开发简介"><a href="#5-1-web-开发简介" class="headerlink" title="5.1 web 开发简介"></a>5.1 web 开发简介</h2><p>因为Go的 <code>net/http</code>包提供了基础的路由函数组合与丰富的功能函数。所以在社区里流行一种用Go编写api不需要框架的观点;在我们看来，如果你的项目的路由在个位数、URI 固定且不通过 URI 来传递参数，那么确实使用官方库也就足够。但在复杂场景下，官方的 http 库还是有些力有不逮。例如下面这样的路由：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET   &#x2F;card&#x2F;:id
POST  &#x2F;card&#x2F;:id
DELTE &#x2F;card&#x2F;:id
GET   &#x2F;card&#x2F;:id&#x2F;name
...
GET   &#x2F;card&#x2F;:id&#x2F;relations<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可见是否使用框架还是要具体问题具体分析的。</p>
<p>Go的Web框架大致可以分为这么两类：</p>
<ol>
<li>Router框架</li>
<li>MVC类框架</li>
</ol>
<p>在框架的选择上，大多数情况下都是依照个人的喜好和公司的技术栈。例如公司有很多技术人员是PHP出身，那么他们一定会非常喜欢像beego 这样的框架，但如果公司有很多 C 程序员，那么他们的想法可能是越简单越好。比如很多大厂的 C 程序员甚至可能都会去用 C 去写很小的 CGI 程序，他们可能本身并没有什么意愿去学习MVC或者更复杂的 web 框架，他们需要的只是一个非常简单的路由(甚至连路由都不需要，只需要一个基础的HTTP协议处理库来帮他省掉没什么意思的体力劳动)。</p>
<p>根据我们的经验，简单地来说，只要你的路由带有参数，并且这个项目的 api 数目超过了 10，就尽量不要使用 net/http 中默认的路由。在Go开源界应用最广泛的 router 是 httpRouter，很多开源的 router 框架都是基于 httpRouter 进行一定程度的改造的成果。</p>
<p>再来回顾一下文章开头说的，开源界有这么几种框架，第一种是对 httpRouter 进行简单的封装，然后提供定制的 middleware 和一些简单的小工具集成比如 gin，主打轻量，易学，高性能。第二种是借鉴其它语言的编程风格的一些 MVC 类框架，例如 beego，方便从其它语言迁移过来的程序员快速上手，快速开发。还有一些框架功能更为强大，除了 db 设计，大部分代码直接生成，例如 goa。不管哪种框架，适合开发者背景的就是最好的。</p>
<h2 id="5-2-router-请求路由"><a href="#5-2-router-请求路由" class="headerlink" title="5.2 router 请求路由"></a>5.2 router 请求路由</h2><p>在常见的 web 框架中，router 是必备的组件。golang 圈子里 router 也时常被称为 http 的 multiplexer。在上一节中我们通过对 Burrow 代码的简单学习，已经知道如何用 http 标准库中内置的 mux 来完成简单的路由功能了。如果开发 web 系统对路径中带参数没什么兴趣的话，用 http 标准库中的 mux 就可以。</p>
<p>restful 是几年前刮起的 API 设计风潮，在 restful 中除了 GET 和 POST 之外，还使用了 http 协议定义的几种其它的标准化语义。具体包括：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">const (
    MethodGet     &#x3D; &quot;GET&quot;
    MethodHead    &#x3D; &quot;HEAD&quot;
    MethodPost    &#x3D; &quot;POST&quot;
    MethodPut     &#x3D; &quot;PUT&quot;
    MethodPatch   &#x3D; &quot;PATCH&quot; &#x2F;&#x2F; RFC 5789
    MethodDelete  &#x3D; &quot;DELETE&quot;
    MethodConnect &#x3D; &quot;CONNECT&quot;
    MethodOptions &#x3D; &quot;OPTIONS&quot;
    MethodTrace   &#x3D; &quot;TRACE&quot;
)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  restful 中常见的请求路径：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET &#x2F;repos&#x2F;:owner&#x2F;:repo&#x2F;comments&#x2F;:id&#x2F;reactions

POST &#x2F;projects&#x2F;:project_id&#x2F;columns

PUT &#x2F;user&#x2F;starred&#x2F;:owner&#x2F;:repo

DELETE &#x2F;user&#x2F;starred&#x2F;:owner&#x2F;:repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>相信聪明的你已经猜出来了，这是 github 官方文档中挑出来的几个 api 设计。restful 风格的 API 重度依赖请求路径。会将很多参数放在请求 URI 中。除此之外还会使用很多并不那么常见的 HTTP 状态码，不过本节只讨论路由，所以先略过不谈。</p>
<p>如果我们的系统也想要这样的 URI 设计，使用标准库的 mux 显然就力不从心了。</p>
<h3 id="5-2-1-httprouter"><a href="#5-2-1-httprouter" class="headerlink" title="5.2.1 httprouter"></a>5.2.1 httprouter</h3><p>较流行的开源 golang web 框架大多使用 httprouter，或是基于 httprouter 的变种对路由进行支持。前面提到的 github 的参数式路由在 httprouter 中都是可以支持的。</p>
<p>因为 httprouter 中使用的是显式匹配，所以在设计路由的时候需要规避一些会导致路由冲突的情况，例如：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conflict:
GET &#x2F;user&#x2F;info&#x2F;:name
GET &#x2F;user&#x2F;:id

no conflict:
GET &#x2F;user&#x2F;info&#x2F;:name
POST &#x2F;user&#x2F;:id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>简单来讲的话，如果两个路由拥有一致的 http method (指 GET/POST/PUT/DELETE) 和请求路径前缀，且在某个位置出现了 A 路由是 wildcard (指 :id 这种形式) 参数，B 路由则是普通字符串，那么就会发生路由冲突。路由冲突会在初始化阶段直接 panic：</p>
<p>还有一点需要注意，因为 httprouter 考虑到字典树的深度，在初始化时会对参数的数量进行限制</p>
<p>除支持路径中的 wildcard 参数之外，httprouter 还可以支持 <code>*</code> 号来进行通配，不过 <code>*</code> 号开头的参数只能放在路由的结尾，例如下面这样：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Pattern: &#x2F;src&#x2F;*filepath

 &#x2F;src&#x2F;                     filepath &#x3D; &quot;&quot;
 &#x2F;src&#x2F;somefile.go          filepath &#x3D; &quot;somefile.go&quot;
 &#x2F;src&#x2F;subdir&#x2F;somefile.go   filepath &#x3D; &quot;subdir&#x2F;somefile.go&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这种设计在 restful 中可能不太常见，主要是为了能够使用 httprouter 来做简单的 http 静态文件服务器。</p>
<p>除了正常情况下的路由支持，httprouter 也支持对一些特殊情况下的回调函数进行定制，例如 404 的时候：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">r :&#x3D; httprouter.New()
r.NotFound &#x3D; http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) &#123;
    w.Write([]byte(&quot;oh no, not found&quot;))
&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>或者内部 panic 的时候：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">r.PanicHandler &#x3D; func(w http.ResponseWriter, r *http.Request, c interface&#123;&#125;) &#123;
    log.Printf(&quot;Recovering from panic, Reason: %#v&quot;, c.(error))
    w.WriteHeader(http.StatusInternalServerError)
    w.Write([]byte(c.(error).Error()))
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>目前开源界最为流行(star 数最多)的 web 框架 <a href="https://github.com/gin-gonic/gin">gin</a> 使用的就是 httprouter 的变种。</p>
<h3 id="5-2-2-原理"><a href="#5-2-2-原理" class="headerlink" title="5.2.2 原理"></a>5.2.2 原理</h3><p>httprouter 和众多衍生 router 使用的数据结构被称为 radix tree，压缩字典树。</p>
<p>如果不用字典树来完成上述功能，要对历史字符串进行排序，再利用二分查找之类的算法去搜索，时间复杂度只高不低。可认为字典树是一种空间换时间的典型做法。</p>
<p><img src="https://go.wuhaolin.cn/advanced-go-programming-book/images/ch6-02-radix.png" alt="radix tree"></p>
<h3 id="5-2-3-压缩字典树创建过程"><a href="#5-2-3-压缩字典树创建过程" class="headerlink" title="5.2.3 压缩字典树创建过程"></a>5.2.3 压缩字典树创建过程</h3><p>我们来跟踪一下 httprouter 中，一个典型的压缩字典树的创建过程，路由设定如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PUT &#x2F;user&#x2F;installations&#x2F;:installation_id&#x2F;repositories&#x2F;:repository_id

GET &#x2F;marketplace_listing&#x2F;plans&#x2F;
GET &#x2F;marketplace_listing&#x2F;plans&#x2F;:id&#x2F;accounts
GET &#x2F;search
GET &#x2F;status
GET &#x2F;support

补充路由：
GET &#x2F;marketplace_listing&#x2F;plans&#x2F;ohyes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后一条补充路由是我们臆想的，除此之外所有 API 路由均来自于 api.github.com。</p>
<h4 id="5-2-3-1-root-节点创建"><a href="#5-2-3-1-root-节点创建" class="headerlink" title="5.2.3.1 root 节点创建"></a>5.2.3.1 root 节点创建</h4><p>httprouter 的 Router struct 中存储压缩字典树使用的是下述数据结构</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">&#x2F; 略去了其它部分的 Router struct
type Router struct &#123;
    &#x2F;&#x2F; ...
    trees map[string]*node
    &#x2F;&#x2F; ...
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>trees 中的 key 即为 http 1.1 的 RFC 中定义的各种 method，具体有：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET
HEAD
OPTIONS
POST
PUT
PATCH
DELETE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>每一种 method 对应的都是一棵独立的压缩字典树，这些树彼此之间不共享数据。具体到我们上面用到的路由，PUT 和 GET 是两棵树而非一棵。</p>
<p>简单来讲，某个 method 第一次插入的路由就会导致对应字典树的根节点被创建，我们按顺序，先是一个 PUT：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">r :&#x3D; httprouter.New()
r.PUT(&quot;&#x2F;user&#x2F;installations&#x2F;:installation_id&#x2F;repositories&#x2F;:reposit&quot;, Hello)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>这样 PUT 对应的根节点就会被创建出来。把这棵 PUT 的树画出来： <img src="https://go.wuhaolin.cn/advanced-go-programming-book/images/ch6-02-radix-put.png" alt="put radix tree"></p>
<p>radix 的节点类型为 <code>*httprouter.node</code>，为了说明方便，我们留下了目前关心的几个字段：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">path: 当前节点对应的路径中的字符串

wildChild: 子节点是否为参数节点，即 wildcard node，或者说 :id 这种类型的节点

nType: 当前节点类型，有四个枚举值: 分别为 static&#x2F;root&#x2F;param&#x2F;catchAll。
    static                   &#x2F;&#x2F; 非根节点的普通字符串节点
    root                     &#x2F;&#x2F; 根节点
    param                    &#x2F;&#x2F; 参数节点，例如 :id
    catchAll                 &#x2F;&#x2F; 通配符节点，例如 *anyway

indices: 子节点索引，当子节点为非参数类型，即本节点的 wildChild 为 false 时，会将每个子节点的首字母放在该索引数组。说是数组，实际上是个 string。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当然，PUT 路由只有唯一的一条路径。接下来，我们以后续的多条 GET 路径为例，讲解子节点的插入过程。</p>
<h4 id="5-2-3-2-子节点插入"><a href="#5-2-3-2-子节点插入" class="headerlink" title="5.2.3.2 子节点插入"></a>5.2.3.2 子节点插入</h4><p>当插入 <code>GET /marketplace_listing/plans</code> 时，类似前面 PUT 的过程，GET 树的结构如图所示：</p>
<p><img src="https://go.wuhaolin.cn/advanced-go-programming-book/images/ch6-02-radix-get-1.png" alt="get radix step 1"></p>
<p>因为第一个路由没有参数，path 都被存储到根节点上了。所以只有一个节点。</p>
<p>然后插入 <code>GET /marketplace_listing/plans/:id/accounts</code>，新的路径与之前的路径有共同的前缀，且可以直接在之前叶子节点后进行插入，那么结果也很简单，插入后树变成了这样：</p>
<p><img src="https://go.wuhaolin.cn/advanced-go-programming-book/images/ch6-02-radix-get-2.png" alt="get radix step 2"></p>
<p>由于 <code>:id</code> 这个节点只有一个字符串的普通子节点，所以 indices 还依然不需要处理。</p>
<p>上面这种情况比较简单，新的路由可以直接作为原路由的子节点进行插入。实际情况不会这么美好。</p>
<h4 id="5-2-3-3-边分裂"><a href="#5-2-3-3-边分裂" class="headerlink" title="5.2.3.3 边分裂"></a>5.2.3.3 边分裂</h4><p>我们插入 <code>GET /search</code>，这时会导致树的边分裂。</p>
<p><img src="https://go.wuhaolin.cn/advanced-go-programming-book/images/ch6-02-radix-get-3.png" alt="get radix step 3"></p>
<p>原有路径和新的路径在初始的 <code>/</code> 位置发生分裂，这样需要把原有的 root 节点内容下移，再将新路由 <code>search</code> 同样作为子节点挂在 root 节点之下。这时候因为子节点出现多个，root 节点的 indices 提供子节点索引，这时候该字段就需要派上用场了。”ms” 代表子节点的首字母分别为 m(marketplace) 和 s(search)。</p>
<p>我们一口作气，把 <code>GET /status</code> 和 <code>GET /support</code> 也插入到树中。这时候会导致在 <code>search</code> 节点上再次发生分裂，来看看最终的结果：</p>
<p><img src="https://go.wuhaolin.cn/advanced-go-programming-book/images/ch6-02-radix-get-4.png" alt="get radix step 4"></p>
<h4 id="5-2-3-4-子节点冲突处理"><a href="#5-2-3-4-子节点冲突处理" class="headerlink" title="5.2.3.4 子节点冲突处理"></a>5.2.3.4 子节点冲突处理</h4><p>在路由本身只有字符串的情况下，不会发生任何冲突。只有当路由中含有 wildcard(类似 :id) 或者 catchAll 的情况下才可能冲突。这一点在前面已经提到了。</p>
<p>子节点的冲突处理很简单，分几种情况：</p>
<ol>
<li>在插入 wildcard 节点时，父节点的 children 数组非空且 wildChild 被设置为 false。例如：<code>GET /user/getAll</code> 和 <code>GET /user/:id/getAddr</code>，或者 <code>GET /user/*aaa</code> 和 <code>GET /user/:id</code>。</li>
<li>在插入 wildcard 节点时，父节点的 children 数组非空且 wildChild 被设置为 true，但该父节点的 wildcard 子节点要插入的 wildcard 名字不一样。例如：<code>GET /user/:id/info</code> 和 <code>GET /user/:name/info</code>。</li>
<li>在插入 catchAll 节点时，父节点的 children 非空。例如：<code>GET /src/abc</code> 和 <code>GET /src/*filename</code>，或者 <code>GET /src/:id</code> 和 <code>GET /src/*filename</code>。</li>
<li>在插入 static 节点时，父节点的 wildChild 字段被设置为 true。</li>
<li>在插入 static 节点时，父节点的 children 非空，且子节点 nType 为 catchAll。</li>
</ol>
<p>只要发生冲突，都会在初始化的时候 panic</p>
<h2 id="5-3-middleware-中间件"><a href="#5-3-middleware-中间件" class="headerlink" title="5.3 middleware 中间件"></a>5.3 middleware 中间件</h2><h3 id="5-3-1-代码泥潭"><a href="#5-3-1-代码泥潭" class="headerlink" title="5.3.1 代码泥潭"></a>5.3.1 代码泥潭</h3><h3 id="5-3-2-使用-middleware-剥离非业务逻辑"><a href="#5-3-2-使用-middleware-剥离非业务逻辑" class="headerlink" title="5.3.2 使用 middleware 剥离非业务逻辑"></a>5.3.2 使用 middleware 剥离非业务逻辑</h3><p>实际上，我们犯的最大的错误是把业务代码和非业务代码揉在了一起。对于大多数的场景来讲，非业务的需求都是在 http 请求处理前做一些事情，或者/并且在响应完成之后做一些事情。</p>
<p>我们需要给我们的 helloHandler 增加超时时间统计，我们可以使用一种叫 <code>function adapter</code> 的方法来对 helloHandler 进行包装：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func hello(wr http.ResponseWriter, r *http.Request) &#123;
    wr.Write([]byte(&quot;hello&quot;))
&#125;

func timeMiddleware(next http.Handler) http.Handler &#123;
    return http.HandlerFunc(func(wr http.ResponseWriter, r *http.Request) &#123;
        timeStart :&#x3D; time.Now()

        &#x2F;&#x2F; next handler
        next.ServeHTTP(wr, r)

        timeElapsed :&#x3D; time.Since(timeStart)
        logger.Println(timeElapsed)
    &#125;)
&#125;

func main() &#123;
    http.Handle(&quot;&#x2F;&quot;, timeMiddleware(http.HandlerFunc(hello)))
    err :&#x3D; http.ListenAndServe(&quot;:8080&quot;, nil)
    ...
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样就非常轻松地实现了业务与非业务之间的剥离，魔法就在于这个 timeMiddleware。可以从代码中看到，我们的 timeMiddleware 也是一个函数，其参数为 http.Handler，http.Handler 的定义在 net/http 包中：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type Handler interface &#123;
    ServeHTTP(ResponseWriter, *Request)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><strong>任何方法实现了 ServeHTTP，即是一个合法的 http.Handler，</strong></p>
<p>梳理一下 http 库的 Handler，HandlerFunc 和 ServeHTTP 的关系：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type Handler interface &#123;
    ServeHTTP(ResponseWriter, *Request)
&#125;

type HandlerFunc func(ResponseWriter, *Request)

func (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request)
    f(w, r)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>实际上只要你的 handler 函数签名是：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func (ResponseWriter, *Request)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>那么这个 handler 和 http.HandlerFunc 就有了一致的函数签名，可以将该 handler 函数进行类型转换，转为 http.HandlerFunc。</p>
<p>而 http.HandlerFunc 实现了 http.Handler 这个接口。在 http 库需要调用你的 handler 函数来处理 http 请求时，会调用 HandlerFunc 的 ServeHTTP 函数，可见一个请求的基本调用链是这样的：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">h &#x3D; getHandler() &#x3D;&gt; h.ServeHTTP(w, r) &#x3D;&gt; h(w, r)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>上面提到的把自定义 handler 转换为 http.HandlerFunc 这个过程是必须的，因为我们的 handler 没有直接实现 ServeHTTP 这个接口。上面的代码中我们看到的 HandleFunc(注意 HandlerFunc 和 HandleFunc 的区别)里也可以看到这个强制转换过程：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func HandleFunc(pattern string, handler func(ResponseWriter, *Request)) &#123;
    DefaultServeMux.HandleFunc(pattern, handler)
&#125;

&#x2F;&#x2F; 调用

func (mux *ServeMux) HandleFunc(pattern string, handler func(ResponseWriter, *Request)) &#123;
    mux.Handle(pattern, HandlerFunc(handler))
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>知道 handler 是怎么一回事，我们的中间件通过包装 handler，再返回一个新的 handler 就好理解了。</p>
<p>总结一下，我们的中间件要做的事情就是通过一个或多个函数对 handler 进行包装，返回一个包括了各个中间件逻辑的函数链。我们把上面的包装再做得复杂一些：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">customizedHandler &#x3D; logger(timeout(ratelimit(helloHandler)))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这个函数链在执行过程中的上下文可以用下面这张图来表示。</p>
<p><img src="https://go.wuhaolin.cn/advanced-go-programming-book/images/ch6-03-middleware_flow.png" alt="img"></p>
<p>再直白一些，这个流程在进行请求处理的时候实际上就是不断地进行函数压栈再出栈，有一些类似于递归的执行流：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">[exec of logger logic]           函数栈: []

[exec of timeout logic]          函数栈: [logger]

[exec of ratelimit logic]        函数栈: [timeout&#x2F;logger]

[exec of helloHandler logic]     函数栈: [ratelimit&#x2F;timeout&#x2F;logger]

[exec of ratelimit logic part2]  函数栈: [timeout&#x2F;logger]

[exec of timeout logic part2]    函数栈: [logger]

[exec of logger logic part2]     函数栈: []<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>功能实现了，但在上面的使用过程中我们也看到了，这种函数套函数的用法不是很美观，同时也不具备什么可读性。</p>
<h3 id="5-3-3-更优雅的-middleware-写法"><a href="#5-3-3-更优雅的-middleware-写法" class="headerlink" title="5.3.3 更优雅的 middleware 写法"></a>5.3.3 更优雅的 middleware 写法</h3><p>如果需要修改这些函数的顺序，或者增删 middleware 还是有点费劲，</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">r &#x3D; NewRouter()
r.Use(logger)
r.Use(timeout)
r.Use(ratelimit)
r.Add(&quot;&#x2F;&quot;, helloHandler)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果我们要增加或者删除 middleware，只要简单地增加删除对应的 Use 调用就可以了。非常方便。</p>
<p>从框架的角度来讲，怎么实现这样的功能呢？也不复杂：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type middleware func(http.Handler) http.Handler

type Router struct &#123;
    middlewareChain [] func(http.Handler) http.Handler
    mux map[string] http.Handler
&#125;

func NewRouter() *Router&#123;
    return &amp;Router&#123;&#125;
&#125;

func (r *Router) Use(m middleware) &#123;
    r.middlewareChain &#x3D; append(r.middlewareChain, m)
&#125;

func (r *Router) Add(route string, h http.Handler) &#123;
    var mergedHandler &#x3D; h

    for i :&#x3D; len(r.middlewareChain) - 1; i &gt;&#x3D; 0; i-- &#123;
        mergedHandler &#x3D; r.middlewareChain[i](mergedHandler)
    &#125;

    r.mux[route] &#x3D; mergedHandler
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><em>注意代码中的 middleware 数组遍历顺序，和用户希望的调用顺序应该是”相反”的</em>。应该不难理解。</p>
<h3 id="5-3-4-哪些事情适合在-middleware-中做"><a href="#5-3-4-哪些事情适合在-middleware-中做" class="headerlink" title="5.3.4 哪些事情适合在 middleware 中做"></a>5.3.4 哪些事情适合在 middleware 中做</h3><p>比如开源界很火的 gin 这个框架，就专门为用户贡献的 middleware 开了一个仓库：</p>
<p>如果读者去阅读 gin 的源码的话，可能会发现 gin 的 middleware 中处理的并不是 http.Handler，而是一个叫 gin.HandlerFunc 的函数类型，和本节中讲解的 http.Handler 签名并不一样。不过实际上 gin 的 handler 也只是针对其框架的一种封装，middleware 的原理与本节中的说明是一致的。</p>
<h2 id="5-4-validator-请求校验"><a href="#5-4-validator-请求校验" class="headerlink" title="5.4 validator 请求校验"></a>5.4 validator 请求校验</h2><h3 id="5-4-1-重构请求校验函数"><a href="#5-4-1-重构请求校验函数" class="headerlink" title="5.4.1 重构请求校验函数"></a>5.4.1 重构请求校验函数</h3><p>假设我们的数据已经通过某个 binding 库绑定到了具体的 struct 上。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type RegisterReq struct &#123;
    Username        string   &#96;json:&quot;username&quot;&#96;
    PasswordNew     string   &#96;json:&quot;password_new&quot;&#96;
    PasswordRepeat  string   &#96;json:&quot;password_repeat&quot;&#96;
    Email           string   &#96;json:&quot;email&quot;&#96;
&#125;

func register(req RegisterReq) error&#123;
    if len(req.Username) &gt; 0 &#123;
        if len(req.PasswordNew) &gt; 0 &amp;&amp; len(req.PasswordRepeat) &gt; 0 &#123;
            if req.PasswordNew &#x3D;&#x3D; req.PasswordRepeat &#123;
                if emailFormatValid(req.Email) &#123;
                    createUser()
                    return nil
                &#125; else &#123;
                    return errors.New(&quot;invalid email&quot;)
                &#125;
            &#125; else &#123;
                return errors.New(&quot;password and reinput must be the same&quot;)
            &#125;
        &#125; else &#123;
            return errors.New(&quot;password and password reinput must be longer than 0&quot;)
        &#125;
    &#125; else &#123;
        return errors.New(&quot;length of username cannot be 0&quot;)
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们在 golang 里成功写出了 hadoken 开路的箭头型代码。。这种代码一般怎么进行优化呢？</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"> if len(req.Username) &#x3D;&#x3D; 0 &#123;
        return errors.New(&quot;length of username cannot be 0&quot;)
    &#125;

    if len(req.PasswordNew) &#x3D;&#x3D; 0 || len(req.PasswordRepeat) &#x3D;&#x3D; 0 &#123;
        return errors.New(&quot;password and password reinput must be longer than 0&quot;)
    &#125;

    if req.PasswordNew !&#x3D; req.PasswordRepeat &#123;
        return errors.New(&quot;password and reinput must be the same&quot;)
    &#125;

    if emailFormatValid(req.Email) &#123;
        return errors.New(&quot;invalid email&quot;)
    &#125;

    createUser()
    return nil
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>虽然使用了重构方法使我们的 validate 过程看起来优雅了，但我们还是得为每一个 http 请求都去写这么一套差不多的 validate 函数，有没有更好的办法来帮助我们解除这项体力劳动？答案就是 validator。</p>
<h3 id="5-4-2-用-validator-解放体力劳动"><a href="#5-4-2-用-validator-解放体力劳动" class="headerlink" title="5.4.2 用 validator 解放体力劳动"></a>5.4.2 用 validator 解放体力劳动</h3><p>从设计的角度讲，我们一定会为每个请求都声明一个 struct。前文中提到的校验场景我们都可以通过 validator 完成工作。还以前文中的 struct 为例。为了美观起见，我们先把 json tag 省略掉。</p>
<p>这里我们引入一个新的 validator 库：</p>
<blockquote>
<p><a href="https://github.com/go-playground/validator">https://github.com/go-playground/validator</a></p>
</blockquote>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">import &quot;gopkg.in&#x2F;go-playground&#x2F;validator.v9&quot;

type RegisterReq struct &#123;
    &#x2F;&#x2F; 字符串的 gt&#x3D;0 表示长度必须 &gt; 0，gt &#x3D; greater than
    Username        string   &#96;validate:&quot;gt&#x3D;0&quot;&#96;
    &#x2F;&#x2F; 同上
    PasswordNew     string   &#96;validate:&quot;gt&#x3D;0&quot;&#96;
    &#x2F;&#x2F; eqfield 跨字段相等校验
    PasswordRepeat  string   &#96;validate:&quot;eqfield&#x3D;PasswordNew&quot;&#96;
    &#x2F;&#x2F; 合法 email 格式校验
    Email           string   &#96;validate:&quot;email&quot;&#96;
&#125;

func validate(req RegisterReq) error &#123;
    err :&#x3D; validate.Struct(mystruct)
    if err !&#x3D; nil &#123;
        doSomething()
    &#125;
    ...
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样就不需要在每个请求进入业务逻辑之前都写重复的 validate 函数了。本例中只列出了这个 validator 非常简单的几个功能。</p>
<p>我们试着跑一下这个程序，输入参数设置为：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">&#x2F;&#x2F;...

var req &#x3D; RegisterReq &#123;
    Username       : &quot;Xargin&quot;,
    PasswordNew    : &quot;ohno&quot;,
    PasswordRepeat : &quot;ohn&quot;,
    Email          : &quot;alex@abc.com&quot;,
&#125;

err :&#x3D; validate.Struct(mystruct)
fmt.Println(err) &#x2F;&#x2F; Key: &#39;RegisterReq.PasswordRepeat&#39; Error:Field validation for &#39;PasswordRepeat&#39; failed on the &#39;eqfield&#39; tag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果觉得这个 validator 提供的错误信息不够人性化，例如要把错误信息返回给用户，那就不应该直接显示英文了。可以针对每种 tag 进行错误信息定制，读者可以自行探索。</p>
<h3 id="5-4-3-原理"><a href="#5-4-3-原理" class="headerlink" title="5.4.3 原理"></a>5.4.3 原理</h3><p>从结构上来看，每一个 struct 都可以看成是一棵树。假如我们有如下定义的 struct：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type Nested struct &#123;
    Email string &#96;validate:&quot;email&quot;&#96;
&#125;
type T struct &#123;
    Age    int &#96;validate:&quot;eq&#x3D;10&quot;&#96;
    Nested Nested
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>从字段校验的需求来讲，无论我们采用深度优先搜索还是广度优先搜索来对这棵 struct 树来进行遍历，都是可以的。</p>
<p>有心的读者这时候可能会产生一个问题，我们对 struct 进行 validate 时大量使用了 reflect，而 go 的 reflect 在性能上不太出众，有时甚至会影响到我们程序的性能。这样的考虑确实有一些道理，但需要对 struct 进行大量校验的场景往往出现在 web 服务，这里并不一定是程序的性能瓶颈所在，实际的效果还是要从 pprof 中做更精确的判断。</p>
<p>如果基于反射的 validator 真的成为了你服务的性能瓶颈怎么办？现在也有一种思路可以避免反射：使用 golang 内置的 parser 对源代码进行扫描，然后根据 struct 的定义生成校验代码。我们可以将所有需要校验的结构体放在单独的 package 内。 </p>
<h2 id="5-5-Database-和数据库打交道"><a href="#5-5-Database-和数据库打交道" class="headerlink" title="5.5 Database 和数据库打交道"></a>5.5 Database 和数据库打交道</h2><p>本节将对 db/sql 官方标准库作一些简单分析，并介绍一些应用比较广泛的开源 ORM 和 sql builder。并从企业级应用开发和公司架构的角度来分析哪种技术栈对于现代的企业级应用更为合适。</p>
<h3 id="5-5-1-从-database-sql-讲起"><a href="#5-5-1-从-database-sql-讲起" class="headerlink" title="5.5.1 从 database/sql 讲起"></a>5.5.1 从 database/sql 讲起</h3><p>Go官方提供了 <code>database/sql</code> 包来给用户进行和数据库打交道的工作，实际上 <code>database/sql</code> 库就只是提供了一套操作数据库的接口和规范，例如抽象好的 sql 预处理(prepare)，连接池管理，数据绑定，事务，错误处理等等。官方并没有提供具体某种数据库实现的协议支持。</p>
<p>和具体的数据库，例如 MySQL 打交道，还需要再引入 MySQL 的驱动，像下面这样：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">import &quot;database&#x2F;sql&quot;
import _ &quot;github.com&#x2F;go-sql-driver&#x2F;mysql&quot;

db, err :&#x3D; sql.Open(&quot;mysql&quot;, &quot;user:password@&#x2F;dbname&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">import _ &quot;github.com&#x2F;go-sql-driver&#x2F;mysql&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这一句 import，实际上是调用了 mysql 包的 init 函数，做的事情也很简单：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func init() &#123;
    sql.Register(&quot;mysql&quot;, &amp;MySQLDriver&#123;&#125;)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>在 sql 包的 全局 map 里把 mysql 这个名字的 driver 注册上。实际上 Driver 在 sql 包中是一个 interface：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type Driver interface &#123;
    Open(name string) (Conn, error)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>调用 sql.Open() 返回的 db 对象实际上就是这里的 Conn。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type Conn interface &#123;
    Prepare(query string) (Stmt, error)
    Close() error
    Begin() (Tx, error)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>也是一个接口。实际上如果你仔细地查看 database/sql/driver/driver.go 的代码会发现，这个文件里所有的成员全都是 interface，对这些类型进行操作，实际上还是会调用具体的 driver 里的方法。</p>
<p>从用户的角度来讲，在使用 database/sql 包的过程中，你能够使用的也就是这些 interface 里提供的函数</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">package main

import (
    &quot;database&#x2F;sql&quot;
    _ &quot;github.com&#x2F;go-sql-driver&#x2F;mysql&quot;
)

func main() &#123;
    &#x2F;&#x2F; db 是一个 sql.DB 类型的对象
    &#x2F;&#x2F; 该对象线程安全，且内部已包含了一个连接池
    &#x2F;&#x2F; 连接池的选项可以在 sql.Open 中设置，这里为了简单省略了
    db, err :&#x3D; sql.Open(&quot;mysql&quot;,
        &quot;user:password@tcp(127.0.0.1:3306)&#x2F;hello&quot;)
    if err !&#x3D; nil &#123;
        log.Fatal(err)
    &#125;
    defer db.Close()

    var (
        id int
        name string
    )
    rows, err :&#x3D; db.Query(&quot;select id, name from users where id &#x3D; ?&quot;, 1)
    if err !&#x3D; nil &#123;
        log.Fatal(err)
    &#125;

    defer rows.Close()

    &#x2F;&#x2F; 必须要把 rows 里的内容读完，否则连接永远不会释放
    for rows.Next() &#123;
        err :&#x3D; rows.Scan(&amp;id, &amp;name)
        if err !&#x3D; nil &#123;
            log.Fatal(err)
        &#125;
        log.Println(id, name)
    &#125;

    err &#x3D; rows.Err()
    if err !&#x3D; nil &#123;
        log.Fatal(err)
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>官方的 db 库提供的功能这么简单，我们每次去数据库里读取内容岂不是都要去写这么一套差不多的代码？或者如果我们的对象是 struct，把 sql.Rows 绑定到对象的工作就会变得更加得重复而无聊。</p>
<p>是的，所以社区才会有各种各样的 sql builder 和 orm 百花齐放。</p>
<h3 id="5-5-2-提高生产效率的-ORM-和-SQL-Builder"><a href="#5-5-2-提高生产效率的-ORM-和-SQL-Builder" class="headerlink" title="5.5.2 提高生产效率的 ORM 和 SQL Builder"></a>5.5.2 提高生产效率的 ORM 和 SQL Builder</h3><p>在 web 开发领域常常提到的 ORM 是什么？我们先看看万能的维基百科：</p>
<blockquote>
<p>对象关系映射（英语：Object Relational Mapping，简称ORM，或O/RM，或O/R mapping），是一种程序设计技术，用于实现面向对象编程语言里不同类型系统的数据之间的转换。<br>从效果上说，它其实是创建了一个可在编程语言里使用的“虚拟对象数据库”。</p>
</blockquote>
<p>最为常见的 ORM 实际上做的是从 db -&gt; 程序的 class / struct 这样的映射。所以你手边的程序可能是从 mysql 的表 -&gt; 你的程序内 class。 </p>
<p>ORM 的目的就是屏蔽掉DB层，实际上很多语言的 ORM 只要把你的 class/struct 定义好，再用特定的语法将结构体之间的一对一或者一对多关系表达出来。</p>
<p>举个例子，我们有个需求：向用户展示最新的商品列表，我们再假设，商品和商家是1:1的关联关系，我们就很容易写出像下面这样的代码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"># 伪代码
shopList :&#x3D; []
for product in productList &#123;
    shopList &#x3D; append(shopList, product.GetShop)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当然了，我们不能批判这样写代码的程序员是偷懒的程序员。因为ORM 一类的工具在出发点上就是屏蔽 sql，让我们对数据库的操作更接近于人类的思维方式。这样很多只接触过 orm 而且又是刚入行的程序员就很容易写出上面这样的代码。</p>
<p>这样的代码将对数据库的读请求放大了 N 倍。也就是说，如果你的商品列表有 15 个 SKU，那么每次用户打开这个页面，至少需要执行 1(查询商品列表) + 15(查询相关的商铺信息) 次查询。这里 N 是 16。如果你的列表页很大，比如说有 600 个条目，那么你就至少要执行 1 + 600 次查询。如果说你的数据库能够承受的最大的简单查询是12w QPS，而上述这样的查询正好是你最常用的查询的话，实际上你能对外提供的服务能力是多少呢？是 200 qps！互联网系统的忌讳之一，就是这种无端的读放大。</p>
<p>当然，你也可以说这不是 ORM 的问题，如果你手写 sql 你还是可能会写出差不多的程序，那么再来看两个 demo：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">o :&#x3D; orm.NewOrm()
num, err :&#x3D; o.QueryTable(&quot;cardgroup&quot;).Filter(&quot;Cards__Card__Name&quot;, cardName).All(&amp;cardgroups)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>很多 orm 都提供了这种 Filter 类型的查询方式，beego 也不例外。不过实际上在这段 orm 背后隐藏了非常难以察觉的细节，那就是生成的 sql 语句会自动 limit 1000。</p>
<p>一个程序库背地里做的事情还是越少越好，如果一定要做，那也一定要在显眼的地方做。比如上面的例子，去掉这种默认的自作聪明的行为，或者要求用户强制传入 limit 参数都是更好的选择</p>
<p>orm 想从设计上隐去太多的细节。而方便的代价是其背后的运行完全失控。这样的项目在经过几任维护人员之后，将变得面目全非，难以维护。上了规模的公司的人们渐渐达成了一个共识，由于隐藏重要的细节，ORM 可能是失败的设计。其所隐藏的重要细节对于上了规模的系统开发来说至关重要。</p>
<p>相比 ORM 来说，sql builder 在 sql 和项目可维护性之间取得了比较好的平衡。首先 sql builer 不像 ORM 那样屏蔽了过多的细节，其次从开发的角度来讲，sql builder 简单进行封装后也可以非常高效地完成开发，举个例子：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">where :&#x3D; map[string]interface&#123;&#125; &#123;
    &quot;order_id &gt; ?&quot; : 0,
    &quot;customer_id !&#x3D; ?&quot; : 0,
&#125;
limit :&#x3D; []int&#123;0,100&#125;
orderBy :&#x3D; []string&#123;&quot;id asc&quot;, &quot;create_time desc&quot;&#125;

orders :&#x3D; orderModel.GetList(where, limit, orderBy)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>说白了 sql builder 是 sql 在代码里的一种特殊方言，如果你们没有DBA(A <em>database</em> administrator )但研发有自己分析和优化 sql 的能力，或者你们公司的 dba 对于学习这样一些 sql 的方言没有异议。那么使用 sql builder 是一个比较好的选择，不会导致什么问题。</p>
<p>在一些本来也不需要DBA介入的场景内，使用 sql builder 也是可以的，例如你要做一套运维系统，且将 mysql 当作了系统中的一个组件，系统的 QPS 不高，查询不复杂等等。</p>
<p>一旦你做的是高并发的 OLTP 在线系统，且想在人员充足分工明确的前提下最大程度控制系统的风险，使用 sql builder 就不合适了。</p>
<h3 id="5-5-3-脆弱的-db"><a href="#5-5-3-脆弱的-db" class="headerlink" title="5.5.3 脆弱的 db"></a>5.5.3 脆弱的 db</h3><p>无论是 ORM 还是 sql builder 都有一个致命的缺点，就是没有办法进行系统上线的事前 sql 审核。虽然很多 orm 和 sql builder 也提供了运行期打印 sql 的功能，但只在查询的时候才能进行输出。而 sql builder 和 ORM本身提供的功能太过灵活。使得你不可能通过测试枚举出所有可能在线上执行的 sql。</p>
<p>对于现在 7 * 24 服务的互联网公司来说，服务不可用是非常重大的问题。存储层的技术栈虽经历了多年的发展，在整个系统中依然是最为脆弱的一环。系统宕机对于 24 小时对外提供服务的公司来说，意味着直接的经济损失。个中风险不可忽视。</p>
<p>所以现如今，大型的互联网公司核心线上业务都会在代码中把 sql 放在显眼的位置提供给 DBA review，以此来控制系统在数据层的风险。结合Go 举一个例子：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">const (
    getAllByProductIDAndCustomerID &#x3D; &#96;select * from p_orders where product_id in (:product_id) and customer_id&#x3D;:customer_id&#96;
)

&#x2F;&#x2F; GetAllByProductIDAndCustomerID
&#x2F;&#x2F; @param driver_id
&#x2F;&#x2F; @param rate_date
&#x2F;&#x2F; @return []Order, error
func GetAllByProductIDAndCustomerID(ctx context.Context, productIDs []uint64, customerID uint64) ([]Order, error) &#123;
    var orderList []Order

    params :&#x3D; map[string]interface&#123;&#125;&#123;
        &quot;product_id&quot; : productIDs,
        &quot;customer_id&quot;: customerID,
    &#125;

    &#x2F;&#x2F; getAllByProductIDAndCustomerID 是 const 类型的 sql 字符串
    sql, args, err :&#x3D; sqlutil.Named(getAllByProductIDAndCustomerID, params)
    if err !&#x3D; nil &#123;
        return nil, err
    &#125;

    err &#x3D; dao.QueryList(ctx, sqldbInstance, sql, args, &amp;orderList)
    if err !&#x3D; nil &#123;
        return nil, err
    &#125;

    return orderList, err
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>像这样的代码，在上线之前把DAO层的变更集的 const 部分直接拿给 dba 来进行审核，就比较方便了。代码中的 sqlutil.Named 是类似于 sqlx 中的 Named 函数，同时支持 where 表达式中的比较操作符和 in。</p>
<h2 id="5-6-Ratelimit-服务流量限制"><a href="#5-6-Ratelimit-服务流量限制" class="headerlink" title="5.6 Ratelimit 服务流量限制"></a>5.6 Ratelimit 服务流量限制</h2><p>计算机程序可依据其瓶颈分为 Disk IO-bound，CPU-bound，Network-bound，分布式场景下有时候也会外部系统而导致自身瓶颈</p>
<p>web 系统打交道最多的是网络，无论是接收，解析用户请求，访问存储，还是把响应数据返回给用户，都是要走网络的。在没有 epoll/kqueue 之类的系统提供的 IO 多路复用接口之前，多个核心的现代计算机最头痛的是 C10k 问题，C10k 问题会导致计算机没有办法充分利用 CPU 来处理更多的用户连接，进而没有办法通过优化程序提升 CPU 利用率来处理更多的请求。</p>
<p>自从 linux 实现了 epoll，freebsd 实现了 kqueue，这个问题基本解决了，我们可以借助内核提供的 API 轻松解决当年的 C10k 问题，也就是说如今如果你的程序主要是和网络打交道，那么瓶颈一定在用户程序而不在操作系统内核。</p>
<p>随着时代的发展，编程语言对这些系统调用又进一步进行了封装，如今做应用层开发，几乎不会在程序中看到 epoll 之类的字眼，大多数时候我们就只要聚焦在业务逻辑上就好。Go 的 net 库针对不同平台封装了不同的 syscall API，http 库又是构建在 net 库之上，所以在 Go 我们可以借助标准库，很轻松地写出高性能的 http 服务，下面是一个简单的 <code>hello world</code> 服务的代码：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">package main

import (
    &quot;io&quot;
    &quot;log&quot;
    &quot;net&#x2F;http&quot;
)

func sayhello(wr http.ResponseWriter, r *http.Request) &#123;
    wr.WriteHeader(200)
    io.WriteString(wr, &quot;hello world&quot;)
&#125;

func main() &#123;
    http.HandleFunc(&quot;&#x2F;&quot;, sayhello)
    err :&#x3D; http.ListenAndServe(&quot;:9090&quot;, nil)
    if err !&#x3D; nil &#123;
        log.Fatal(&quot;ListenAndServe:&quot;, err)
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们需要衡量一下这个 web 服务的吞吐量，再具体一些，实际上就是接口的 QPS（Queries Per Second) 是每秒查询率。借助 wrk，在家用电脑 Macbook Pro 上对这个 <code>hello world</code> 服务进行基准测试， </p>
<p>这里的 <code>hello world</code> 服务没有任何业务逻辑。真实环境的程序要复杂得多，有些程序偏 Network-bound，例如一些 cdn 服务、proxy 服务；有些程序偏 CPU/GPU bound，例如登陆校验服务、图像处理服务；有些程序偏 Disk IO-bound，例如专门的存储系统，数据库。不同的程序瓶颈会体现在不同的地方，这里提到的这些功能单一的服务相对来说还算容易分析。如果碰到业务逻辑复杂代码量巨大的模块，其瓶颈并不是三下五除二可以推测出来的，还是需要从压力测试中得到更为精确的结论。</p>
<p>对于 IO/Network bound 类的程序，其表现是网卡/磁盘 IO 会先于 CPU 打满，这种情况即使优化 CPU 的使用也不能提高整个系统的吞吐量，只能提高磁盘的读写速度，增加内存大小，提升网卡的带宽来提升整体性能。而 CPU bound 类的程序，则是在存储和网卡未打满之前 CPU 占用率提前到达 100%，CPU 忙于各种计算任务，IO 设备相对则较闲。</p>
<p>无论哪种类型的服务，在资源使用到极限的时候都会导致请求堆积，超时，系统 hang 死，最终伤害到终端用户。对于分布式的 web 服务来说，瓶颈还不一定总在系统内部，也有可能在外部。非计算密集型的系统往往会在关系型数据库环节失守，而这时候 web 模块本身还远远未达到瓶颈。</p>
<p>不管我们的服务瓶颈在哪里，最终要做的事情都是一样的，那就是流量限制</p>
<h3 id="5-6-1-常见的流量限制手段"><a href="#5-6-1-常见的流量限制手段" class="headerlink" title="5.6.1 常见的流量限制手段"></a>5.6.1 常见的流量限制手段</h3><p>流量限制的手段有很多，最常见的：漏桶、令牌桶两种：</p>
<ol>
<li>漏桶是指我们有一个一直装满了水的桶，每过固定的一段时间即向外漏一滴水。如果你接到了这滴水，那么你就可以继续服务请求，如果没有接到，那么就需要等待下一滴水。</li>
<li>令牌桶则是指匀速向桶中添加令牌，服务请求时需要从桶中获取令牌，令牌的数目可以按照需要消耗的资源进行相应的调整。如果没有令牌，可以选择等待，或者放弃。</li>
</ol>
<p>这两种方法看起来很像，不过还是有区别的。漏桶流出的速率固定，而令牌桶只要在桶中有令牌，那就可以拿。也就是说令牌桶是允许一定程度的并发的，令牌桶在桶中没有令牌的情况下也会退化为漏桶模型。</p>
<p>实际应用中令牌桶应用较为广泛，开源界流行的限流器大多数都是基于令牌桶思想的。并且在此基础上进行了一定程度的扩充，比如 <code>github.com/juju/ratelimit</code> 提供了几种不同特色的令牌桶填充方式：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func NewBucket(fillInterval time.Duration, capacity int64) *Bucket<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>默认的令牌桶，fillInterval 指每过多长时间向桶里放一个令牌，capacity 是桶的容量，超过桶容量的部分会被直接丢弃。桶初始是满的。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func NewBucketWithQuantum(fillInterval time.Duration, capacity, quantum int64) *Bucket<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>和普通的 NewBucket 的区别是，每次向桶中放令牌时，是放 quantum 个令牌，而不是一个令牌。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func NewBucketWithRate(rate float64, capacity int64) *Bucket<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这个就有点特殊了，会按照提供的比例，每秒钟填充令牌数。例如 capacity 是 100，而 rate 是 0.1，那么每秒会填充 10 个令牌。</p>
<p>相比于开源界更为有名的 google 的 Java 工具库 Guava 中提供的 ratelimiter，这个库不支持令牌桶预热，且无法修改初始的令牌容量，所以可能个别极端情况下的需求无法满足。但在明白令牌桶的基本原理之后，如果没办法满足需求，相信你也可以很快对其进行修改并支持自己的业务场景。</p>
<h3 id="5-6-2-原理"><a href="#5-6-2-原理" class="headerlink" title="5.6.2 原理"></a>5.6.2 原理</h3><p>从功能上来看，令牌桶模型实际上就是对全局计数的加减法操作过程，但使用计数需要我们自己加读写锁，有小小的思想负担。如果我们对 Go 语言已经比较熟悉的话，很容易想到可以用 buffered channel 来完成简单的加令牌取令牌操作：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var tokenBucket &#x3D; make(chan struct&#123;&#125;, capacity)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>每过一段时间向 tokenBucket 中添加 token，如果 bucket 已经满了，那么直接放弃：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">illToken :&#x3D; func() &#123;
    ticker :&#x3D; time.NewTicker(fillInterval)
    for &#123;
        select &#123;
        case &lt;-ticker.C:
            select &#123;
            case tokenBucket &lt;- struct&#123;&#125;&#123;&#125;:
            default:
            &#125;
            fmt.Println(&quot;current token cnt:&quot;, len(tokenBucket), time.Now())
        &#125;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的令牌桶的取令牌操作实现起来也比较简单，简化问题，我们这里只取一个令牌：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func TakeAvailable(block bool) bool&#123;
    var takenResult bool
    if block &#123;
        select &#123;
        case &lt;-tokenBucket:
            takenResult &#x3D; true
        &#125;
    &#125; else &#123;
        select &#123;
        case &lt;-tokenBucket:
            takenResult &#x3D; true
        default:
            takenResult &#x3D; false
        &#125;
    &#125;

    return takenResult
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>一些公司自己造的限流的轮子就是用上面这种方式来实现的，不过如果开源版 ratelimit 也如此的话，那我们也没什么可说的了。现实并不是这样的。</p>
<p>我们来思考一下，令牌桶每隔一段固定的时间向桶中放令牌，如果我们记下上一次放令牌的时间为 t1，和当时的令牌数 k1，放令牌的时间间隔为 ti，每次向令牌桶中放 x 个令牌，令牌桶容量为 cap。现在如果有人来调用 <code>TakeAvailable</code> 来取 n 个令牌，我们将这个时刻记为 t2。在 t2 时刻，令牌桶中理论上应该有多少令牌呢？伪代码如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">cur &#x3D; k1 + ((t2 - t1)&#x2F;ti) * x
cur &#x3D; cur &gt; cap ? cap : cur<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>我们用两个时间点的时间差，再结合其它的参数，理论上在取令牌之前就完全可以知道桶里有多少令牌了。那劳心费力地像本小节前面向 channel 里填充 token 的操作，理论上是没有必要的。只要在每次 <code>Take</code> 的时候，再对令牌桶中的 token 数进行简单计算，就可以得到正确的令牌数。是不是很像 <code>惰性求值</code> 的感觉？</p>
<p>在得到正确的令牌数之后，再进行实际的 Take 操作就好，这个 Take 操作只需要对令牌数进行简单的减法即可，记得加锁以保证并发安全。<code>github.com/juju/ratelimit</code> 这个库就是这样做的。</p>
<h3 id="5-6-3-服务瓶颈和-QoS"><a href="#5-6-3-服务瓶颈和-QoS" class="headerlink" title="5.6.3 服务瓶颈和 QoS"></a>5.6.3 服务瓶颈和 QoS</h3><p>前面我们说了很多 CPU-bound、IO-bound 之类的概念，这种性能瓶颈从大多数公司都有的监控系统中可以比较快速地定位出来，如果一个系统遇到了性能问题，那监控图的反应一般都是最快的。</p>
<p>虽然性能指标很重要，但对用户提供服务时还应考虑服务整体的 QoS。QoS 全称是 Quality of Service，顾名思义是服务质量。QoS 包含有可用性、吞吐量、时延、时延变化和丢失等指标。一般来讲我们可以通过优化系统，来提高 web 服务的 CPU 利用率，从而提高整个系统的吞吐量。但吞吐量提高的同时，用户体验是有可能变差的。用户角度比较敏感的除了可用性之外，还有时延。虽然你的系统吞吐量高，但半天刷不开页面，想必会造成大量的用户流失。</p>
<p>所以在大公司的 web 服务性能指标中，除了平均响应时延之外，还会把响应时间的 95 分位，99 分位也拿出来作为性能标准。平均响应在提高 CPU 利用率没受到太大影响时，可能 95 分位、 99 分位的响应时间大幅度攀升了，那么这时候就要考虑提高这些 CPU 利用率所付出的代价是否值得了。</p>
<p>在线系统的机器一般都会保持 CPU 有一定的余裕。</p>
<h3 id="5-7-layout-常见大型-web-项目分层"><a href="#5-7-layout-常见大型-web-项目分层" class="headerlink" title="5.7 layout 常见大型 web 项目分层"></a>5.7 layout 常见大型 web 项目分层</h3><p>流行的 web 框架大多数是 MVC 框架，</p>
<ol>
<li>控制器（Controller）- 负责转发请求，对请求进行处理。</li>
<li>视图（View） - 界面设计人员进行图形界面设计。</li>
<li>模型（Model） - 程序员编写程序应有的功能（实现算法等等）、数据库专家进行数据管理和数据库设计(可以实现具体的功能)。</li>
</ol>
<p>随着时代的发展，前端也变成了越来越复杂的工程，为了更好地工程化，现在更为流行的一般是前后分离的架构。可以认为前后分离是把 V 层从 MVC 中抽离单独成为项目。这样一个后端项目一般就只剩下 M 和 C 层了。前后端之间通过 ajax 来交互，有时候要解决跨域的问题，但也已经有了较为成熟的方案。下面是一个前后分离的系统的简易交互图。</p>
<p><img src="https://go.wuhaolin.cn/advanced-go-programming-book/images/ch6-08-frontend-backend.png" alt="前后分离"></p>
<p>事实上，即使是简单的项目，业界也并没有完全遵守 MVC 框架提出者对于 M 和 C 所定义的分工。有很多公司的项目会在 controller 层塞入大量的逻辑，在 model 层就只管理数据的存储。这往往来源于对于 model 层字面含义的某种擅自引申理解。认为字面意思，这一层就是处理某种建模，而模型是什么？就是数据呗！</p>
<p>这种理解显然是有问题的，业务流程也算是一种“模型”，是对真实世界用户行为或者既有流程的一种建模，并非只有按格式组织的数据才能叫模型。不过按照 MVC 的创始人的想法，我们如果把和数据打交道的代码还有业务流程全部塞进 MVC 里的 M 层的话，这个 M 层又会显得有些过于臃肿。对于复杂的项目，一个 C 和一个 M 层显然是不够用的，现在比较流行的纯后端 api 模块一般采用下述划分方法：</p>
<ol>
<li>Controller，与上述类似，服务入口，负责处理路由，参数校验，请求转发。</li>
<li>Logic/Service，逻辑(服务)层，一般是业务逻辑的入口，可以认为从这里开始，所有的请求参数一定是合法的。业务逻辑和业务流程也都在这一层中。常见的设计中会将该层称为 Business Rules。</li>
<li>DAO/Repository，这一层主要负责和数据、存储打交道。将下层存储以更简单的函数、接口形式暴露给 Logic 层来使用。负责数据的持久化工作。</li>
</ol>
<p>每一层都会做好自己的工作，然后用请求当前的上下文构造下一层工作所需要的结构体或其它类型参数，然后调用下一次的函数。在工作完成之后，再把处理结果一层层地传出到入口。</p>
<p><img src="https://go.wuhaolin.cn/advanced-go-programming-book/images/ch6-08-controller-logic-dao.png" alt="controller-logic-dao"></p>
<p>划分为 CLD 三层之后，在 C 层之前我们可能还需要同时支持多种协议。本章前面讲到的 thrift、gRPC 和 http 并不是一定只选择其中一种，有时我们需要支持其中的两种，比如同一个接口，我们既需要效率较高的 thrift，也需要方便 debug 的 http 入口。即除了 CLD 之外，还需要一个单独的 protocol 层，负责处理各种交互协议的细节。这样请求的流程会变成下面这样：</p>
<p><img src="https://go.wuhaolin.cn/advanced-go-programming-book/images/ch6-08-control-flow.png" alt="control-flow"></p>
<p>这样我们 controller 中的入口函数就变成了下面这样：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func CreateOrder(ctx context.Context, req *CreateOrderStruct) (*CreateOrderRespStruct, error) &#123;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func CreateOrder(ctx context.Context, req *CreateOrderStruct) (*CreateOrderRespStruct, error) &#123;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>CreateOrder 有两个参数，ctx 用来传入 trace_id 一类的需要串联请求的全局参数，req 里存储了我们创建订单所需要的所有输入信息。返回结果是一个响应结构体和错误。可以认为，我们的代码运行到 controller 层之后，就没有任何与“协议”相关的代码了。在这里你找不到 http.Request，也找不到 http.ResponseWriter，也找不到任何与 thrift 或者 gRPC 相关的字眼。</p>
<p>在 protocol 层，处理 http 协议的大概代码如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">&#x2F;&#x2F; defined in protocol layer
type CreateOrderRequest struct &#123;
    OrderID int64 &#96;json:&quot;order_id&quot;&#96;
    &#x2F;&#x2F; ...
&#125;

&#x2F;&#x2F; defined in controller
type CreateOrderParams struct &#123;
    OrderID int64
&#125;

func HTTPCreateOrderHandler(wr http.ResponseWriter, r *http.Request) &#123;
    var req CreateOrderRequest
    var params CreateOrderParams
    ctx :&#x3D; context.TODO()
    &#x2F;&#x2F; bind data to req
    bind(r, &amp;req)
    &#x2F;&#x2F; map protocol binded to protocol-independent
    map(req, params)
    logicResp,err :&#x3D; controller.CreateOrder(ctx, &amp;params)
    if err !&#x3D; nil &#123;&#125;
    &#x2F;&#x2F; ...
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>理论上我们可以用同一个 request struct 组合上不同的 tag，来达到一个 struct 来给不同的协议复用的目的。不过遗憾的是在 thrift 中，request struct 也是通过 IDL 生成的，其内容在自动生成的 ttypes.go 文件中，我们还是需要在 thrift 的入口将这个自动生成的 struct 映射到我们 logic 入口所需要的 struct 上。gRPC 也是类似。这部分代码还是需要的。</p>
<p>聪明的读者可能已经可以看出来了，协议细节处理这一层实际上有大量重复劳动，每一个接口在协议这一层的处理，无非是把数据从协议特定的 struct(例如 http.Request，thrift 的被包装过了) 读出来，再绑定到我们协议无关的 struct 上，再把这个 struct 映射到 controller 入口的 struct 上，这些代码实际上长得都差不多。差不多的代码都遵循着某种模式，那么我们可以对这些模式进行简单的抽象，用 codegen 来把繁复的协议处理代码从工作内容中抽离出去。</p>
<p>先来看看 http 对应的 struct、thrift 对应的 struct 和我们协议无关的 struct 分别长什么样子：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">&#x2F;&#x2F; http request struct
type CreateOrder struct &#123;
    OrderID int64 &#96;json:&quot;order_id&quot; validate:&quot;required&quot;&#96;
    UserID int64 &#96;json:&quot;user_id&quot; validate:&quot;required&quot;&#96;
    ProductID int &#96;json:&quot;prod_id&quot; validate:&quot;required&quot;&#96;
    Addr string &#96;json:&quot;addr&quot; validate:&quot;required&quot;&#96;
&#125;

&#x2F;&#x2F; thrift request struct
type FeatureSetParams struct &#123;
    DriverID int64 &#96;thrift:&quot;driverID,1,required&quot;&#96;
    OrderID int64 &#96;thrift:&quot;OrderID,2,required&quot;&#96;
    UserID int64 &#96;thrift:&quot;UserID,3,required&quot;&#96;
    ProductID int &#96;thrift:&quot;ProductID,4,required&quot;&#96;
    Addr string &#96;thrift:&quot;Addr,5,required&quot;&#96;
&#125;

&#x2F;&#x2F; controller input struct
type CreateOrderParams struct &#123;
    OrderID int64
    UserID int64
    ProductID int
    Addr string
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们需要通过一个源 struct 来生成我们需要的 http 和 thrift 入口代码。再观察一下上面定义的三种 struct，实际上我们只要能用一个 struct 生成 thrift 的 IDL，以及 http 服务的 “IDL(实际上就是带 json/form 相关 tag 的 struct 定义)” 就可以了。这个初始的 struct 我们可以把 struct 上的 http 的 tag 和 thrift 的 tag 揉在一起：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type FeatureSetParams struct &#123;
    DriverID int64 &#96;thrift:&quot;driverID,1,required&quot; json:&quot;driver_id&quot;&#96;
    OrderID int64 &#96;thrift:&quot;OrderID,2,required&quot; json:&quot;order_id&quot;&#96;
    UserID int64 &#96;thrift:&quot;UserID,3,required&quot; json:&quot;user_id&quot;&#96;
    ProductID int &#96;thrift:&quot;ProductID,4,required&quot; json:&quot;prod_id&quot;&#96;
    Addr string &#96;thrift:&quot;Addr,5,required&quot; json:&quot;addr&quot;&#96;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后通过代码生成把 thrift 的 IDL 和 http 的 request struct 都生成出来：</p>
<p><img src="https://go.wuhaolin.cn/advanced-go-programming-book/images/ch6-08-code-gen.png" alt="code gen"></p>
<p>至于用什么手段来生成，你可以通过 go 语言内置的 parser 读取文本文件中的 Go 源代码，然后根据 ast 来生成目标代码，也可以简单地把这个源 struct 和 generator 的代码放在一起编译，让 struct 作为 generator 的输入参数(这样会更简单一些)，都是可以的。</p>
<p>当然这种思路并不是唯一选择，我们还可以通过解析 thrift 的 IDL，生成一套 http 接口的 struct。如果你选择这么做，那整个流程就变成了这样：</p>
<p><img src="https://go.wuhaolin.cn/advanced-go-programming-book/images/ch6-08-code-gen-2.png" alt="code gen"></p>
<p>看起来比之前的图顺畅一点，不过如果你选择了这么做，你需要自行对 thrift 的 IDL 进行解析，也就是相当于可能要手写一个 thrift 的 IDL 的 parser，虽然现在有 antlr 或者 peg 能帮你简化这些 parser 的书写工作，但在“解析”的这一步我们不希望引入太多的工作量，所以量力而行即可。</p>
<p>既然工作流已经成型，我们可以琢磨一下怎么让整个流程对用户更加友好。</p>
<p>比如在前面的生成环境引入 GUI 或者 web 页面，只要让用户点点鼠标就能生成 SDK，这些就靠读者自己去探索了。</p>
<p>本节中所叙述的分层没有将 middleware 作为项目的分层考虑进去。如果我们考虑 middleware 的话，请求的流程是什么样的？</p>
<p><img src="https://go.wuhaolin.cn/advanced-go-programming-book/images/ch6-08-control-flow-2.png" alt="control flow 2"></p>
<p>之前我们学习的 middleware 是和 http 协议强相关的，遗憾的是在 thrift 中看起来没有和 http 中对等的解决这些非功能性逻辑代码重复问题的 middleware。所以我们在图上写 <code>thrift stuff</code>。这些 <code>stuff</code> 可能需要你手写去实现，然后每次增加一个新的 thrift 接口，就需要去写一遍这些非功能性代码。</p>
<p>这也是很多企业项目所面临的真实问题，遗憾的是开源界并没有这样方便的多协议 middleware 解决方案。当然了，前面我们也说过，很多时候我们给自己保留的 http 接口只是用来做 debug，并不会暴露给外人用。这种情况下，这些非功能性的代码只要在 thrift 的代码中完成即可。</p>
<h2 id="5-8-interface-和-table-driven-开发"><a href="#5-8-interface-和-table-driven-开发" class="headerlink" title="5.8 interface 和 table-driven 开发"></a>5.8 interface 和 table-driven 开发</h2><p>在 web 项目中经常会遇到外部依赖环境的变化，比如：</p>
<ol>
<li>公司的老存储系统年久失修，现在已经没有人维护了，新的系统上线也没有考虑平滑迁移，但最后通牒已下，要求 N 天之内迁移完毕。</li>
<li>平台部门的老用户系统年久失修(怎么都是年久失修，摔！)，现在已经没有人维护了，真是悲伤的故事。新系统上线没有考虑兼容老接口，但最后通牒已下，要求 N 个月之内迁移完毕。</li>
<li>公司的老消息队列人走茶凉，年久失修(汗)，新来的技术精英们没有考虑向前兼容，但最后通牒已下，要求半年之内迁移完毕。</li>
</ol>
<p>所以你看到了，我们的外部依赖总是为了自己爽而不断地做升级，且不想做向前兼容，然后来给我们下最后通牒。如果我们的部门工作饱和，领导强势，那么有时候也可以倒逼依赖方来做兼容。但世事不一定如人愿，即使我们的领导强势，读者朋友的领导也还是可能认怂的。</p>
<h3 id="5-8-1-业务系统的发展过程"><a href="#5-8-1-业务系统的发展过程" class="headerlink" title="5.8.1 业务系统的发展过程"></a>5.8.1 业务系统的发展过程</h3><p>互联网公司只要可以活过三年，工程方面面临的首要问题就是代码膨胀。系统的代码膨胀之后，可以将系统中与业务本身流程无关的部分做拆解和异步化。什么算是业务无关呢，比如一些统计、反作弊、营销发券、价格计算、用户状态更新等等需求。这些需求往往依赖于主流程的数据，但又只是挂在主流程上的旁支，自成体系。</p>
<p>这时候我们就可以把这些旁支拆解出去，作为独立的系统来部署、开发以及维护。这些旁支流程的时延如若非常敏感，比如用户在界面上点了按钮，需要立刻返回(价格计算、支付)，那么需要与主流程系统进行 RPC 通信，并且在通信失败时，要将结果直接返回给用户。如果时延不敏感，比如抽奖系统，结果稍后公布的这种，或者非实时的统计类系统，那么就没有必要在主流程里为每一套系统做一套 RPC 流程。我们只要将下游需要的数据打包成一条消息，传入消息队列，之后的事情与主流程一概无关(当然，与用户的后续交互流程还是要做的)。</p>
<p>通过拆解和异步化虽然解决了一部分问题，但并不能解决所有问题。随着业务发展，单一职责的模块也会变得越来越复杂，这是必然的趋势。一件事情本身变的复杂的话，这时候拆解和异步化就不灵了。我们还是要对事情本身进行一定程度的封装抽象。</p>
<h3 id="5-8-2-使用函数封装业务流程"><a href="#5-8-2-使用函数封装业务流程" class="headerlink" title="5.8.2 使用函数封装业务流程"></a>5.8.2 使用函数封装业务流程</h3><p>最基本的封装过程，我们把相似的行为放在一起，然后打包成一个一个的函数，让自己杂乱无章的代码变成下面这个样子：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func BusinessProcess(ctx context.Context, params Params) (resp, error)&#123;
    ValidateLogin()
    ValidateParams()
    AntispamCheck()
    GetPrice()
    CreateOrder()
    UpdateUserStatus()
    NotifyDownstreamSystems()
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>不管是多么复杂的业务，系统内的逻辑都是可以分解为 step1 -&gt; step2 -&gt; step3 … 这样的流程的。</p>
<p>每一个步骤内部也</p>
<p>会有复杂的流程，比如：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func CreateOrder() &#123;
    ValidateDistrict() &#x2F;&#x2F; 判断是否是地区限定商品
    ValidateVIPProduct() &#x2F;&#x2F; 检查是否是只提供给 vip 的商品
    GetUserInfo() &#x2F;&#x2F; 从用户系统获取更详细的用户信息
    GetProductDesc() &#x2F;&#x2F; 从商品系统中获取商品在该时间点的详细信息
    DecrementStorage() &#x2F;&#x2F; 扣减库存
    CreateOrderSnapshot() &#x2F;&#x2F; 创建订单快照
    return CreateSuccess
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在阅读业务流程代码时，我们只要阅读其函数名就能知晓在该流程中完成了哪些操作，如果需要修改细节，那么就继续深入到每一个业务步骤去看具体的流程。写得稀烂的业务流程代码则会将所有过程都堆积在少数的几个函数中，从而导致几百甚至上千行的函数。这种意大利面条式的代码阅读和维护都会非常痛苦。在开发的过程中，一旦有条件应该立即进行类似上面这种方式的简单封装。</p>
<h3 id="5-8-3-使用-interface-来做抽象"><a href="#5-8-3-使用-interface-来做抽象" class="headerlink" title="5.8.3 使用 interface 来做抽象"></a>5.8.3 使用 interface 来做抽象</h3><p>业务发展的早期，是不适宜引入 interface 的，很多时候业务流程变化很大，过早引入 interface 会使业务系统本身增加很多不必要的分层，从而导致每次修改几乎都要全盘否定之前的工作。</p>
<p>当业务发展到一定阶段，主流程稳定之后，就可以适当地使用 interface 来进行抽象了。这里的稳定，是指主流程的大部分业务步骤已经确定，即使再进行修改，也不会进行大规模的变动，而只是小修小补，或者只是增加或删除少量业务步骤。</p>
<p>如果我们在开发过程中，已经对业务步骤进行了良好的封装，这时候进行 interface 抽象化就会变的非常容易，伪代码：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">&#x2F;&#x2F; OrderCreator 创建订单流程
type OrderCreator interface &#123;
    ValidateDistrict()    &#x2F;&#x2F; 判断是否是地区限定商品
    ValidateVIPProduct()  &#x2F;&#x2F; 检查是否是只提供给 vip 的商品
    GetUserInfo()         &#x2F;&#x2F; 从用户系统获取更详细的用户信息
    GetProductDesc()      &#x2F;&#x2F; 从商品系统中获取商品在该时间点的详细信息
    DecrementStorage()    &#x2F;&#x2F; 扣减库存
    CreateOrderSnapshot() &#x2F;&#x2F; 创建订单快照
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们只要把之前写过的步骤函数签名都提到一个 interface 中，就可以完成抽象了。</p>
<p>在进行抽象之前，我们应该想明白的一点是，引入 interface 对我们的系统本身是否有意义，这是要按照场景去进行分析的。假如我们的系统只服务一条产品线，并且内部的代码只是针对很具体的场景进行定制化开发，那么实际上引入 interface 是不会带来任何收益的。至于说是否方便测试，这一点我们会在之后的章节来讲。</p>
<p>如果我们正在做的是平台系统，需要由平台来定义统一的业务流程和业务规范，那么基于 interface 的抽象就是有意义的。举个例子：</p>
<p><img src="https://go.wuhaolin.cn/advanced-go-programming-book/images/ch6-interface-impl.uml.png" alt="interface-impl"></p>
<p>平台需要服务多条业务线，但数据定义需要统一，所以希望都能走平台定义的流程。作为平台方，我们可以定义一套类似上文的 interface，然后要求接入方的业务必须将这些 interface 都实现。如果 interface 中有其不需要的步骤，那么只要返回 nil，或者忽略就好。</p>
<p>在业务进行迭代时，平台的代码是不用修改的，这样我们便把这些接入业务当成了平台代码的插件(plugin)引入进来了。如果没有 interface 的话，我们会怎么做？</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">import (
    &quot;sample.com&#x2F;travelorder&quot;
    &quot;sample.com&#x2F;marketorder&quot;
)

func CreateOrder() &#123;
    switch businessType &#123;
        case TravelBusiness:
            travelorder.CreateOrder()
        case MarketBusiness:
            marketorder.CreateOrderForMarket()
        default:
            return errors.New(&quot;not supported business&quot;)
    &#125;
&#125;

func ValidateUser() &#123;
    switch businessType &#123;
        case TravelBusiness:
            travelorder.ValidateUserVIP()
        case MarketBusiness:
            marketorder.ValidateUserRegistered()
        default:
            return errors.New(&quot;not supported business&quot;)
    &#125;
&#125;

&#x2F;&#x2F; ...
switch ...
switch ...
switch ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>没错，就是无穷无尽的 switch，和没完没了的垃圾代码。引入了 interface 之后，我们的 switch 只需要在业务入口做一次。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type BusinessInstance interface &#123;
    ValidateLogin()
    ValidateParams()
    AntispamCheck()
    GetPrice()
    CreateOrder()
    UpdateUserStatus()
    NotifyDownstreamSystems()
&#125;

func entry() &#123;
    var bi BusinessInstance
    switch businessType &#123;
        case TravelBusiness:
            bi &#x3D; travelorder.New()
        case MarketBusiness:
            bi &#x3D; marketorder.New()
        default:
            return errors.New(&quot;not supported business&quot;)
    &#125;
&#125;

func BusinessProcess(bi BusinessInstance) &#123;
    bi.ValidateLogin()
    bi.ValidateParams()
    bi.AntispamCheck()
    bi.GetPrice()
    bi.CreateOrder()
    bi.UpdateUserStatus()
    bi.NotifyDownstreamSystems()
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>直接面向 interface 编程，而不用关心具体的实现了。如果对应的业务在迭代中发生了修改，所有的逻辑对平台方来说也是完全透明的。</p>
<h3 id="5-8-4-interface-的优缺点"><a href="#5-8-4-interface-的优缺点" class="headerlink" title="5.8.4 interface 的优缺点"></a>5.8.4 interface 的优缺点</h3><p>Go 被人称道的最多的地方是其 interface 设计的正交性，模块之间不需要知晓相互的存在，A 模块定义 interface，B 模块实现这个 interface 就可以。如果 interface 中没有 A 模块中定义的数据类型，那 B 模块中甚至都不用 import A。比如标准库中的 <code>io.Writer</code>：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type Writer interface &#123;
    Write(p []byte) (n int, err error)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>我们可以在自己的模块中实现 <code>io.Writer</code> 接口：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type MyType struct &#123;&#125;

func (m MyType) Write(p []byte) (n int, err error) &#123;
    return 0, nil
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>那么我们就可以把我们自己的 MyType 传给任何使用 <code>io.Writer</code> 作为参数的函数来使用了，比如：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">package log

func SetOutput(w io.Writer) &#123;
    output &#x3D; w
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>然后：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">package my-business

import &quot;xy.com&#x2F;log&quot;

func init() &#123;
    log.SetOutput(MyType)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在 MyType 定义的地方，不需要 <code>import &quot;io&quot;</code> 就可以直接实现 <code>io.Writer</code> interface，我们还可以随意地组合很多函数，以实现各种类型的接口，同时接口实现方和接口定义方都不用建立 import 产生的依赖关系。因此很多人认为 Go 的这种正交是一种很优秀的设计。</p>
<p>但这种“正交”性也会给我们带来一些麻烦。当我们接手了一个几十万行的系统时，如果看到定义了很多 interface，例如订单流程的 interface，我们希望能直接找到这些 interface 都被哪些对象实现了。但直到现在，这个简单的需求也就只有 goland 实现了，并且体验尚可。Visual Studio Code 则需要对项目进行全局扫描，来看到底有哪些 struct 实现了该 interface 的全部函数。那些显式实现 interface 的语言，对于 IDE 的 interface 查找来说就友好多了。另一方面，我们看到一个 struct，也希望能够立刻知道这个 struct 实现了哪些 interface，但也有着和前面提到的相同的问题。</p>
<p>虽有不便，interface 带给我们的好处也是不言而喻的：一是依赖反转，这是 interface 在大多数语言中对软件项目所能产生的影响，在 Go 的正交 interface 的设计场景下甚至可以去除依赖；二是由编译器来帮助我们在编译期就能检查到类似“未完全实现接口”这样的错误，如果业务未实现某个流程，但又将其实例作为 interface 强行来使用的话：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">package main

type OrderCreator interface &#123;
    ValidateUser()
    CreateOrder()
&#125;

type BookOrderCreator struct&#123;&#125;

func (boc BookOrderCreator) ValidateUser() &#123;&#125;

func createOrder(oc OrderCreator) &#123;
    oc.ValidateUser()
    oc.CreateOrder()
&#125;

func main() &#123;
    createOrder(BookOrderCreator&#123;&#125;)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>会报出下述错误。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># command-line-arguments
.&#x2F;a.go:18:30: cannot use BookOrderCreator literal (type BookOrderCreator) as type OrderCreator in argument to createOrder:
    BookOrderCreator does not implement OrderCreator (missing CreateOrder method)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>所以 interface 也可以认为是一种编译期进行检查的保证类型安全的手段</p>
<h3 id="5-8-5-table-driven-开发"><a href="#5-8-5-table-driven-开发" class="headerlink" title="5.8.5 table-driven 开发"></a>5.8.5 table-driven 开发</h3><p>熟悉开源 lint 工具的同学应该见到过圈复杂度的说法，在函数中如果有 if 和 switch 的话，会使函数的圈复杂度上升，所以有强迫症的同学即使在入口一个函数中有 switch，还是想要干掉这个 switch，有没有什么办法呢？当然有，用表驱动的方式来存储我们需要实例：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func entry() &#123;
    var bi BusinessInstance
    switch businessType &#123;
        case TravelBusiness:
            bi &#x3D; travelorder.New()
        case MarketBusiness:
            bi &#x3D; marketorder.New()
        default:
            return errors.New(&quot;not supported business&quot;)
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以修改为：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var businessInstanceMap &#x3D; map[int]BusinessInstance &#123;
    TravelBusiness : travelorder.New(),
    MarketBusiness : marketorder.New(),
&#125;

func entry() &#123;
    bi :&#x3D; businessInstanceMap[businessType]
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>table driven 的设计方式，很多设计模式相关的书籍并没有把它作为一种设计模式来讲，但我认为这依然是一种非常重要的帮助我们来简化代码的手段。<strong>在日常的开发工作中可以多多思考，哪些不必要的 switch case 可以用一个字典和一行代码就可以轻松搞定。</strong></p>
<h2 id="5-9-灰度发布和-A-B-test"><a href="#5-9-灰度发布和-A-B-test" class="headerlink" title="5.9 灰度发布和 A/B test"></a>5.9 灰度发布和 A/B test</h2><p>中型的互联网公司往往有着以百万计的用户，而大型互联网公司的系统则可能要服务千万级甚至亿级的用户需求。大型系统的请求流入往往是源源不断的，任何风吹草动，都一定会有最终用户感受得到。例如你的系统在上线途中会拒绝一些上游过来的请求，而这时候依赖你的系统没有做任何容错，那么这个错误就会一直向上抛出，直到触达最终用户。 </p>
<p>不管怎么说，在大型系统中容错是重要的，能够让系统按百分比，分批次到达最终用户，也是很重要的。虽然当今的互联网公司系统，名义上会说自己上线前都经过了充分慎重严格的测试，但就算它们真得做到了，代码的 bug 总是在所难免的。即使代码没有 bug，分布式服务之间的协作也是可能出现“逻辑”上的非技术问题的。</p>
<p>互联网系统的灰度发布(灰度发布也称为金丝雀发布)一般通过两种方式实现：</p>
<ol>
<li>通过分批次部署实现灰度发布</li>
<li>通过业务规则进行灰度发布</li>
</ol>
<p>在对系统的旧功能进行升级迭代时，第一种方式用的比较多。新功能上线时，第二种方式用的比较多。当然，对比较重要的老功能进行较大幅度的修改时，一般也会选择按业务规则来进行发布，因为直接全量开放给所有用户风险实在太大。</p>
<h3 id="5-9-1-通过分批次部署实现灰度发布"><a href="#5-9-1-通过分批次部署实现灰度发布" class="headerlink" title="5.9.1 通过分批次部署实现灰度发布"></a>5.9.1 通过分批次部署实现灰度发布</h3><p>假如服务部署在 15 个实例(可能是物理机，也可能是容器)上，我们把这 7 个实例分为三组，按照先后顺序，分别有 1-2-4-8 台机器，保证每次扩展时大概都是二倍的关系。为什么要用 2 倍？这样能够保证我们不管有多少台机器，都不会把组划分得太多。</p>
<p>在上线时，最有效的观察手法是查看程序的错误日志，如果较明显的逻辑错误，一般错误日志的滚动速度都会有肉眼可见的增加。这些错误也可以通过 metrics 一类的系统上报给公司内的监控系统，所以在上线过程中，也可以通过观察监控曲线，来判断是否有异常发生。</p>
<p>如果有异常情况，首先要做的自然就是回滚了。</p>
<h3 id="5-9-2-通过业务规则进行灰度发布"><a href="#5-9-2-通过业务规则进行灰度发布" class="headerlink" title="5.9.2 通过业务规则进行灰度发布"></a>5.9.2 通过业务规则进行灰度发布</h3><p>常见的灰度策略有多种，较为简单的需求，例如我们的策略是要按照千分比来发布，那么我们可以用用户 id、手机号、用户设备信息，等等，来生成一个简单的哈希值，然后再求模，用伪代码表示一下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">&#x2F;&#x2F; pass 3&#x2F;1000
func passed() bool &#123;
    key :&#x3D; hashFunctions(userID) % 1000
    if key &lt;&#x3D; 2 &#123;
        return true
    &#125;

    return false
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="5-9-2-1-可选规则"><a href="#5-9-2-1-可选规则" class="headerlink" title="5.9.2.1 可选规则"></a>5.9.2.1 可选规则</h4><p>常见的灰度发布系统会有下列规则提供选择：</p>
<ol>
<li>按城市发布</li>
<li>按概率发布</li>
<li>按百分比发布</li>
<li>按白名单发布</li>
<li>按业务线发布</li>
<li>按 UA 发布(app、web、pc)</li>
<li>按分发渠道发布</li>
</ol>
<p>按白名单发布比较简单，功能上线时，可能我们希望只有公司内部的员工和测试人员可以访问到新功能，会直接把账号、邮箱写入到白名单，拒绝其它任何账号的访问。</p>
<p>按概率发布则是指实现一个简单的函数：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func isTrue() bool &#123;
    return true&#x2F;false according to the rate provided by user
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>按百分比发布，是指实现下面这样的函数：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func isTrue(phone string) bool &#123;
    if hash of phone matches &#123;
        return true
    &#125;

    return false
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>和上面的单纯按照概率的区别是这里我们需要调用方提供给我们一个输入参数，我们以该输入参数作为源来计算哈希，并以哈希后的结果来求模，并返回结果。这样可以保证同一个用户的返回结果多次调用是一致的，</p>
<h3 id="5-9-3-如何实现一套灰度发布系统"><a href="#5-9-3-如何实现一套灰度发布系统" class="headerlink" title="5.9.3 如何实现一套灰度发布系统"></a>5.9.3 如何实现一套灰度发布系统</h3><p>提供给用户的接口大概可以分为和业务绑定的简单灰度判断逻辑。以及输入稍微复杂一些的哈希灰度。我们来分别看看怎么实现这样的灰度系统(函数)。</p>
<h4 id="5-9-3-1-业务相关的简单灰度"><a href="#5-9-3-1-业务相关的简单灰度" class="headerlink" title="5.9.3.1 业务相关的简单灰度"></a>5.9.3.1 业务相关的简单灰度</h4><h4 id="5-9-3-2-哈希算法"><a href="#5-9-3-2-哈希算法" class="headerlink" title="5.9.3.2 哈希算法"></a>5.9.3.2 哈希算法</h4><p>求哈希可用的算法非常多，比如 md5，crc32，sha1 等等，但我们这里的目的只是为了给这些数据做个映射，并不想要因为计算哈希消耗过多的 cpu，所以现在业界使用较多的算法是 murmurhash， murmurhash 相比其它的算法有三倍以上的性能提升。</p>
<h4 id="5-9-3-3-分布是否均匀"><a href="#5-9-3-3-分布是否均匀" class="headerlink" title="5.9.3.3 分布是否均匀"></a>5.9.3.3 分布是否均匀</h4><p>对于哈希算法来说，性能是一方面的问题，另一方面还要考虑哈希后的值是否分布均匀。</p>
<h2 id="5-10-补充说明"><a href="#5-10-补充说明" class="headerlink" title="5.10 补充说明"></a>5.10 补充说明</h2><p>现代的软件工程是离不开 web 的，广义地来讲，web 甚至可以不用非得基于 http 协议。只要是 CS 或者 BS 架构，都可以认为是 web 系统。</p>
<p>即使是在看起来非常封闭的游戏系统里，因为玩家们与日俱增的联机需求，也同样会涉及到远程通信，这里面也会涉及到很多 web 方面的技术。</p>
<p>所以这个时代，web 编程是一个程序员所必须接触的知识领域。无论你的目标是成为架构师，是去创业，或是去当技术顾问。web 方面的知识都会成为你的硬通货。</p>
<h1 id="第6章-分布式系统"><a href="#第6章-分布式系统" class="headerlink" title="第6章 分布式系统"></a>第6章 分布式系统</h1><p>Go语言号称是互联网时代的C语言。现在的互联网系统已经不是以前的一个主机搞定一切的时代，互联网时代的后台服务由大量的分布式系统构成，任何单一后台服务器节点的故障并不会导致整个系统的停机。同时以青云、阿里云、腾讯云为代表的云厂商崛起标志着云时代的到来，在云时代分布式编程将成为一个基本技能。而基于Go语言构建的Docker、K8s等系统推动了云时代的提前到来。</p>
<h2 id="6-1-分布式-id-生成器"><a href="#6-1-分布式-id-生成器" class="headerlink" title="6.1 分布式 id 生成器"></a>6.1 分布式 id 生成器</h2><p>有时我们需要能够生成类似 MySQL 自增 ID 这样不断增大，同时又不会重复的 id。以支持业务中的高并发场景。比较典型的，电商促销时，短时间内会有大量的订单涌入到系统，比如每秒 10w+。 </p>
<p>在插入数据库之前，我们需要给这些消息/订单先打上一个 ID，然后再插入到我们的数据库。对这个 id 的要求是希望其中能带有一些时间信息，这样即使我们后端的系统对消息进行了分库分表，也能够以时间顺序对这些消息进行排序</p>
<p>Twitter 的 snowflake 算法是这种场景下的一个典型解法</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">                                                           datacenter_id          sequence_id
unused
                                                                  │                     │
   │                                                              │                     │
   │                                                              │                     │
   │  │                                                      │    │                     │
   │  │                                                      │    │                     │
   ▼  │◀──────────────────    41 bits   ────────────────────▶│    ▼                     ▼
┌─────┼──────────────────────────────────────────────────────┼────────┬────────┬────────────────┐
│  0  │ 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0  │ 00000  │ 00000  │ 0000 0000 0000 │
└─────┴──────────────────────────────────────────────────────┴────────┴────────┴────────────────┘
                                  ▲                                        ▲
                                  │                                        │
                                  │                                        │
                                  │                                        │
                                  │                                        │
                                  │                                        │
                                  │                                        │

                        time in milliseconds                          worker_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>首先确定我们的数值是 64 位，int64 类型，被划分为四部分，不含开头的第一个 bit，因为这个 bit 是符号位。用 41 位来表示收到请求时的时间戳，单位为毫秒，然后五位来表示数据中心的 id，然后再五位来表示机器的实例 id，最后是 12 位的循环自增 id(到达 1111 1111 1111 后会归 0)。</p>
<p>这样的机制可以支持我们在同一台机器上，同一毫秒内产生 2 ^ 12 = 4096 条消息。一秒共 409.6w 条消息。从值域上来讲完全够用了。</p>
<p>数据中心 + 实例 id 共有 10 位，可以支持我们每数据中心部署 32 台机器，所有数据中心共 1024 台实例。</p>
<p>表示 timestamp 的 41 位，可以支持我们使用 69 年。</p>
<p>当然，我们的时间毫秒计数不会真的从 1970 年开始记，那样我们的系统跑到 <code>2039/9/7 23:47:35</code> 就不能用了，所以这里的 timestamp 实际上只是相对于某个时间的增量，比如我们的系统上线是 2018-08-01，那么我们可以把这个 timestamp 当作是从 <code>2018-08-01 00:00:00.000</code> 的偏移量。</p>
<h3 id="6-1-1-worker-id-分配"><a href="#6-1-1-worker-id-分配" class="headerlink" title="6.1.1 worker id　分配"></a>6.1.1 worker id　分配</h3><p>timestamp，datacenter_id，worker_id 和 sequence_id 这四个字段中，timestamp 和 sequence_id 是由程序在运行期生成的。但 datacenter_id 和 worker_id 需要我们在部署阶段就能够获取得到，并且一旦程序启动之后，就是不可更改的了(想想，如果可以随意更改，可能被不慎修改，造成最终生成的 id 有冲突)。</p>
<p>一般不同数据中心的机器，会提供对应的获取数据中心 id 的 api，所以 datacenter_id 我们可以在部署阶段轻松地获取到。而 worker_id 是我们逻辑上给机器分配的一个 id，这个要怎么办呢？比较简单的想法是由能够提供这种自增 id 功能的工具来支持，比如 MySQL:</p>
<p>从 MySQL 中获取到 worker_id 之后，就把这个 worker_id 直接持久化到本地，以避免每次上线时都需要获取新的 worker_id。让单实例的 worker_id 可以始终保持不变。</p>
<p>当然，使用 MySQL 相当于给我们简单的 id 生成服务增加了一个外部依赖。依赖越多，我们的服务的可运维性就越差。</p>
<p>考虑到集群中即使有单个 id 生成服务的实例挂了，也就是损失一段时间的一部分 id，所以我们也可以更简单暴力一些，把 worker_id 直接写在 worker 的配置中，上线时，由部署脚本完成 worker_id 字段替换。</p>
<h3 id="6-1-2-开源实例"><a href="#6-1-2-开源实例" class="headerlink" title="6.1.2 开源实例"></a>6.1.2 开源实例</h3><h4 id="6-1-2-1-标准-snowflake-实现"><a href="#6-1-2-1-标准-snowflake-实现" class="headerlink" title="6.1.2.1 标准 snowflake 实现"></a>6.1.2.1 标准 snowflake 实现</h4><p><code>github.com/bwmarrin/snowflake</code> 是一个相当轻量化的 snowflake 的 Go 实现。其文档指出：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">+--------------------------------------------------------------------------+
| 1 Bit Unused | 41 Bit Timestamp |  10 Bit NodeID  |   12 Bit Sequence ID |
+--------------------------------------------------------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>和标准的 snowflake 完全一致。 </p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">package main

import (
    &quot;fmt&quot;
    &quot;os&quot;

    &quot;github.com&#x2F;bwmarrin&#x2F;snowflake&quot;
)

func main() &#123;
    n, err :&#x3D; snowflake.NewNode(1)
    if err !&#x3D; nil &#123;
        println(err)
        os.Exit(1)
    &#125;

    for i :&#x3D; 0; i &lt; 3; i++ &#123;
        id :&#x3D; n.Generate()
        fmt.Println(&quot;id&quot;, id)
        fmt.Println(&quot;node: &quot;, id.Node(), &quot;step: &quot;, id.Step(), &quot;time: &quot;, id.Time(), &quot;\n&quot;)
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当然，这个库也给我们留好了定制的后路：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">&#x2F;&#x2F; Epoch is set to the twitter snowflake epoch of Nov 04 2010 01:42:54 UTC
&#x2F;&#x2F; You may customize this to set a different epoch for your application.
Epoch int64 &#x3D; 1288834974657

&#x2F;&#x2F; Number of bits to use for Node
&#x2F;&#x2F; Remember, you have a total 22 bits to share between Node&#x2F;Step
NodeBits uint8 &#x3D; 10

&#x2F;&#x2F; Number of bits to use for Step
&#x2F;&#x2F; Remember, you have a total 22 bits to share between Node&#x2F;Step
StepBits uint8 &#x3D; 12<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Epoch 就是本节开头讲的起始时间，NodeBits 指的是机器编号的位长，StepBits 指的是自增序列的位长。</p>
<h4 id="6-1-2-2-sonyflake"><a href="#6-1-2-2-sonyflake" class="headerlink" title="6.1.2.2 sonyflake"></a>6.1.2.2 sonyflake</h4><p>sonyflake 是 Sony 公司的一个开源项目，基本思路和 snowflake 差不多，不过位分配上稍有不同：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">+-----------------------------------------------------------------------------+
| 1 Bit Unused | 39 Bit Timestamp |  8 Bit Sequence ID  |   16 Bit Machine ID |
+-----------------------------------------------------------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>这里的时间只用了 39 个 bit，但时间的单位变成了 10ms，所以理论上比 41 位表示的时间还要久(174 years)。</p>
<p>Sequence ID 和之前的定义一致，Machine ID 其实就是节点 id。sonyflake 与众不同的地方在于其在启动阶段的 setting 配置：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func NewSonyflake(st Settings) *Sonyflake<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>Settings 数据结构如下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type Settings struct &#123;
    StartTime      time.Time
    MachineID      func() (uint16, error)
    CheckMachineID func(uint16) bool
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>StartTime 选项和我们之前的 Epoch 差不多，如果不设置的话，默认是从 <code>2014-09-01 00:00:00 +0000 UTC</code> 开始。</p>
<p>MachineID 可以由用户自定义的函数，如果用户不定义的话，会默认将本机 ip 的低 16 位作为 machine id。</p>
<p>CheckMachineID 是由用户提供的检查 MachineID 是否冲突的函数。这里的设计还是比较巧妙的，如果有另外的中心化存储并支持检查重复的存储，那我们就可以按照自己的想法随意定制这个检查 MachineID 是否冲突的逻辑。如果公司有现成的 Redis 集群，那么我们可以很轻松地用 Redis 的 set 来检查冲突。</p>
<h2 id="6-2-分布式锁"><a href="#6-2-分布式锁" class="headerlink" title="6.2 分布式锁"></a>6.2 分布式锁</h2><h3 id="6-2-1-进程内加锁"><a href="#6-2-1-进程内加锁" class="headerlink" title="6.2.1 进程内加锁"></a>6.2.1 进程内加锁</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">package main

import &quot;sync&quot;

var counter int

func main() &#123;
   var wg sync.WaitGroup
   var l sync.Mutex

   for i :&#x3D; 0; i &lt; 1000; i++ &#123;
      wg.Add(1)
      go func() &#123;
         defer wg.Done()
         l.Lock()
         counter++
         l.Unlock()
      &#125;()
   &#125;

   wg.Wait()
   println(counter)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>想要得到正确的结果的话，要把对 counter 的操作代码部分加上锁</p>
<h3 id="6-2-2-trylock"><a href="#6-2-2-trylock" class="headerlink" title="6.2.2 trylock"></a>6.2.2 trylock</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">package main

import (
    &quot;sync&quot;
)

&#x2F;&#x2F; Lock try lock
type Lock struct &#123;
    c chan struct&#123;&#125;
&#125;

&#x2F;&#x2F; NewLock generate a try lock
func NewLock() Lock &#123;
    var l Lock
    l.c &#x3D; make(chan struct&#123;&#125;, 1)
    l.c &lt;- struct&#123;&#125;&#123;&#125;
    return l
&#125;

&#x2F;&#x2F; Lock try lock, return lock result
func (l Lock) Lock() bool &#123;
    lockResult :&#x3D; false
    select &#123;
    case &lt;-l.c:
        lockResult &#x3D; true
    default:
    &#125;
    return lockResult
&#125;

&#x2F;&#x2F; Unlock , Unlock the try lock
func (l Lock) Unlock() &#123;
    l.c &lt;- struct&#123;&#125;&#123;&#125;
&#125;

var counter int

func main() &#123;
    var l &#x3D; NewLock()
    var wg sync.WaitGroup
    for i :&#x3D; 0; i &lt; 10; i++ &#123;
        wg.Add(1)
        go func() &#123;
            defer wg.Done()
            if !l.Lock() &#123;
                &#x2F;&#x2F; log error
                println(&quot;lock failed&quot;)
                return
            &#125;
            counter++
            println(&quot;current counter&quot;, counter)
            l.Unlock()
        &#125;()
    &#125;
    wg.Wait()
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>因为我们的逻辑限定每个 goroutine 只有成功执行了 Lock 才会继续执行后续逻辑，因此在 Unlock 时可以保证 Lock struct 中的 channel 一定是空，从而不会阻塞，也不会失败。</p>
<p>在单机系统中，trylock 并不是一个好选择。因为大量的 goroutine 抢锁可能会导致 cpu 无意义的资源浪费。有一个专有名词用来描述这种抢锁的场景：活锁。</p>
<p>活锁指的是程序看起来在正常执行，但实际上 cpu 周期被浪费在抢锁，而非执行任务上，从而程序整体的执行效率低下。活锁的问题定位起来要麻烦很多。所以在单机场景下，不建议使用这种锁。</p>
<h3 id="6-2-3-基于-redis-的-setnx"><a href="#6-2-3-基于-redis-的-setnx" class="headerlink" title="6.2.3 基于 redis 的 setnx"></a>6.2.3 基于 redis 的 setnx</h3><p>setnx 很适合在高并发场景下，用来争抢一些“唯一”的资源。比如交易撮合系统中卖家发起订单，而多个买家会对其进行并发争抢。这种场景我们没有办法依赖具体的时间来判断先后，因为不管是用户设备的时间，还是分布式场景下的各台机器的时间，都是没有办法在合并后保证正确的时序的。哪怕是我们同一个机房的集群，不同的机器的系统时间可能也会有细微的差别。</p>
<p>所以，我们需要依赖于这些请求到达 redis 节点的顺序来做正确的抢锁操作。如果用户的网络环境比较差，那也只能自求多福了。</p>
<h3 id="6-2-4-基于-zk"><a href="#6-2-4-基于-zk" class="headerlink" title="6.2.4 基于 zk"></a>6.2.4 基于 zk</h3><p>基于 zk 的锁与基于 redis 的锁的不同之处在于 Lock 成功之前会一直阻塞，这与我们单机场景中的 mutex.Lock 很相似。</p>
<p>其原理也是基于临时 sequence 节点和 watch api，例如我们这里使用的是 <code>/lock</code> 节点。Lock 会在该节点下的节点列表中插入自己的值，只要节点下的子节点发生变化，就会通知所有 watch 该节点的程序。这时候程序会检查当前节点下最小的子节点的 id 是否与自己的一致。如果一致，说明加锁成功了。</p>
<p>这种分布式的阻塞锁比较适合分布式任务调度场景，但不适合高频次持锁时间短的抢锁场景。按照 Google 的 chubby 论文里的阐述，基于强一致协议的锁适用于 <code>粗粒度</code> 的加锁操作。这里的粗粒度指锁占用时间较长。我们在使用时也应思考在自己的业务场景中使用是否合适。</p>
<h3 id="6-2-5-基于-etcd"><a href="#6-2-5-基于-etcd" class="headerlink" title="6.2.5 基于 etcd"></a>6.2.5 基于 etcd</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">package main

import (
    &quot;log&quot;

    &quot;github.com&#x2F;zieckey&#x2F;etcdsync&quot;
)

func main() &#123;
    m, err :&#x3D; etcdsync.New(&quot;&#x2F;lock&quot;, 10, []string&#123;&quot;http:&#x2F;&#x2F;127.0.0.1:2379&quot;&#125;)
    if m &#x3D;&#x3D; nil || err !&#x3D; nil &#123;
        log.Printf(&quot;etcdsync.New failed&quot;)
        return
    &#125;
    err &#x3D; m.Lock()
    if err !&#x3D; nil &#123;
        log.Printf(&quot;etcdsync.Lock failed&quot;)
        return
    &#125;

    log.Printf(&quot;etcdsync.Lock OK&quot;)
    log.Printf(&quot;Get the lock. Do something here.&quot;)

    err &#x3D; m.Unlock()
    if err !&#x3D; nil &#123;
        log.Printf(&quot;etcdsync.Unlock failed&quot;)
    &#125; else &#123;
        log.Printf(&quot;etcdsync.Unlock OK&quot;)
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>etcd 中没有像 zookeeper 那样的 sequence 节点。所以其锁实现和基于 zookeeper 实现的有所不同。在上述示例代码中使用的 etcdsync 的 Lock 流程是：</p>
<ol>
<li>先检查 <code>/lock</code> 路径下是否有值，如果有值，说明锁已经被别人抢了</li>
<li>如果没有值，那么写入自己的值。写入成功返回，说明加锁成功。写入时如果节点被其它节点写入过了，那么会导致加锁失败，这时候到 3</li>
<li>watch <code>/lock</code> 下的事件，此时陷入阻塞</li>
<li>当 <code>/lock</code> 路径下发生事件时，当前进程被唤醒。检查发生的事件是否是删除事件(说明锁被持有者主动 unlock)，或者过期事件(说明锁过期失效)。如果是的话，那么回到 1，走抢锁流程。</li>
</ol>
<h3 id="6-2-7-如何选择"><a href="#6-2-7-如何选择" class="headerlink" title="6.2.7 如何选择"></a>6.2.7 如何选择</h3><p>业务还在单机就可以搞定的量级时，那么按照需求使用任意的单机锁方案就可以。</p>
<p>如果发展到了分布式服务阶段，但业务规模不大，比如 qps &lt; 1000，使用哪种锁方案都差不多。如果公司内已有可以使用的 zk/etcd/redis 集群，那么就尽量在不引入新的技术栈的情况下满足业务需求。</p>
<p>业务发展到一定量级的话，就需要从多方面来考虑了。首先是你的锁是否在任何恶劣的条件下都不允许数据丢失，如果不允许，那么就不要使用 redis 的 setnx 的简单锁。</p>
<p>如果要使用 redlock，那么要考虑你们公司 redis 的集群方案，是否可以直接把对应的 redis 的实例的 ip+port 暴露给开发人员。如果不可以，那也没法用。</p>
<p>对锁数据的可靠性要求极高的话，那只能使用 etcd 或者 zk 这种通过一致性协议保证数据可靠性的锁方案。但可靠的背面往往都是较低的吞吐量和较高的延迟。需要根据业务的量级对其进行压力测试，以确保分布式锁所使用的 etcd/zk 集群可以承受得住实际的业务请求压力。需要注意的是，etcd 和 zk 集群是没有办法通过增加节点来提高其性能的。要对其进行横向扩展，只能增加搭建多个集群来支持更多的请求。这会进一步提高对运维和监控的要求。多个集群可能需要引入 proxy，没有 proxy 那就需要业务去根据某个业务 id 来做 sharding。如果业务已经上线的情况下做扩展，还要考虑数据的动态迁移。这些都不是容易的事情。</p>
<p>在选择具体的方案时，还是需要多加思考，对风险早做预估。</p>
<h2 id="6-3-延时任务系统"><a href="#6-3-延时任务系统" class="headerlink" title="6.3 延时任务系统"></a>6.3 延时任务系统</h2><p>如果业务规模比较小，有时我们也可以通过 db + 轮询来对这种任务进行简单处理，但上了规模的公司，自然会寻找更为普适的解决方案来解决这一类问题</p>
<p>一般有两种思路来解决这个问题：</p>
<ol>
<li>实现一套类似 crontab 的分布式定时任务管理系统。</li>
<li>实现一个支持定时发送消息的消息队列。</li>
</ol>
<p>两种思路进而衍生出了一些不同的系统，但其本质是差不多的。都是需要实现一个定时器。在单机的场景下其实并不少见，例如我们在和网络库打交道的时候经常会写 <code>SetReadDeadline</code>，这实际上就是在本地创建了一个定时器，在到达指定的时间后，我们会收到定时器的通知，告诉我们时间已到。这时候如果读取还没有完成的话，就可以认为发生了网络问题，从而中断读取。</p>
<p>timer 的实现在工业界已经是有解的问题了。常见的就是时间堆和时间轮</p>
<h3 id="6-3-1-timer-实现"><a href="#6-3-1-timer-实现" class="headerlink" title="6.3.1 timer 实现"></a>6.3.1 timer 实现</h3><h4 id="6-3-1-1-时间堆"><a href="#6-3-1-1-时间堆" class="headerlink" title="6.3.1.1 时间堆"></a>6.3.1.1 时间堆</h4><p>最常见的时间堆一般用小顶堆实现，小顶堆其实就是一种特殊的二叉树：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">                        ┌─────┐
                        │     │
                        │  5  │
                        └─────┘
                           │
                           │
                ┌──────────┴──────────┐
                │                     │
                ▼                     ▼
             ┌─────┐               ┌─────┐
             │     │               │     │
             │  6  │               │  10 │
             └─────┘               └─────┘
                │                     │
           ┌────┴─────┐          ┌────┴─────┐
           │          │          │          │
           ▼          ▼          ▼          ▼
        ┌─────┐    ┌─────┐    ┌─────┐    ┌─────┐
        │     │    │     │    │     │    │     │
        │  7  │    │  6  │    │  11 │    │  20 │
        └─────┘    └─────┘    └─────┘    └─────┘
           │                                │
           │                                │
   ┌───────┴────┐                           └───────┐
   │            │                                   │
   ▼            ▼                                   ▼
┌─────┐      ┌─────┐                             ┌─────┐
│     │      │     │   ...............           │     │
│  15 │      │  8  │                             │  30 │
└─────┘      └─────┘                             └─────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>小顶堆的好处是什么呢？实际上对于定时器来说，如果堆顶元素比当前的时间还要大，那么说明堆内所有元素都比当前时间大。进而说明这个时刻我们还没有必要对时间堆进行任何处理。所以对于定时 check 来说，时间复杂度是 O(1) 的。</p>
<p>当我们发现堆顶的元素 &lt; 当前时间时，那么说明可能已经有一批事件已经开始过期了，这时进行正常的弹出和堆调整操作就好。每一次堆调整的时间复杂度都是 O(LgN)。</p>
<p>Go 自身的 timer 就是用时间堆来实现的，不过并没有使用二叉堆，而是使用了扁平一些的四叉堆。在最近的版本中，还加了一些优化，我们先不说优化，先来看看四叉的小顶堆长什么样：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">                                                             +-----+
                                                             |     |
                                                             |  0  |
                                                             +-----+
                                                                |
                                                                |
                                                                |
                                                                v
                                                    +-----+-----+-----+-----+
                                                    |     |     |     |     |
                                                    |  3  |  2  |  2  |  10 |
                                                    +-----+-----+-----+-----+
                                                       |     |     |     |
                                                       |     |     |     |
                    +----------+                       |     |     |     |
   +----------------+  4*i+1   +-----------------------+     |     |     +-----------------------------+
   |                +----------+         +-------------------+     +---+                               |
   |                                     |                             |                               |
   |                                     |                             |                               |
   v                                     |                             |                               v
+-----+-----+-----+-----+                |                             |                            +-----+-----+-----+-----+
|     |     |     |     |                v                             v                            |     |     |     |     |
|  20 |  4  |  5  |  13 |             +-----+-----+-----+-----+     +-----+-----+-----+-----+       | 99  | 13  | 11  |  12 |
+-----+-----+-----+-----+             |     |     |     |     |     |     |     |     |     |       +-----+-----+-----+-----+
                                      | 12  | 14  | 15  |  16 |     | 3   | 10  | 3   |  3  |
                                      +-----+-----+-----+-----+     +-----+-----+-----+-----+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>小顶堆的性质，父节点比其 4 个子节点都小，子节点之间没有特别的大小关系要求。</p>
<h4 id="6-3-1-2-时间轮"><a href="#6-3-1-2-时间轮" class="headerlink" title="6.3.1.2 时间轮"></a>6.3.1.2 时间轮</h4><p><img src="https://go.wuhaolin.cn/advanced-go-programming-book/images/ch6-timewheel.png" alt="timewheel"></p>
<p>用时间轮来实现 timer 时，我们需要定义每一个格子的“刻度”，可以将时间轮想像成一个时钟，中心有秒针顺时针转动。每次转动到一个刻度时，我们就需要去查看该刻度挂载的 tasklist 是否有已经到期的任务。</p>
<p>从结构上来讲，时间轮和哈希表很相似，如果我们把哈希算法定义为：触发时间%时间轮元素大小。那么这就是一个简单的哈希表。在哈希冲突时，采用链表挂载哈希冲突的定时器。</p>
<p>除了这种单层时间轮，业界也有一些时间轮采用多层实现， </p>
<h3 id="6-3-2-任务分发"><a href="#6-3-2-任务分发" class="headerlink" title="6.3.2 任务分发"></a>6.3.2 任务分发</h3><p>有了基本的 timer 实现方案，如果我们开发的是单机系统，那么就可以撸起袖子开干了，不过本章我们讨论的是分布式，距离“分布式”还稍微有一些距离</p>
<p>我们还需要把这些“定时”或是“延时”(本质也是定时)任务分发出去。下面是一种思路：</p>
<p><img src="https://go.wuhaolin.cn/advanced-go-programming-book/images/ch6-task-sched.png" alt="task-dist"></p>
<p>每一个实例每隔一小时，会去数据库里把下一个小时需要处理的定时任务捞出来，捞取的时候只要取那些 task_id % shard_count = shard_id 的那些 task 即可。</p>
<p>当这些定时任务被触发之后需要通知用户侧，有两种思路：</p>
<ol>
<li>将任务被触发的信息封装为一条 event 消息，发往消息队列，由用户侧对消息队列进行监听。</li>
<li>对用户预先配置的回调函数进行调用。</li>
</ol>
<p>两种方案各有优缺点，如果采用 1，那么如果消息队列出故障会导致整个系统不可用，当然，现在的消息队列一般也会有自身的高可用方案，大多数时候我们不用担心这个问题。其次一般业务流程中间走消息队列的话会导致延时增加，定时任务若必须在触发后的几十毫秒到几百毫秒内完成，那么采用消息队列就会有一定的风险。如果采用 2，会加重定时任务系统的负担。我们知道，单机的 timer 执行时最害怕的就是回调函数执行时间过长，这样会阻塞后续的任务执行。在分布式场景下，这种忧虑依然是适用的。一个不负责任的业务回调可能就会直接拖垮整个定时任务系统。所以我们还要考虑在回调的基础上增加经过测试的超时时间设置，并且对由用户填入的超时时间做慎重的审核。</p>
<h3 id="6-3-3-rebalance-和幂等考量"><a href="#6-3-3-rebalance-和幂等考量" class="headerlink" title="6.3.3 rebalance 和幂等考量"></a>6.3.3 rebalance 和幂等考量</h3><p>当我们的任务执行集群有机器故障时，需要对任务进行重新分配。按照之前的求模策略，对这台机器还没有处理的任务进行重新分配就比较麻烦了。如果是实际运行的线上系统，还要在故障时的任务平衡方面花更多的心思。</p>
<p>下面给出一种思路：</p>
<p>我们可以参考 elasticsearch 的设计，每份任务数据都有多个副本，这里假设两副本：</p>
<p>一份数据虽然有两个持有者，但持有者持有的副本会进行区分，比如持有的是主副本还是非主副本</p>
<p>一个任务只会在持有主副本的节点上被执行。</p>
<p>当有机器故障时，任务数据需要进行 rebalance 工作，比如 node 1 挂了：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">┌──────────┐
│  node 1  │
├──────────┴────────────────────────┐
│                                   │
│    X          X          X        │
│                                   │
└───────────────────────────────────┘
┌──────────┐
│  node 2  │
├──────────┴────────────────────────┐
│ ┌───┐  ┌───┐  ┏━━━┓  ┏━━━┓  ┏━━━┓ │
│ │ 0 │  │ 1 │  ┃ 2 ┃  ┃ 3 ┃  ┃ 4 ┃ │
│ └───┘  └───┘  ┗━━━┛  ┗━━━┛  ┗━━━┛ │
└───────────────────────────────────┘
┌──────────┐
│  node 3  │
├──────────┴────────────────────────┐
│ ┏━━━┓  ┏━━━┓  ┌───┐  ┌───┐  ┌───┐ │
│ ┃ 0 ┃  ┃ 1 ┃  │ 2 │  │ 3 │  │ 4 │ │
│ ┗━━━┛  ┗━━━┛  └───┘  └───┘  └───┘ │
└───────────────────────────────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>node 1 的数据会被迁移到 node 2 和 node 3 上。</p>
<p>当然，也可以用稍微复杂一些的思路，比如对集群中的节点进行角色划分，由协调节点来做这种故障时的任务重新分配工作，考虑到高可用，协调节点可能也需要有 1 ~ 2 个备用节点以防不测。</p>
<p>之前提到我们会用 MQ 触发对用户的通知，在使用 MQ 时，很多 MQ 是不支持 exactly once 的语义的，这种情况下我们需要让用户自己来负责消息的去重或者消费的幂等处理。</p>
<h2 id="6-4-分布式搜索引擎"><a href="#6-4-分布式搜索引擎" class="headerlink" title="6.4 分布式搜索引擎"></a>6.4 分布式搜索引擎</h2><p>数据库系统本身要保证实时和强一致性，所以其功能设计上都是为了满足这种一致性需求。比如 write ahead log 的设计，基于 B+ 树实现的索引和数据组织，以及基于 MVCC 实现的事务等等。</p>
<p>系型数据库一般被用于实现 OLTP 系统，所谓 OLTP，援引 wikipedia:</p>
<blockquote>
<p>在线交易处理（OLTP, Online transaction processing）是指透过信息系统、电脑网络及数据库，以线上交易的方式处理一般即时性的作业数据，和更早期传统数据库系统大量批量的作业方式并不相同。OLTP通常被运用于自动化的数据处理工作，如订单输入、金融业务…等反复性的日常性交易活动。和其相对的是属于决策分析层次的联机分析处理（OLAP）。</p>
</blockquote>
<p>在互联网的业务场景中，也有一些实时性要求不高(可以接受多 s 的延迟)，但是查询复杂性却很高的场景。举个例子，在电商的 wms 系统中，或者在大多数业务场景丰富的 crm 或者客服系统中，可能需要提供几十个字段的随意组合查询功能。这种系统的数据维度天生众多，比如一个电商的 wms 中对一件货物的描述，可能有下面这些字段：</p>
<blockquote>
<p>仓库 id，入库时间，库位分区 id，储存货架 id，入库操作员 id，出库操作员 id，库存数量，过期时间，sku 类型，产品品牌，产品分类，内件数量</p>
</blockquote>
<p>除了上述信息，如果商品在仓库内有流转。可能还有有关联的流程 id，当前的流转状态等等。</p>
<p>想像一下，如果我们所经营的是一个大型电商，每天有千万级别的订单，那么在这个数据库中查询和建立合适的索引都是一件非常难的事情。</p>
<p>在 CRM 或客服类系统中，常常有根据关键字进行搜索的需求，大型互联网公司每天会接收数以万计的用户投诉。而考虑到事件溯源，用户的投诉至少要存 2~3 年。又是千万级甚至上亿的数据。根据关键字进行一次 like 查询，可能整个 MySQL 就直接挂掉了。</p>
<p>这时候我们就需要搜索引擎来救场了。</p>
<h3 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h3><p>elasticsearch 是开源分布式搜索引擎的霸主，其依赖于 Lucene 实现，在部署和运维方面做了很多优化。当今搭建一个分布式搜索引擎比起 Sphinx 的时代已经是容易很多很多了。只要简单配置客户端 ip 和端口就可以了。</p>
<h3 id="倒排列表"><a href="#倒排列表" class="headerlink" title="倒排列表"></a>倒排列表</h3><p>虽然 es 是针对搜索场景来定制的，但如前文所言，实际应用中常常用 es 来作为 database 来使用，就是因为倒排列表的特性。可以用比较朴素的观点来理解倒排索引：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">┌─────────────────┐       ┌─────────────┬─────────────┬─────────────┬─────────────┐
│  order_id: 103  │──────▶│ doc_id:4231 │ doc_id:4333 │ doc_id:5123 │ doc_id:9999 │
└─────────────────┘       └─────────────┴─────────────┴─────────────┴─────────────┘





┌─────────────────┐       ┌─────────────┬─────────────┬─────────────┬─────────────┬─────────────┐
│  sku_id: 30221  │──────▶│ doc_id:4231 │ doc_id:5123 │ doc_id:5644 │ doc_id:7801 │ doc_id:9999 │
└─────────────────┘       └─────────────┴─────────────┴─────────────┴─────────────┴─────────────┘




┌─────────────────┐       ┌─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────┐
│   city_id: 3    │──────▶│ doc_id:5123 │ doc_id:9999 │doc_id:10232 │doc_id:54321 │doc_id:63142 │doc_id:71230 │doc_id:90123 │
└─────────────────┘       └─────────────┴─────────────┴─────────────┴─────────────┴─────────────┴─────────────┴─────────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对 es 中的数据进行查询时，本质就是求多个排好序的序列求交集。非数值类型字段涉及到分词问题，大多数内部使用场景下，我们可以直接使用默认的 bi-gram 分词。什么是 bi-gram 分词呢：</p>
<p>即将所有 Ti 和 T(i+1) 组成一个词(在 es 中叫 term)，然后再编排其倒排列表，这样我们的倒排列表大概就是这样的：</p>
<p><img src="https://go.wuhaolin.cn/advanced-go-programming-book/images/ch6-terms.png" alt="terms"></p>
<p>当用户搜索 ‘天气很好’ 时，其实就是求：天气、气很、很好三组倒排列表的交集，但这里的相等判断逻辑有些特殊，用伪代码表示一下：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func equal() &#123;
    if postEntry.docID of &#39;天气&#39; &#x3D;&#x3D; postEntry.docID of &#39;气很&#39; &amp;&amp; postEntry.offset + 1 of &#39;天气&#39; &#x3D;&#x3D; postEntry.offset of &#39;气很&#39; &#123;
        return true
    &#125;

    if postEntry.docID of &#39;气很&#39; &#x3D;&#x3D; postEntry.docID of &#39;很好&#39; &amp;&amp; postEntry.offset + 1 of &#39;气很&#39; &#x3D;&#x3D; postEntry.offset of &#39;很好&#39; &#123;
        return true
    &#125;

    if postEntry.docID of &#39;天气&#39; &#x3D;&#x3D; postEntry.docID of &#39;很好&#39; &amp;&amp; postEntry.offset + 2 of &#39;天气&#39; &#x3D;&#x3D; postEntry.offset of &#39;很好&#39; &#123;
        return true
    &#125;

    return false
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>多个有序列表求交集的时间复杂度是：O(N * M)， N 为给定列表当中元素数最小的集合， M 为给定列表的个数。</p>
<p>在整个算法中起决定作用的一是最短的倒排列表的长度，其次是词数总和，一般词数不会很大(想像一下，你会在搜索引擎里输入几百字来搜索么？)，所以起决定性作用的，一般是所有倒排列表中，最短的那一个的长度。</p>
<p>因此，文档总数很多的情况下，搜索词的倒排列表最短的那一个不长时，搜索速度也是很快的。如果用关系型数据库，那就需要按照索引(如果有的话)来慢慢扫描了。</p>
<h3 id="查询-DSL"><a href="#查询-DSL" class="headerlink" title="查询 DSL"></a>查询 DSL</h3><p>es 的 Bool Query 方案，实际上就是用 json 来表达了这种程序语言中的 Boolean Expression，为什么可以这么做呢？因为 json 本身是可以表达树形结构的，我们的程序代码在被编译器 parse 之后，也会变成 AST，而 AST 抽象语法树，顾名思义，就是树形结构。理论上 json 能够完备地表达一段程序代码被 parse 之后的结果。这里的 Boolean Expression 被编译器 Parse 之后也会生成差不多的树形结构，而且只是整个编译器实现的一个很小的子集。</p>
<h3 id="基于-client-sdk-做开发"><a href="#基于-client-sdk-做开发" class="headerlink" title="基于 client sdk 做开发"></a>基于 client sdk 做开发</h3><h3 id="将-sql-转换为-DSL"><a href="#将-sql-转换为-DSL" class="headerlink" title="将 sql 转换为 DSL"></a>将 sql 转换为 DSL</h3><p>比如我们有一段 bool 表达式，user_id = 1 and (product_id = 1 and (star_num = 4 or star_num = 5) and banned = 1)，写成 SQL 是如下形式：</p>
<blockquote>
<p>select * from xxx where user_id = 1 and (product_id = 1 and (star_num = 4 or star_num = 5) and banned = 1)</p>
</blockquote>
<p>写成 es 的 DSL 是如下形式：</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;
  &quot;query&quot;: &#123;
    &quot;bool&quot;: &#123;
      &quot;must&quot;: [
        &#123;
          &quot;match&quot;: &#123;
            &quot;user_id&quot;: &#123;
              &quot;query&quot;: &quot;1&quot;,
              &quot;type&quot;: &quot;phrase&quot;
            &#125;
          &#125;
        &#125;,
        &#123;
          &quot;match&quot;: &#123;
            &quot;product_id&quot;: &#123;
              &quot;query&quot;: &quot;1&quot;,
              &quot;type&quot;: &quot;phrase&quot;
            &#125;
          &#125;
        &#125;,
        &#123;
          &quot;bool&quot;: &#123;
            &quot;should&quot;: [
              &#123;
                &quot;match&quot;: &#123;
                  &quot;star_num&quot;: &#123;
                    &quot;query&quot;: &quot;4&quot;,
                    &quot;type&quot;: &quot;phrase&quot;
                  &#125;
                &#125;
              &#125;,
              &#123;
                &quot;match&quot;: &#123;
                  &quot;star_num&quot;: &#123;
                    &quot;query&quot;: &quot;5&quot;,
                    &quot;type&quot;: &quot;phrase&quot;
                  &#125;
                &#125;
              &#125;
            ]
          &#125;
        &#125;,
        &#123;
          &quot;match&quot;: &#123;
            &quot;banned&quot;: &#123;
              &quot;query&quot;: &quot;1&quot;,
              &quot;type&quot;: &quot;phrase&quot;
            &#125;
          &#125;
        &#125;
      ]
    &#125;
  &#125;,
  &quot;from&quot;: 0,
  &quot;size&quot;: 1
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>es 的 DSL 虽然很好理解，但是手写起来非常费劲。前面提供了基于 SDK 的方式来写，但也不足够灵活。</p>
<p>SQL 的 where 部分就是 boolean expression。我们之前提到过，这种 bool 表达式在被 parse 之后，和 es 的 DSL 的结构长得差不多，我们能不能直接通过这种“差不多”的猜测来直接帮我们把 SQL 转换成 DSL 呢？</p>
<p>当然可以，我们把 SQL 的 where 被 Parse 之后的结构和 es 的 DSL 的结构做个对比：</p>
<p><img src="https://go.wuhaolin.cn/advanced-go-programming-book/images/ch6-ast-dsl.png" alt="ast"></p>
<p>既然结构上完全一致，逻辑上我们就可以相互转换。我们以广度优先对 AST 树进行遍历，然后将二元表达式转换成 json 字符串，再拼装起来就可以了，限于篇幅，本文中就不给出示例了， </p>
<h3 id="异构数据同步"><a href="#异构数据同步" class="headerlink" title="异构数据同步"></a>异构数据同步</h3><p>在实际应用中，我们很少直接向搜索引擎中写入数据。更为常见的方式是，将 MySQL 或其它关系型数据中的数据同步到搜索引擎中。而搜索引擎的使用方只能对数据进行查询，无法进行修改和删除。</p>
<p>常见的同步方案有两种：</p>
<h4 id="通过时间戳进行增量数据同步"><a href="#通过时间戳进行增量数据同步" class="headerlink" title="通过时间戳进行增量数据同步"></a>通过时间戳进行增量数据同步</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">  ┌────────────────────────┐     ┌────────────────────────┐
  │ move 10 min data to es │     │ move 10 min data to es │
  └────────────────────────┘     └────────────────────────┘

               │                               │                              ┌───────────────┐
───────────────┼────────────────┬──────────────┴─────────────┬──────────────▶ │  time passes  │
               │   ┌───────┐    │                            │                └───────────────┘
               │◀──┤ 10min ├───▶│                  ┌────────────────────────┐
               │   └───────┘    │                  │ move 10 min data to es │
                                │                  └────────────────────────┘
                                │
                                │
                                │
                                │
                    ┌────────────────────────┐
                    │ move 10 min data to es │
                    └────────────────────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这种同步方式与业务强绑定，例如 wms 系统中的出库单，我们并不需要非常实时，稍微有延迟也可以接受，那么我们可以每分钟从 MySQL 的出库单表中，把最近十分钟创建的所有出库单取出，批量存入 es 中，具体的逻辑实际上就是一条 SQL：</p>
<blockquote>
<p>from wms_orders where update_time &gt;= date_sub(now(), interval 10 minute);</p>
</blockquote>
<p>当然，考虑到边界情况，我们可以让这个时间段的数据与前一次的有一些重叠：</p>
<blockquote>
<p>select * from wms_orders where update_time &gt;= date_sub(now(), interval 11 minute);</p>
</blockquote>
<p>取最近 11 分钟有变动的数据覆盖更新到 es 中。这种方案的缺点显而易见，我们必须要求业务数据严格遵守一定的规范。比如这里的，必须要有 update_time 字段，并且每次创建和更新都要保证该字段有正确的时间值。否则我们的同步逻辑就会丢失数据。</p>
<h4 id="通过-binlog-进行数据同步"><a href="#通过-binlog-进行数据同步" class="headerlink" title="通过 binlog 进行数据同步"></a>通过 binlog 进行数据同步</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">                ┌────────────────────────┐
                │      MySQL master      │
                └────────────────────────┘
                             │
                             │
                             │
                             │
                             │
                             │
                             ▼
                   ┌───────────────────┐
                   │ row format binlog │
                   └───────────────────┘
                             │
                             │
                             │
             ┌───────────────┴──────────────┐
             │                              │
             │                              │
             ▼                              ▼
┌────────────────────────┐         ┌─────────────────┐
│      MySQL slave       │         │      canal      │
└────────────────────────┘         └─────────────────┘
                                            │
                                  ┌─────────┴──────────┐
                                  │   parsed binlog    │
                                  └─────────┬──────────┘
                                            │
                                            ▼
                                   ┌────────────────┐
                                   │     kafka      │─────┐
                                   └────────────────┘     │
                                                          │
                                                          │
                                                          │
                                                          │
                                              ┌───────────┴──────┐
                                              │  kafka consumer  │
                                              └───────────┬──────┘
                                                          │
                                                          │
                                                          │
                                                          │      ┌────────────────┐
                                                          └─────▶│ elasticsearch  │
                                                                 └────────────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>业界使用较多的是阿里开源的 canal，来进行 binlog 解析与同步。canal 会伪装成 MySQL 的从库，然后解析好行格式的 binlog，再以更容易解析的格式(例如 json) 发送到消息队列。</p>
<p>由下游的 kafka 消费者负责把上游数据表的自增主键作为 es 的 document 的 id 进行写入，这样可以保证每次接收到 binlog 时，对应 id 的数据都被覆盖更新为最新。MySQL 的 row 格式的 binlog 会将每条记录的所有字段都提供给下游，所以实际上在向异构数据目标同步数据时，不需要考虑数据是插入还是更新，只要一律按 id 进行覆盖即可。</p>
<p>这种模式同样需要业务遵守一条数据表规范，即表中必须有唯一主键 id 来保证我们进入 es 的数据不会发生重复。一旦不遵守该规范，那么就会在同步时导致数据重复。当然，你也可以为每一张需要的表去定制消费者的逻辑，这就不是通用系统讨论的范畴了。</p>
<h2 id="6-5-Load-Balance-负载均衡"><a href="#6-5-Load-Balance-负载均衡" class="headerlink" title="6.5 Load-Balance 负载均衡"></a>6.5 Load-Balance 负载均衡</h2><h3 id="6-5-1-常见的负载均衡思路"><a href="#6-5-1-常见的负载均衡思路" class="headerlink" title="6.5.1 常见的负载均衡思路"></a>6.5.1 常见的负载均衡思路</h3><p>如果我们不考虑均衡的话，现在有 n 个 endpoint，我们完成业务流程实际上只需要从这 n 个中挑出其中的一个。有几种思路:</p>
<ol>
<li>按顺序挑: 例如上次选了第一台，那么这次就选第二台，下次第三台，如果已经到了最后一台，那么下一次从第一台开始。这种情况下我们可以把 endpoint 都存储在数组中，每次请求完成下游之后，将一个索引后移即可。在移到尽头时再移回数组开头处。</li>
<li>随机挑一个: 每次都随机挑，真随机伪随机均可。假设选择第 x 台机器，那么 x 可描述为 <code>rand.Intn() % n</code>。</li>
<li>根据某种权重，对下游 endpoints 进行排序，选择权重最大/小的那一个。</li>
</ol>
<p>当然了，实际场景我们不可能无脑轮询或者无脑随机，如果对下游请求失败了，我们还需要某种机制来进行重试，如果纯粹的随机算法，存在一定的可能性使你在下一次仍然随机到这次的问题节点。</p>
<h3 id="6-5-2-基于洗牌算法的负载均衡"><a href="#6-5-2-基于洗牌算法的负载均衡" class="headerlink" title="6.5.2 基于洗牌算法的负载均衡"></a>6.5.2 基于洗牌算法的负载均衡</h3><p>考虑到我们需要随机选取每次发送请求的 endpoint，同时在遇到下游返回错误时换其它节点重试。所以我们设计一个大小和 endpoints 数组大小一致的索引数组，每次来新的请求，我们对索引数组做洗牌，然后取第一个元素作为选中的服务节点，如果请求失败，那么选择下一个节点重试，以此类推:</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var endpoints &#x3D; []string &#123;
    &quot;100.69.62.1:3232&quot;,
    &quot;100.69.62.32:3232&quot;,
    &quot;100.69.62.42:3232&quot;,
    &quot;100.69.62.81:3232&quot;,
    &quot;100.69.62.11:3232&quot;,
    &quot;100.69.62.113:3232&quot;,
    &quot;100.69.62.101:3232&quot;,
&#125;

&#x2F;&#x2F; 重点在这个 shuffle
func shuffle(slice []int) &#123;
    for i :&#x3D; 0; i &lt; len(slice); i++ &#123;
        a :&#x3D; rand.Intn(len(slice))
        b :&#x3D; rand.Intn(len(slice))
        slice[a], slice[b] &#x3D; slice[b], slice[a]
    &#125;
&#125;

func request(params map[string]interface&#123;&#125;) error &#123;
    var indexes &#x3D; []int &#123;0,1,2,3,4,5,6&#125;
    var err error

    shuffle(indexes)
    maxRetryTimes :&#x3D; 3

    idx :&#x3D; 0
    for i :&#x3D; 0; i &lt; maxRetryTimes; i++ &#123;
        err &#x3D; apiRequest(params, indexes[idx])
        if err &#x3D;&#x3D; nil &#123;
            break
        &#125;
        idx++
    &#125;

    if err !&#x3D; nil &#123;
        &#x2F;&#x2F; logging
        return err
    &#125;

    return nil
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="6-5-2-1-错误的洗牌导致的负载不均衡"><a href="#6-5-2-1-错误的洗牌导致的负载不均衡" class="headerlink" title="6.5.2.1 错误的洗牌导致的负载不均衡"></a>6.5.2.1 错误的洗牌导致的负载不均衡</h4><p>这段简短的程序里有两个隐藏的隐患:</p>
<ol>
<li>没有随机种子。在没有随机种子的情况下，rand.Intn 返回的伪随机数序列是固定的。</li>
<li>洗牌不均匀，会导致整个数组第一个节点有大概率被选中，并且多个节点的负载分布不均衡。</li>
</ol>
<h4 id="6-5-2-2-修正洗牌算法"><a href="#6-5-2-2-修正洗牌算法" class="headerlink" title="6.5.2.2 修正洗牌算法"></a>6.5.2.2 修正洗牌算法</h4><p>从数学上得到过证明的还是经典的 fisher-yates 算法，主要思路为每次随机挑选一个值，放在数组末尾。然后在 n-1 个元素的数组中再随机挑选一个值，放在数组末尾，以此类推。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func shuffle(indexes []int) &#123;
    for i:&#x3D;len(indexes); i&gt;0; i-- &#123;
        lastIdx :&#x3D; i - 1
        idx :&#x3D; rand.Int(i)
        indexes[lastIdx], indexes[idx] &#x3D; indexes[idx], indexes[lastIdx]
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在 Go 的标准库中实际上已经为我们内置了该算法:</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func shuffle(n int) []int &#123;
    b :&#x3D; rand.Perm(n)
    return b
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>在当前的场景下，我们只要用 rand.Perm 就可以得到我们想要的索引数组了</p>
<h3 id="6-5-3-zk-集群的随机节点挑选问题"><a href="#6-5-3-zk-集群的随机节点挑选问题" class="headerlink" title="6.5.3 zk 集群的随机节点挑选问题"></a>6.5.3 zk 集群的随机节点挑选问题</h3><p>本节中的场景是从 N 个节点中选择一个节点发送请求，初始请求结束之后，后续的请求会重新对数组洗牌，所以每两个请求之间没有什么关联关系。因此我们上面的洗牌算法，理论上不初始化随机库的种子也是不会出什么问题的。</p>
<p>但在一些特殊的场景下，例如使用 zk 时，客户端初始化从多个服务节点中挑选一个节点后，是会向该节点建立长连接的。并且之后如果有请求，也都会发送到该节点去。直到该节点不可用，才会在 endpoints 列表中挑选下一个节点。在这种场景下，我们的初始连接节点选择就要求必须是“真”随机了。否则，所有客户端起动时，都会去连接同一个 zk 的实例，根本无法起到负载均衡的目的。如果在日常开发中，你的业务也是类似的场景，也务必考虑一下是否会发生类似的情况。为 rand 库设置种子的方法:</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">rand.Seed(time.Now().UnixNano())<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>之所以会有上面这些结论，是因为某个使用较广泛的开源 zk 库的早期版本就犯了上述错误，直到 2016 年早些时候，这个问题才被修正。</p>
<h2 id="6-6-分布式配置管理"><a href="#6-6-分布式配置管理" class="headerlink" title="6.6 分布式配置管理"></a>6.6 分布式配置管理</h2><p>在分布式系统中，常困扰我们的还有上线问题。虽然目前有一些优雅重启方案，但实际应用中可能受限于我们系统内部的运行情况而没有办法做到真正的“优雅”。比如我们为了对去下游的流量进行限制，在内存中堆积一些数据，并对堆积设定时间/总量的阈值。在任意阈值达到之后将数据统一发送给下游，以避免频繁的请求超出下游的承载能力而将下游打垮。这种情况下重启要做到优雅就比较难了。</p>
<p>所以我们的目标还是尽量避免采用或者绕过上线的方式，对线上程序做一些修改。比较典型的修改内容就是程序的配置项。</p>
<h3 id="6-6-1-场景举例"><a href="#6-6-1-场景举例" class="headerlink" title="6.6.1 场景举例"></a>6.6.1 场景举例</h3><h4 id="6-6-1-1-报表系统"><a href="#6-6-1-1-报表系统" class="headerlink" title="6.6.1.1 报表系统"></a>6.6.1.1 报表系统</h4><p>在一些偏 OLAP 或者离线的数据平台中，经过长期的叠代开发，整个系统的功能模块已经渐渐稳定。可变动的项只出现在数据层，而数据层的变动大多可以认为是 SQL 的变动，架构师们自然而然地会想着把这些变动项抽离到系统外部。比如本节所述的配置管理系统。</p>
<p>当业务提出了新的需求时，我们的需求是将新的 SQL 录入到系统内部，或者简单修改一下老的 SQL。不对系统进行上线，就可以直接完成这些修改。</p>
<h4 id="6-6-1-2-业务配置"><a href="#6-6-1-2-业务配置" class="headerlink" title="6.6.1.2 业务配置"></a>6.6.1.2 业务配置</h4><p>大公司的平台部门服务众多业务线，在平台内为各业务线分配唯一 id。平台本身也由多个模块构成，这些模块需要共享相同的业务线定义(要不然就乱套了)。当公司新开产品线时，需要能够在短时间内打通所有平台系统的流程。这时候每个系统都走上线流程肯定是来不及的。另外需要对这种公共配置进行统一管理，同时对其增减逻辑也做统一管理。这些信息变更时，需要自动通知到业务方的系统，而不需要人力介入(或者只需要很简单的介入，比如点击审核通过)。</p>
<p>除业务线管理之外，很多互联网公司会按照城市来铺展自己的业务。在某个城市未开城之前，理论上所有模块都应该认为带有该城市 id 的数据是脏数据并自动过滤掉。而如果业务开城，在系统中就应该自己把这个新的城市 id 自动加入到白名单中。这样业务流程便可以自动运转。</p>
<p>再举个例子，互联网公司的运营系统中会有各种类型的运营活动，有些运营活动推出后可能出现了超出预期的事件(比如公关危机)，需要紧急将系统下线。这时候会用到一些开关来快速关闭相应的功能。或者快速将想要剔除的活动 id 从白名单中剔除。在 web 章节中的 ab test 一节中，我们也提到，有时需要有这样的系统来告诉我们当前需要放多少流量到相应的功能代码上。我们可以像那一节中，使用远程 rpc 来获知这些信息，但同时，也可以结合分布式配置系统，主动地拉取到这些信息。</p>
<h3 id="6-6-2-使用-etcd-实现配置更新"><a href="#6-6-2-使用-etcd-实现配置更新" class="headerlink" title="6.6.2 使用 etcd 实现配置更新"></a>6.6.2 使用 etcd 实现配置更新</h3><h3 id="6-6-2-1-配置定义"><a href="#6-6-2-1-配置定义" class="headerlink" title="6.6.2.1 配置定义"></a>6.6.2.1 配置定义</h3><p>简单的配置，可以将内容完全存储在 etcd 中。比如：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">etcdctl get &#x2F;configs&#x2F;remote_config.json
&#123;
    &quot;addr&quot; : &quot;127.0.0.1:1080&quot;,
    &quot;aes_key&quot; : &quot;01B345B7A9ABC00F0123456789ABCDAF&quot;,
    &quot;https&quot; : false,
    &quot;secret&quot; : &quot;&quot;,
    &quot;private_key_path&quot; : &quot;&quot;,
    &quot;cert_file_path&quot; : &quot;&quot;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="6-6-2-2-新建-etcd-client"><a href="#6-6-2-2-新建-etcd-client" class="headerlink" title="6.6.2.2 新建 etcd client"></a>6.6.2.2 新建 etcd client</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">cfg :&#x3D; client.Config&#123;
    Endpoints:               []string&#123;&quot;http:&#x2F;&#x2F;127.0.0.1:2379&quot;&#125;,
    Transport:               client.DefaultTransport,
    HeaderTimeoutPerRequest: time.Second,
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>直接用 etcd client 包中的结构体初始化，没什么可说的。</p>
<h3 id="6-6-2-3-配置获取"><a href="#6-6-2-3-配置获取" class="headerlink" title="6.6.2.3 配置获取"></a>6.6.2.3 配置获取</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">resp, err &#x3D; kapi.Get(context.Background(), &quot;&#x2F;path&#x2F;to&#x2F;your&#x2F;config&quot;, nil)
if err !&#x3D; nil &#123;
    log.Fatal(err)
&#125; else &#123;
    log.Printf(&quot;Get is done. Metadata is %q\n&quot;, resp)
    log.Printf(&quot;%q key has %q value\n&quot;, resp.Node.Key, resp.Node.Value)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>获取配置使用 etcd KeysAPI 的 Get 方法，比较简单。</p>
<h3 id="6-6-2-4-配置更新订阅"><a href="#6-6-2-4-配置更新订阅" class="headerlink" title="6.6.2.4 配置更新订阅"></a>6.6.2.4 配置更新订阅</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">kapi :&#x3D; client.NewKeysAPI(c)
w :&#x3D; kapi.Watcher(&quot;&#x2F;path&#x2F;to&#x2F;your&#x2F;config&quot;, nil)
go func() &#123;
    for &#123;
        resp, err :&#x3D; w.Next(context.Background())
        log.Println(resp, err)
        log.Println(&quot;new values is &quot;, resp.Node.Value)
    &#125;
&#125;()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过订阅 config 路径的变动事件，在该路径下内容发生变化时，客户端侧可以收到变动通知，并收到变动后的字符串值。</p>
<p>这里只需要注意一点，我们在更新配置时，进行了一系列操作：watch 响应，json 解析，这些操作都不具备原子性。当单个业务请求流程中多次获取 config 时，有可能因为中途 config 发生变化而导致单个请求前后逻辑不一致。因此，在使用类似这样的方式来更新配置时，需要在单个请求的生命周期内使用同样的配置。具体实现方式可以是只在请求开始的时候获取一次配置，然后依次向下透传等等，具体情况具体分析。</p>
<h3 id="6-6-3-配置膨胀"><a href="#6-6-3-配置膨胀" class="headerlink" title="6.6.3 配置膨胀"></a>6.6.3 配置膨胀</h3><p>随着业务的发展，配置系统本身所承载的压力可能也会越来越大，配置文件可能成千上万。客户端同样上万，将配置内容存储在 etcd 内部便不再合适了</p>
<p>随着配置文件数量的膨胀，除了存储系统本身的吞吐量问题，还有配置信息的管理问题。我们需要对相应的配置进行权限管理，需要根据业务量进行配置存储的集群划分。如果客户端太多，导致了配置存储系统无法承受瞬时大量的 QPS，那可能还需要在客户端侧进行缓存优化，等等。</p>
<p>这也就是为什么大公司都会针对自己的业务额外开发一套复杂配置系统的原因。</p>
<h3 id="6-6-4-配置版本管理"><a href="#6-6-4-配置版本管理" class="headerlink" title="6.6.4 配置版本管理"></a>6.6.4 配置版本管理</h3><p>在配置管理过程中，难免出现用户误操作的情况，例如在更新配置时，输入了无法解析的配置。这种情况下我们可以通过配置校验来解决。</p>
<p>有时错误的配置可能不是格式上有问题，而是在逻辑上有问题。比如我们写 SQL 时少 select 了一个字段，更新配置时，不小心把丢掉了 json 字符串中的一个 field 而导致程序无法理解新的配置而进入诡异的逻辑。为了快速止损，最快且最有效的办法就是进行版本管理，并支持按版本回滚。</p>
<p>在配置进行更新时，我们要为每份配置的新内容赋予一个版本号，并将修改前的内容和版本号记录下来，当发现新配置出问题时，能够及时地回滚回来。</p>
<p>常见的做法是，使用 MySQL 来存储配置文件/字符串的不同版本内容，在需要回滚时，只要进行简单的查询即可。</p>
<h3 id="6-6-5-客户端容错"><a href="#6-6-5-客户端容错" class="headerlink" title="6.6.5 客户端容错"></a>6.6.5 客户端容错</h3><p>在业务系统的配置被剥离到配置中心之后，并不意味着我们的系统可以高枕无忧了。当配置中心本身宕机时，我们也需要一定的容错能力，至少保证在其宕机期间，业务依然可以运转。这要求我们的系统能够在配置中心宕机时，也能拿到需要的配置信息。哪怕这些信息不够新。</p>
<p>具体来讲，在给业务提供配置读取的 sdk 时，最好能够将拿到的配置在业务机器的磁盘上也缓存一份。这样远程配置中心不可用时，可以直接用硬盘上的内容来做兜底。当重新连接上配置中心时，再把相应的内容进行更新。</p>
<p>加入缓存之后务必需要考虑的是数据一致性问题，当个别业务机器因为网络错误而与其它机器配置不一致时，我们也应该能够从监控系统中知晓。</p>
<p>我们使用一种手段解决了我们配置更新痛点，但同时可能因为使用的手段而带给我们新的问题。</p>
<h2 id="6-7-分布式爬虫"><a href="#6-7-分布式爬虫" class="headerlink" title="6.7 分布式爬虫"></a>6.7 分布式爬虫</h2><h3 id="nats-简介"><a href="#nats-简介" class="headerlink" title="nats 简介"></a>nats 简介</h3><p>nats 是 Go 实现的一个高性能分布式消息队列，适用于高并发高吞吐量的消息分发场景。早期的 nats 以速度为重，没有支持持久化。从 16 年开始，nats 通过 nats-streaming 支持基于日志的持久化，以及可靠的消息传输。为了演示方便，我们本节中只使用 nats。</p>
<p>nats 的服务端项目是 gnatsd，客户端与 gnatsd 的通信方式为基于 tcp 的文本协议，非常简单：</p>
<p>向 subject 为 task 发消息：</p>
<p><img src="https://go.wuhaolin.cn/advanced-go-programming-book/images/ch6-09-nats-protocol-pub.png" alt="nats-protocol-pub"></p>
<p>以 workers 的 queue 从 tasks subject 订阅消息：</p>
<p><img src="https://go.wuhaolin.cn/advanced-go-programming-book/images/ch6-09-nats-protocol-sub.png" alt="nats-protocol-sub"></p>
<p>其中的 queue 参数是可选的，如果希望在分布式的消费端进行任务的负载均衡，而不是所有人都收到同样的消息，那么就要给消费端指定相同的 queue 名字。</p>
<h4 id="基本消息生产"><a href="#基本消息生产" class="headerlink" title="基本消息生产"></a>基本消息生产</h4><p>生产消息只要指定 subject 即可：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">nc, err :&#x3D; nats.Connect(nats.DefaultURL)
if err !&#x3D; nil &#123;
    &#x2F;&#x2F; log error
    return
&#125;

&#x2F;&#x2F; 指定 subject 为 tasks，消息内容随意
err &#x3D; nc.Publish(&quot;tasks&quot;, []byte(&quot;your task content&quot;))

nc.Flush()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="6-8-补充说明"><a href="#6-8-补充说明" class="headerlink" title="6.8 补充说明"></a>6.8 补充说明</h2><p>分布式是很大的领域，本章中的介绍只能算是对领域的管中窥豹。因为大型系统流量大，并发高，所以往往很多朴素的方案会变得难以满足需求。人们为了解决大型系统场景中的各种问题，而开发出了各式各样的分布式系统。有些系统非常简单，比如本章中介绍的分布式 id 生成器，而有一些系统则可能非常复杂，比如本章中的分布式搜索引擎(当然，本章中提到的 es 不是 Go 实现)。</p>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="附录A：Go语言常见坑"><a href="#附录A：Go语言常见坑" class="headerlink" title="附录A：Go语言常见坑"></a>附录A：Go语言常见坑</h2><h2 id="可变参数是空接口类型"><a href="#可变参数是空接口类型" class="headerlink" title="可变参数是空接口类型"></a>可变参数是空接口类型</h2><p>当参数的可变参数是空接口类型时，传人空接口的切片时需要注意参数展开的问题。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    var a &#x3D; []interface&#123;&#125;&#123;1, 2, 3&#125;

    fmt.Println(a)
    fmt.Println(a...)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>不管是否展开，编译器都无法发现错误，但是输出是不同的：</p>
<blockquote>
<p>[1 2 3]<br>1 2 3</p>
</blockquote>
<h3 id="数组是值传递"><a href="#数组是值传递" class="headerlink" title="数组是值传递"></a>数组是值传递</h3><h3 id="map遍历是顺序不固定"><a href="#map遍历是顺序不固定" class="headerlink" title="map遍历是顺序不固定"></a>map遍历是顺序不固定</h3><h3 id="返回值被屏蔽"><a href="#返回值被屏蔽" class="headerlink" title="返回值被屏蔽"></a>返回值被屏蔽</h3><p>在局部作用域中，命名的返回值内同名的局部变量屏蔽：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func Foo() (err error) &#123;
    if err :&#x3D; Bar(); err !&#x3D; nil &#123;
        return
    &#125;
    return
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="recover必须在defer函数中运行"><a href="#recover必须在defer函数中运行" class="headerlink" title="recover必须在defer函数中运行"></a>recover必须在defer函数中运行</h3><p>recover捕获的是祖父级调用时的异常，直接调用时无效：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    recover()
    panic(1)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>直接defer调用也是无效：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    defer recover()
    panic(1)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>defer调用时多层嵌套依然无效：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    defer func() &#123;
        func() &#123; recover() &#125;()
    &#125;()
    panic(1)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>必须在defer函数中直接调用才有效：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    defer func() &#123;
        recover()
    &#125;()
    panic(1)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="main函数提前退出"><a href="#main函数提前退出" class="headerlink" title="main函数提前退出"></a>main函数提前退出</h3><p>后台Goroutine无法保证完成任务。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    go println(&quot;hello&quot;)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="通过Sleep来回避并发中的问题"><a href="#通过Sleep来回避并发中的问题" class="headerlink" title="通过Sleep来回避并发中的问题"></a>通过Sleep来回避并发中的问题</h3><p>休眠并不能保证输出完整的字符串：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    go println(&quot;hello&quot;)
    time.Sleep(time.Second)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>类似的还有通过插入调度语句：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    go println(&quot;hello&quot;)
    runtime.Gosched()
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="独占CPU导致其它Goroutine饿死"><a href="#独占CPU导致其它Goroutine饿死" class="headerlink" title="独占CPU导致其它Goroutine饿死"></a>独占CPU导致其它Goroutine饿死</h3><p>Goroutine是协作式抢占调度，Goroutine本身不会主动放弃CPU：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    runtime.GOMAXPROCS(1)

    go func() &#123;
        for i :&#x3D; 0; i &lt; 10; i++ &#123;
            fmt.Println(i)
        &#125;
    &#125;()

    for &#123;&#125; &#x2F;&#x2F; 占用CPU
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>解决的方法是在for循环加入runtime.Gosched()调度函数：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    runtime.GOMAXPROCS(1)

    go func() &#123;
        for i :&#x3D; 0; i &lt; 10; i++ &#123;
            fmt.Println(i)
        &#125;
    &#125;()

    for &#123;
        runtime.Gosched()
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>或者是通过阻塞的方式避免CPU占用：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    runtime.GOMAXPROCS(1)

    go func() &#123;
        for i :&#x3D; 0; i &lt; 10; i++ &#123;
            fmt.Println(i)
        &#125;
        os.Exit(0)
    &#125;()

    select&#123;&#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="不同Goroutine之间不满足顺序一致性内存模型"><a href="#不同Goroutine之间不满足顺序一致性内存模型" class="headerlink" title="不同Goroutine之间不满足顺序一致性内存模型"></a>不同Goroutine之间不满足顺序一致性内存模型</h3><p>因为在不同的Goroutine，main函数中无法保证能打印出<code>hello, world</code>:</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var msg string
var done bool

func setup() &#123;
    msg &#x3D; &quot;hello, world&quot;
    done &#x3D; true
&#125;

func main() &#123;
    go setup()
    for !done &#123;
    &#125;
    println(msg)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>解决的办法是用显式同步：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var msg string
var done &#x3D; make(chan bool)

func setup() &#123;
    msg &#x3D; &quot;hello, world&quot;
    done &lt;- true
&#125;

func main() &#123;
    go setup()
    &lt;-done
    println(msg)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>msg的写入是在channel发送之前，所以能保证打印<code>hello, world</code></p>
<h3 id="闭包错误引用同一个变量"><a href="#闭包错误引用同一个变量" class="headerlink" title="闭包错误引用同一个变量"></a>闭包错误引用同一个变量</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    for i :&#x3D; 0; i &lt; 5; i++ &#123;
        defer func() &#123;
            println(i)
        &#125;()
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>改进的方法是在每轮迭代中生成一个局部变量：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    for i :&#x3D; 0; i &lt; 5; i++ &#123;
        i :&#x3D; i
        defer func() &#123;
            println(i)
        &#125;()
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>或者是通过函数参数传入：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    for i :&#x3D; 0; i &lt; 5; i++ &#123;
        defer func(i int) &#123;
            println(i)
        &#125;(i)
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="在循环内部执行defer语句"><a href="#在循环内部执行defer语句" class="headerlink" title="在循环内部执行defer语句"></a>在循环内部执行defer语句</h3><p>defer在函数退出时才能执行，在for执行defer会导致资源延迟释放：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    for i :&#x3D; 0; i &lt; 5; i++ &#123;
        f, err :&#x3D; os.Open(&quot;&#x2F;path&#x2F;to&#x2F;file&quot;)
        if err !&#x3D; nil &#123;
            log.Fatal(err)
        &#125;
        defer f.Close()
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>解决的方法可以在for中构造一个局部函数，在局部函数内部执行defer：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    for i :&#x3D; 0; i &lt; 5; i++ &#123;
        func() &#123;
            f, err :&#x3D; os.Open(&quot;&#x2F;path&#x2F;to&#x2F;file&quot;)
            if err !&#x3D; nil &#123;
                log.Fatal(err)
            &#125;
            defer f.Close()
        &#125;()
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="切片会导致整个底层数组被锁定"><a href="#切片会导致整个底层数组被锁定" class="headerlink" title="切片会导致整个底层数组被锁定"></a>切片会导致整个底层数组被锁定</h3><p>切片会导致整个底层数组被锁定，底层数组无法释放内存。如果底层数组较大会对内存产生很大的压力。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    headerMap :&#x3D; make(map[string][]byte)

    for i :&#x3D; 0; i &lt; 5; i++ &#123;
        name :&#x3D; &quot;&#x2F;path&#x2F;to&#x2F;file&quot;
        data, err :&#x3D; ioutil.ReadFile(name)
        if err !&#x3D; nil &#123;
            log.Fatal(err)
        &#125;
        headerMap[name] &#x3D; data[:1]
    &#125;

    &#x2F;&#x2F; do some thing
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>解决的方法是将结果克隆一份，这样可以释放底层的数组：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    headerMap :&#x3D; make(map[string][]byte)

    for i :&#x3D; 0; i &lt; 5; i++ &#123;
        name :&#x3D; &quot;&#x2F;path&#x2F;to&#x2F;file&quot;
        data, err :&#x3D; ioutil.ReadFile(name)
        if err !&#x3D; nil &#123;
            log.Fatal(err)
        &#125;
        headerMap[name] &#x3D; append([]byte&#123;&#125;, data[:1]...)
    &#125;

    &#x2F;&#x2F; do some thing
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="内存地址会变化"><a href="#内存地址会变化" class="headerlink" title="内存地址会变化"></a>内存地址会变化</h3><p>Go语言中对象的地址可能发生变化，因此指针不能从其它非指针类型的值生成：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    var x int &#x3D; 42
    var p uintptr &#x3D; uintptr(unsafe.Pointer(&amp;x))

    runtime.GC()
    var px *int &#x3D; (*int)(unsafe.Pointer(p))
    println(*px)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当内存发送变化的时候，相关的指针会同步更新，但是非指针类型的uintptr不会做同步更新。</p>
<p>同理CGO中也不能保存Go对象地址。</p>
<h3 id="Goroutine泄露"><a href="#Goroutine泄露" class="headerlink" title="Goroutine泄露"></a>Goroutine泄露</h3><p>Go语言是带内存自动回收的特性，因此内存一般不会泄漏。但是Goroutine确存在泄漏的情况，同时泄漏的Goroutine引用的内存同样无法被回收。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    ch :&#x3D; func() &lt;-chan int &#123;
        ch :&#x3D; make(chan int)
        go func() &#123;
            for i :&#x3D; 0; ; i++ &#123;
                ch &lt;- i
            &#125;
        &#125; ()
        return ch
    &#125;()

    for v :&#x3D; range ch &#123;
        fmt.Println(v)
        if v &#x3D;&#x3D; 5 &#123;
            break
        &#125;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的程序中后台Goroutine向管道输入自然数序列，main函数中输出序列。但是当break跳出for循环的时候，后台Goroutine就处于无法被回收的状态了。</p>
<p>我们可以通过context包来避免这个问题：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    ctx, cancel :&#x3D; context.WithCancel(context.Background())

    ch :&#x3D; func(ctx context.Context) &lt;-chan int &#123;
        ch :&#x3D; make(chan int)
        go func() &#123;
            for i :&#x3D; 0; ; i++ &#123;
                select &#123;
                case &lt;- ctx.Done():
                    return
                case ch &lt;- i:
                &#125;
            &#125;
        &#125; ()
        return ch
    &#125;(ctx)

    for v :&#x3D; range ch &#123;
        fmt.Println(v)
        if v &#x3D;&#x3D; 5 &#123;
            cancel()
            break
        &#125;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当main函数在break跳出循环时，通过调用<code>cancel()</code>来通知后台Goroutine退出，这样就避免了Goroutine的泄漏。</p>
]]></content>
      <categories>
        <category>书摘</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>《Go语言圣经》阅读笔记</title>
    <url>/%E4%B9%A6%E6%91%98/Go/go%E8%AF%AD%E8%A8%80%E5%9C%A3%E7%BB%8F/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为了解决在21世纪多核和网络化环境下越来越复杂的编程问题而发明了Go语言</p>
<p>纵观这几年来的发展趋势，Go语言已经成为云计算、云存储时代最重要的基础编程语言。</p>
<p>Go语言中和并发编程相关的特性是全新的也是有效的，同时对数据抽象和面向对象编程的支持也很灵活。 Go语言同时还集成了自动垃圾收集技术用于更好地管理内存。</p>
<p>Go语言尤其适合编写网络服务相关基础设施，同时也适合开发一些工具软件和系统软件。 但是Go语言确实是一个通用的编程语言，它也可以用在图形图像驱动编程、移动应用程序开发 和机器学习等诸多领域。目前Go语言已经成为受欢迎的作为无类型的脚本语言的替代者： 因为Go编写的程序通常比脚本语言运行的更快也更安全，而且很少会发生意外的类型错误。</p>
<h2 id="Go语言项目"><a href="#Go语言项目" class="headerlink" title="Go语言项目"></a>Go语言项目</h2><p>正如<a href="http://genius.cat-v.org/rob-pike/">Rob Pike</a>所说，“软件的复杂性是乘法级相关的”，通过增加一个部分的复杂性来修复问题通常将慢慢地增加其他部分的复杂性。通过增加功能、选项和配置是修复问题的最快的途径，但是这很容易让人忘记简洁的内涵，即从长远来看，简洁依然是好软件的关键因素。</p>
<p>Go项目包括编程语言本身，附带了相关的工具和标准库，最后但并非代表不重要的是，关于简洁编程哲学的宣言。就事后诸葛的角度来看，Go语言的这些地方都做的还不错：拥有自动垃圾回收、一个包系统、函数作为一等公民、词法作用域、系统调用接口、只读的UTF8字符串等。但是Go语言本身只有很少的特性，也不太可能添加太多的特性。例如，它没有隐式的数值转换，没有构造函数和析构函数，没有运算符重载，没有默认参数，也没有继承，没有泛型，没有异常，没有宏，没有函数修饰，更没有线程局部存储。但是，语言本身是成熟和稳定的，而且承诺保证向后兼容：用之前的Go语言编写程序可以用新版本的Go语言编译器和标准库直接构建而不需要修改代码。</p>
<p>Go语言有足够的类型系统以避免动态语言中那些粗心的类型错误，但是，Go语言的类型系统相比传统的强类型语言又要简洁很多。虽然，有时候这会导致一个“无类型”的抽象类型概念，但是Go语言程序员并不需要像C++或Haskell程序员那样纠结于具体类型的安全属性。在实践中，Go语言简洁的类型系统给程序员带来了更多的安全性和更好的运行时性能。</p>
<p>由于现代计算机是一个并行的机器，Go语言提供了基于CSP（顺序通信进程）的并发特性支持。Go语言的动态栈使得轻量级线程goroutine的初始栈可以很小，因此，创建一个goroutine的代价很小，创建百万级的goroutine完全是可行的。</p>
<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><p>Go语言的代码通过<strong>包</strong>（package）组织，包类似于其它语言里的库（libraries）或者模块（modules）。一个包由位于单个目录下的一个或多个.go源代码文件组成, 目录定义包的作用。每个源文件都以一条<code>package</code>声明语句开始，这个例子里就是<code>package main</code>, 表示该文件属于哪个包，紧跟着一系列导入（import）的包，之后是存储在这个文件里的程序语句。</p>
<p>Go的标准库提供了100多个包，以支持常见功能，如输入、输出、排序以及文本处理。比如<code>fmt</code>包，就含有格式化输出、接收输入的函数。<code>Println</code>是其中一个基础函数，可以打印以空格间隔的一个或多个值，并在最后添加一个换行符，从而输出一整行。</p>
<p><code>main</code>包比较特殊。它定义了一个独立可执行的程序，而不是一个库。在<code>main</code>里的<code>main</code> <em>函数</em> 也很特殊，它是整个程序执行时的入口（译注：C系语言差不多都这样）。</p>
<p>必须恰当导入需要的包，缺少了必要的包或者导入了不需要的包，程序都无法编译通过。这项严格要求避免了程序开发过程中引入未使用的包（译注：Go语言编译过程没有警告信息，争议特性之一）。</p>
<p>Go语言不需要在语句或者声明的末尾添加分号，除非一行上有多条语句。实际上，编译器会主动把特定符号后的换行符转换为分号, 因此换行符添加的位置会影响Go代码的正确解析（译注：比如行末是标识符、整数、浮点数、虚数、字符或字符串文字、关键字<code>break</code>、<code>continue</code>、<code>fallthrough</code>或<code>return</code>中的一个、运算符和分隔符<code>++</code>、<code>--</code>、<code>)</code>、<code>]</code>或<code>&#125;</code>中的一个）举个例子, 函数的左括号<code>&#123;</code>必须和<code>func</code>函数声明在同一行上, 且位于末尾，不能独占一行，而在表达式<code>x + y</code>中，可在<code>+</code>后换行，不能在<code>+</code>前换行（译注：以+结尾的话不会被插入分号分隔符，但是以x结尾的话则会被分号分隔符，从而导致编译错误）</p>
<p>Go语言在代码格式上采取了很强硬的态度。<code>gofmt</code>工具把代码格式化为标准格式（译注：这个格式化工具没有任何可以调整代码格式的参数，Go语言就是这么任性），并且<code>go</code>工具中的<code>fmt</code>子命令会对指定包, 否则默认为当前目录, 中所有.go源文件应用<code>gofmt</code>命令。 这样可以做多种自动源码转换，</p>
<p>很多文本编辑器都可以配置为保存文件时自动执行<code>gofmt</code>，这样你的源代码总会被恰当地格式化。还有个相关的工具，<code>goimports</code>，可以根据代码需要, 自动地添加或删除<code>import</code>声明。</p>
<h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go">package main

import (
    &quot;fmt&quot;
    &quot;os&quot;
)

func main() &#123;
    var s, sep string
    for i :&#x3D; 1; i &lt; len(os.Args); i++ &#123;
        s +&#x3D; sep + os.Args[i]
        sep &#x3D; &quot; &quot;
    &#125;
    fmt.Println(s)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果变量没有显式初始化，则被隐式地赋予其类型的<em>零值</em>（zero value），数值类型是0，字符串类型是空字符串””。这个例子里，声明把s和sep隐式地初始化成空字符串。</p>
<p>++和—都只能放在变量名后面，因此<code>--i</code>非法</p>
<p>Go语言只有for循环这一种循环语句。for循环有多种形式，其中一种如下所示：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">for initialization; condition; post &#123;
    &#x2F;&#x2F; zero or more statements
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><em>initialization</em>语句是可选的，在循环开始前执行。<em>initalization</em>如果存在，必须是一条<em>简单语句</em>（simple statement），即，短变量声明、自增语句、赋值语句或函数调用。<code>condition</code>是一个布尔表达式（boolean expression），其值在每次循环迭代开始时计算。如果为<code>true</code>则执行循环体语句。<code>post</code>语句在循环体执行结束后执行，之后再次对<code>condition</code>求值。<code>condition</code>值为<code>false</code>时，循环结束。</p>
<p>for循环的这三个部分每个都可以省略，如果省略<code>initialization</code>和<code>post</code>，分号也可以省略：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">&#x2F;&#x2F; a traditional &quot;while&quot; loop
for condition &#123;
    &#x2F;&#x2F; ...
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果连<code>condition</code>也省略了，像下面这样：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">&#x2F;&#x2F; a traditional infinite loop
for &#123;
    &#x2F;&#x2F; ...
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>这就变成一个无限循环，尽管如此，还可以用其他方式终止循环, 如一条<code>break</code>或<code>return</code>语句。</p>
<p><code>for</code>循环的另一种形式, 在某种数据类型的区间（range）上遍历，如字符串或切片。<code>echo</code>的第二版本展示了这种形式：</p>
<p><em>gopl.io/ch1/echo2</em></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">&#x2F;&#x2F; Echo2 prints its command-line arguments.
package main

import (
    &quot;fmt&quot;
    &quot;os&quot;
)

func main() &#123;
    s, sep :&#x3D; &quot;&quot;, &quot;&quot;
    for _, arg :&#x3D; range os.Args[1:] &#123;
        s +&#x3D; sep + arg
        sep &#x3D; &quot; &quot;
    &#125;
    fmt.Println(s)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>每次循环迭代，<code>range</code>产生一对值；索引以及在该索引处的元素值。这个例子不需要索引，但<code>range</code>的语法要求, 要处理元素, 必须处理索引。一种思路是把索引赋值给一个临时变量, 如<code>temp</code>, 然后忽略它的值，但Go语言不允许使用无用的局部变量（local variables），因为这会导致编译错误。Go语言中这种情况的解决方法是用<code>空标识符</code>（blank identifier），即<code>_</code>（也就是下划线）。</p>
<p>声明一个变量有好几种方式，下面这些都等价：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">s :&#x3D; &quot;&quot;
var s string
var s &#x3D; &quot;&quot;
var s string &#x3D; &quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>第一种形式，是一条短变量声明，最简洁，但只能用在函数内部，而不能用于包变量。第二种形式依赖于字符串的默认初始化零值机制，被初始化为””。第三种形式用得很少，除非同时声明多个变量。第四种形式显式地标明变量的类型，当变量类型与初值类型相同时，类型冗余, 但如果两者类型不同，变量类型就必须了。实践中一般使用前两种形式中的某个，初始值重要的话就显式地指定变量的类型，否则使用隐式初始化。</p>
<p>如前文所述，每次循环迭代字符串s的内容都会更新。<code>+=</code>连接原字符串、空格和下个参数，产生新字符串, 并把它赋值给<code>s</code>。<code>s</code>原来的内容已经不再使用，将在适当时机对它进行垃圾回收。</p>
<p>如果连接涉及的数据量很大，这种方式代价高昂。一种简单且高效的解决方案是使用<code>strings</code>包的<code>Join</code>函数：</p>
<p><em>gopl.io/ch1/echo3</em></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    fmt.Println(strings.Join(os.Args[1:], &quot; &quot;))
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>最后，如果不关心输出格式，只想看看输出值，或许只是为了调试，可以用<code>Println</code>为我们格式化输出。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">fmt.Println(os.Args[1:])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这条语句的输出结果跟<code>strings.Join</code>得到的结果很像，只是被放到了一对方括号里。切片都会被打印成这种格式。</p>
<h2 id="寻找重复的行"><a href="#寻找重复的行" class="headerlink" title="寻找重复的行"></a>寻找重复的行</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go">package main

import (
	&quot;bufio&quot;
	&quot;fmt&quot;
	&quot;os&quot;
)

func main() &#123;
	counts :&#x3D; make(map[string]int)
	input :&#x3D; bufio.NewScanner(os.Stdin)
	for input.Scan() &#123;
        line :&#x3D; input.Text()
		counts[line]++
	&#125;
	for line, n :&#x3D; range counts &#123;
		if n &gt; 1 &#123;
			fmt.Println(&quot;%d\t%s\t&quot;, n, line)
		&#125;
	&#125;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>为了打印结果，我们使用了基于<code>range</code>的循环，并在<code>counts</code>这个<code>map</code>上迭代。跟之前类似，每次迭代得到两个结果，键和其在<code>map</code>中对应的值。<code>map</code>的迭代顺序并不确定，从实践来看，该顺序随机，每次运行都会变化。这种设计是有意为之的，因为能防止程序依赖特定遍历顺序，而这是无法保证的。</p>
<p>继续来看<code>bufio</code>包，它使处理输入和输出方便又高效。<code>Scanner</code>类型是该包最有用的特性之一，它读取输入并将其拆成行或单词；通常是处理行形式的输入最简单的方法。</p>
<p>程序使用短变量声明创建<code>bufio.Scanner</code>类型的变量<code>input</code>。</p>
<pre class="line-numbers language-none"><code class="language-none">input :&#x3D; bufio.NewScanner(os.Stdin)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>该变量从程序的标准输入中读取内容。每次调用<code>input.Scan()</code>，即读入下一行，并移除行末的换行符；读取的内容可以调用<code>input.Text()</code>得到。<code>Scan</code>函数在读到一行时返回<code>true</code>，不再有输入时返回<code>false</code>。</p>
<p>多程序要么从标准输入中读取数据，如上面的例子所示，要么从一系列具名文件中读取数据。<code>dup</code>程序的下个版本读取标准输入或是使用<code>os.Open</code>打开各个具名文件，并操作它们。</p>
<p><em>gopl.io/ch1/dup2</em></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">&#x2F;&#x2F; Dup2 prints the count and text of lines that appear more than once
&#x2F;&#x2F; in the input.  It reads from stdin or from a list of named files.
package main

import (
    &quot;bufio&quot;
    &quot;fmt&quot;
    &quot;os&quot;
)

func main() &#123;
    counts :&#x3D; make(map[string]int)
    files :&#x3D; os.Args[1:]
    if len(files) &#x3D;&#x3D; 0 &#123;
        countLines(os.Stdin, counts)
    &#125; else &#123;
        for _, arg :&#x3D; range files &#123;
            f, err :&#x3D; os.Open(arg)
            if err !&#x3D; nil &#123;
                fmt.Fprintf(os.Stderr, &quot;dup2: %v\n&quot;, err)
                continue
            &#125;
            countLines(f, counts)
            f.Close()
        &#125;
    &#125;
    for line, n :&#x3D; range counts &#123;
        if n &gt; 1 &#123;
            fmt.Printf(&quot;%d\t%s\n&quot;, n, line)
        &#125;
    &#125;
&#125;

func countLines(f *os.File, counts map[string]int) &#123;
    input :&#x3D; bufio.NewScanner(f)
    for input.Scan() &#123;
        counts[input.Text()]++
    &#125;
    &#x2F;&#x2F; NOTE: ignoring potential errors from input.Err()
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>函数和包级别的变量（package-level entities）可以任意顺序声明，并不影响其被调用。（译注：最好还是遵循一定的规范）</p>
<p><code>dup</code>的前两个版本以”流”模式读取输入，并根据需要拆分成多个行。理论上，这些程序可以处理任意数量的输入数据。还有另一个方法，就是一口气把全部输入数据读到内存中，一次分割为多行，然后处理它们。</p>
<p>这个例子引入了<code>ReadFile</code>函数（来自于<code>io/ioutil</code>包），其读取指定文件的全部内容，<code>strings.Split</code>函数把字符串分割成子串的切片。（<code>Split</code>的作用与前文提到的<code>strings.Join</code>相反。）</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">package main

import (
    &quot;fmt&quot;
    &quot;io&#x2F;ioutil&quot;
    &quot;os&quot;
    &quot;strings&quot;
)

func main() &#123;
    counts :&#x3D; make(map[string]int)
    for _, filename :&#x3D; range os.Args[1:] &#123;
        data, err :&#x3D; ioutil.ReadFile(filename)
        if err !&#x3D; nil &#123;
            fmt.Fprintf(os.Stderr, &quot;dup3: %v\n&quot;, err)
            continue
        &#125;
        for _, line :&#x3D; range strings.Split(string(data), &quot;\n&quot;) &#123;
            counts[line]++
        &#125;
    &#125;
    for line, n :&#x3D; range counts &#123;
        if n &gt; 1 &#123;
            fmt.Printf(&quot;%d\t%s\n&quot;, n, line)
        &#125;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>ReadFile</code>函数返回一个字节切片（byte slice），必须把它转换为<code>string</code>，才能用<code>strings.Split</code>分割。</p>
<p>实现上，<code>bufio.Scanner</code>、<code>ioutil.ReadFile</code>和<code>ioutil.WriteFile</code>都使用<code>*os.File</code>的<code>Read</code>和<code>Write</code>方法，但是，大多数程序员很少需要直接调用那些低级（lower-level）函数。高级（higher-level）函数，像<code>bufio</code>和<code>io/ioutil</code>包中所提供的那些，用起来要容易点。</p>
<h2 id="GIF动画"><a href="#GIF动画" class="headerlink" title="GIF动画"></a>GIF动画</h2><p>当我们import了一个包路径包含有多个单词的package时，比如image/color（image和color两个单词），通常我们只需要用最后那个单词表示这个包就可以。所以当我们写color.White时，这个变量指向的是image/color包里的变量 </p>
<p>这个程序里的常量声明给出了一系列的常量值，常量是指在程序编译后运行时始终都不会变化的值，比如圈数、帧数、延迟值。常量声明和变量声明一般都会出现在包级别，所以这些常量在整个包中都是可以共享的，或者你也可以把常量声明定义在函数体内部，那么这种常量就只能在函数体内用。</p>
<h2 id="1-5-获取URL"><a href="#1-5-获取URL" class="headerlink" title="1.5. 获取URL"></a>1.5. 获取URL</h2><p>Go语言在net这个强大package的帮助下提供了一系列的package来做这件事情，使用这些包可以更简单地用网络收发信息，还可以建立更底层的网络连接，编写服务器程序。在这些情景下，Go语言原生的并发特性（在第八章中会介绍）显得尤其好用。</p>
<h2 id="1-6"><a href="#1-6" class="headerlink" title="1.6"></a>1.6</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go">&#x2F;&#x2F; Fetchall fetches URLs in parallel and reports their times and sizes.
package main

import (
    &quot;fmt&quot;
    &quot;io&quot;
    &quot;io&#x2F;ioutil&quot;
    &quot;net&#x2F;http&quot;
    &quot;os&quot;
    &quot;time&quot;
)

func main() &#123;
    start :&#x3D; time.Now()
    ch :&#x3D; make(chan string)
    for _, url :&#x3D; range os.Args[1:] &#123;
        go fetch(url, ch) &#x2F;&#x2F; start a goroutine
    &#125;
    for range os.Args[1:] &#123;
        fmt.Println(&lt;-ch) &#x2F;&#x2F; receive from channel ch
    &#125;
    fmt.Printf(&quot;%.2fs elapsed\n&quot;, time.Since(start).Seconds())
&#125;

func fetch(url string, ch chan&lt;- string) &#123;
    start :&#x3D; time.Now()
    resp, err :&#x3D; http.Get(url)
    if err !&#x3D; nil &#123;
        ch &lt;- fmt.Sprint(err) &#x2F;&#x2F; send to channel ch
        return
    &#125;
    nbytes, err :&#x3D; io.Copy(ioutil.Discard, resp.Body)
    resp.Body.Close() &#x2F;&#x2F; don&#39;t leak resources
    if err !&#x3D; nil &#123;
        ch &lt;- fmt.Sprintf(&quot;while reading %s: %v&quot;, url, err)
        return
    &#125;
    secs :&#x3D; time.Since(start).Seconds()
    ch &lt;- fmt.Sprintf(&quot;%.2fs  %7d  %s&quot;, secs, nbytes, url)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>goroutine是一种函数的并发执行方式，而channel是用来在goroutine之间进行参数传递。main函数本身也运行在一个goroutine中，而go function则表示创建一个新的goroutine，并在这个新的goroutine中执行这个函数。</p>
<p>当一个goroutine尝试在一个channel上做send或者receive操作时，这个goroutine会阻塞在调用处，直到另一个goroutine从这个channel里接收或者写入值，这样两个goroutine才会继续执行channel操作之后的逻辑。在这个例子中，每一个fetch函数在执行时都会往channel里发送一个值(ch &lt;- expression)，主函数负责接收这些值(&lt;-ch)。这个程序中我们用main函数来接收所有fetch函数传回的字符串，可以避免在goroutine异步执行还没有完成时main函数提前退出。</p>
<h2 id="1-8-Web服务"><a href="#1-8-Web服务" class="headerlink" title="1.8 Web服务"></a>1.8 Web服务</h2><p>o语言的内置库使得写一个类似fetch的web服务器变得异常地简单。在本节中，我们会展示一个微型服务器，这个服务器的功能是返回当前用户正在访问的URL。比如用户访问的是 <a href="http://localhost:8000/hello">http://localhost:8000/hello</a> ，那么响应是URL.Path = “hello”。</p>
<p><em>gopl.io/ch1/server1</em></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">&#x2F;&#x2F; Server1 is a minimal &quot;echo&quot; server.
package main

import (
    &quot;fmt&quot;
    &quot;log&quot;
    &quot;net&#x2F;http&quot;
)

func main() &#123;
    http.HandleFunc(&quot;&#x2F;&quot;, handler) &#x2F;&#x2F; each request calls handler
    log.Fatal(http.ListenAndServe(&quot;localhost:8000&quot;, nil))
&#125;

&#x2F;&#x2F; handler echoes the Path component of the request URL r.
func handler(w http.ResponseWriter, r *http.Request) &#123;
    fmt.Fprintf(w, &quot;URL.Path &#x3D; %q\n&quot;, r.URL.Path)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们只用了八九行代码就实现了一个Web服务程序，这都是多亏了标准库里的方法已经帮我们完成了大量工作。main函数将所有发送到/路径下的请求和handler函数关联起来，/开头的请求其实就是所有发送到当前站点上的请求，服务监听8000端口。发送到这个服务的“请求”是一个http.Request类型的对象，这个对象中包含了请求中的一系列相关字段，其中就包括我们需要的URL。当请求到达服务器时，这个请求会被传给handler函数来处理，这个函数会将/hello这个路径从请求的URL中解析出来，然后把其发送到响应中，这里我们用的是标准输出流的fmt.Fprintf。Web服务会在第7.7节中做更详细的阐述。</p>
<p>让我们在后台运行这个服务程序。如果你的操作系统是Mac OS X或者Linux，那么在运行命令的末尾加上一个&amp;符号，即可让程序简单地跑在后台，windows下可以在另外一个命令行窗口去运行这个程序。</p>
<pre class="line-numbers language-none"><code class="language-none">$ go run src&#x2F;gopl.io&#x2F;ch1&#x2F;server1&#x2F;main.go &amp;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>现在可以通过命令行来发送客户端请求了：</p>
<pre class="line-numbers language-none"><code class="language-none">$ go build gopl.io&#x2F;ch1&#x2F;fetch
$ .&#x2F;fetch http:&#x2F;&#x2F;localhost:8000
URL.Path &#x3D; &quot;&#x2F;&quot;
$ .&#x2F;fetch http:&#x2F;&#x2F;localhost:8000&#x2F;help
URL.Path &#x3D; &quot;&#x2F;help&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>还可以直接在浏览器里访问这个URL，然后得到返回结果</p>
<p>在这个服务的基础上叠加特性是很容易的。一种比较实用的修改是为访问的url添加某种状态。比如，下面这个版本输出了同样的内容，但是会对请求的次数进行计算；对URL的请求结果会包含各种URL被访问的总次数，直接对/count这个URL的访问要除外。</p>
<p><em>gopl.io/ch1/server2</em></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">&#x2F;&#x2F; Server2 is a minimal &quot;echo&quot; and counter server.
package main

import (
    &quot;fmt&quot;
    &quot;log&quot;
    &quot;net&#x2F;http&quot;
    &quot;sync&quot;
)

var mu sync.Mutex
var count int

func main() &#123;
    http.HandleFunc(&quot;&#x2F;&quot;, handler)
    http.HandleFunc(&quot;&#x2F;count&quot;, counter)
    log.Fatal(http.ListenAndServe(&quot;localhost:8000&quot;, nil))
&#125;

&#x2F;&#x2F; handler echoes the Path component of the requested URL.
func handler(w http.ResponseWriter, r *http.Request) &#123;
    mu.Lock()
    count++
    mu.Unlock()
    fmt.Fprintf(w, &quot;URL.Path &#x3D; %q\n&quot;, r.URL.Path)
&#125;

&#x2F;&#x2F; counter echoes the number of calls so far.
func counter(w http.ResponseWriter, r *http.Request) &#123;
    mu.Lock()
    fmt.Fprintf(w, &quot;Count %d\n&quot;, count)
    mu.Unlock()
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个服务器有两个请求处理函数，根据请求的url不同会调用不同的函数：对/count这个url的请求会调用到counter这个函数，其它的url都会调用默认的处理函数。如果你的请求pattern是以/结尾，那么所有以该url为前缀的url都会被这条规则匹配。在这些代码的背后，服务器每一次接收请求处理时都会另起一个goroutine，这样服务器就可以同一时间处理多个请求。然而在并发情况下，假如真的有两个请求同一时刻去更新count，那么这个值可能并不会被正确地增加；这个程序可能会引发一个严重的bug：竞态条件（参见9.1）。为了避免这个问题，我们必须保证每次修改变量的最多只能有一个goroutine，这也就是代码里的mu.Lock()和mu.Unlock()调用将修改count的所有行为包在中间的目的。第九章中我们会进一步讲解共享变量。</p>
<p>Go语言的接口机制会在第7章中讲解，为了在这里简单说明接口能做什么，让我们简单地将这里的web服务器和之前写的lissajous函数结合起来，这样GIF动画可以被写到HTTP的客户端，而不是之前的标准输出流。只要在web服务器的代码里加入下面这几行。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">handler :&#x3D; func(w http.ResponseWriter, r *http.Request) &#123;
    lissajous(w)
&#125;
http.HandleFunc(&quot;&#x2F;&quot;, handler)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>或者另一种等价形式：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">http.HandleFunc(&quot;&#x2F;&quot;, func(w http.ResponseWriter, r *http.Request) &#123;
    lissajous(w)
&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="1-8-本章要点"><a href="#1-8-本章要点" class="headerlink" title="1.8 本章要点"></a>1.8 本章要点</h2><p>Go语言并不需要显式地在每一个case后写break，语言默认执行完case后的逻辑语句会自动退出。当然了，如果你想要相邻的几个case都执行同一逻辑的话，需要自己显式地写上一个fallthrough语句来覆盖这种默认行为。不过fallthrough语句在一般的程序中很少用到。</p>
<p><strong>指针：</strong> Go语言提供了指针。指针是一种直接存储了变量的内存地址的数据类型。在其它语言中，比如C语言，指针操作是完全不受约束的。在另外一些语言中，指针一般被处理为“引用”，除了到处传递这些指针之外，并不能对这些指针做太多事情。Go语言在这两种范围中取了一种平衡。指针是可见的内存地址，&amp;操作符可以返回一个变量的内存地址，并且*操作符可以获取指针指向的变量内容，但是在Go语言里没有指针运算，也就是不能像c语言里可以对指针进行加或减操作。</p>
<p><strong>方法和接口：</strong> 方法是和命名类型关联的一类函数。Go语言里比较特殊的是方法可以被关联到任意一种命名类型。在第六章我们会详细地讲方法。接口是一种抽象类型，这种类型可以让我们以同样的方式来处理不同的固有类型，不用关心它们的具体实现，而只需要关注它们提供的方法。第七章中会详细说明这些内容。</p>
<h1 id="2-程序结构"><a href="#2-程序结构" class="headerlink" title="2.程序结构"></a>2.程序结构</h1><h2 id="2-3-变量"><a href="#2-3-变量" class="headerlink" title="2.3 变量"></a>2.3 变量</h2><p>那么Go语言的自动垃圾收集器是如何知道一个变量是何时可以被回收的呢？这里我们可以避开完整的技术细节，基本的实现思路是，从每个包级的变量和每个当前运行函数的每一个局部变量开始，通过指针或引用的访问路径遍历，是否可以找到该变量。如果不存在这样的访问路径，那么说明该变量是不可达的，也就是说它是否存在并不会影响程序后续的计算结果。</p>
<p>因为一个变量的有效周期只取决于是否可达，因此一个循环迭代内部的局部变量的生命周期可能超出其局部作用域。同时，局部变量可能在函数返回之后依然存在。</p>
<p>编译器会自动选择在栈上还是在堆上分配局部变量的存储空间，但可能令人惊讶的是，这个选择并不是由用var还是new声明变量的方式决定的。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var global *int

func f() &#123;
    var x int
    x &#x3D; 1
    global &#x3D; &amp;x
&#125;

func g() &#123;
    y :&#x3D; new(int)
    *y &#x3D; 1
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>f函数里的x变量必须在堆上分配，因为它在函数退出后依然可以通过包一级的global变量找到，虽然它是在函数内部定义的；用Go语言的术语说，<strong>这个x局部变量从函数f中逃逸了</strong>。相反，当g函数返回时，变量<code>*y</code>将是不可达的，也就是说可以马上被回收的。因此，<code>*y</code>并没有从函数g中逃逸，编译器可以选择在栈上分配<code>*y</code>的存储空间（译注：也可以选择在堆上分配，然后由Go语言的GC回收这个变量的内存空间），虽然这里用的是new方式。其实在任何时候，你并不需为了编写正确的代码而要考虑变量的逃逸行为，要记住的是，<code>逃逸的变量需要额外分配内存，同时对性能的优化可能会产生细微的影响</code>。</p>
<p>Go语言的自动垃圾收集器对编写正确的代码是一个巨大的帮助，但也并不是说你完全不用考虑内存了。你虽然不需要显式地分配和释放内存，但是要编写高效的程序你依然需要了解变量的生命周期。例如，如果将指向短生命周期对象的指针保存到具有长生命周期的对象中，特别是保存到全局变量时，会阻止对短生命周期对象的垃圾回收（从而可能影响程序的性能）。</p>
<h2 id="2-4-赋值"><a href="#2-4-赋值" class="headerlink" title="2.4 赋值"></a>2.4 赋值</h2><p>在稍后我们将看到的三个操作都是类似的用法。如果map查找（§4.3）、类型断言（§7.10）或通道接收（§8.4.2）出现在赋值语句的右边，它们都可能会产生两个结果，有一个额外的布尔结果表示操作是否成功：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">v, ok &#x3D; m[key]             &#x2F;&#x2F; map lookup
v, ok &#x3D; x.(T)              &#x2F;&#x2F; type assertion
v, ok &#x3D; &lt;-ch               &#x2F;&#x2F; channel receive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>译注：map查找（§4.3）、类型断言（§7.10）或通道接收（§8.4.2）出现在赋值语句的右边时，并不一定是产生两个结果，也可能只产生一个结果。对于只产生一个结果的情形，map查找失败时会返回零值，类型断言失败时会发生运行时panic异常，通道接收失败时会返回零值（阻塞不算是失败）。例如下面的例子：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">v &#x3D; m[key]                &#x2F;&#x2F; map查找，失败时返回零值
v &#x3D; x.(T)                 &#x2F;&#x2F; type断言，失败时panic异常
v &#x3D; &lt;-ch                  &#x2F;&#x2F; 管道接收，失败时返回零值（阻塞不算是失败）

_, ok &#x3D; m[key]            &#x2F;&#x2F; map返回2个值
_, ok &#x3D; mm[&quot;&quot;], false     &#x2F;&#x2F; map返回1个值
_ &#x3D; mm[&quot;&quot;]                &#x2F;&#x2F; map返回1个值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-4-2-可赋值性"><a href="#2-4-2-可赋值性" class="headerlink" title="2.4.2. 可赋值性"></a>2.4.2. 可赋值性</h3><p>不管是隐式还是显式地赋值，在赋值语句左边的变量和右边最终的求到的值必须有相同的数据类型。更直白地说，只有右边的值对于左边的变量是可赋值的，赋值语句才是允许的。</p>
<p>可赋值性的规则对于不同类型有着不同要求，对每个新类型特殊的地方我们会专门解释。对于目前我们已经讨论过的类型，它的规则是简单的：类型必须完全匹配，nil可以赋值给任何指针或引用类型的变量。常量（§3.6）则有更灵活的赋值规则，因为这样可以避免不必要的显式的类型转换。</p>
<p>对于两个值是否可以用<code>==</code>或<code>!=</code>进行相等比较的能力也和可赋值能力有关系：对于任何类型的值的相等比较，第二个值必须是对第一个值类型对应的变量是可赋值的，</p>
<h2 id="2-5-类型"><a href="#2-5-类型" class="headerlink" title="2.5 类型"></a>2.5 类型</h2><p><em>gopl.io/ch2/tempconv0</em></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">&#x2F;&#x2F; Package tempconv performs Celsius and Fahrenheit temperature computations.
package tempconv

import &quot;fmt&quot;

type Celsius float64    &#x2F;&#x2F; 摄氏温度
type Fahrenheit float64 &#x2F;&#x2F; 华氏温度

const (
    AbsoluteZeroC Celsius &#x3D; -273.15 &#x2F;&#x2F; 绝对零度
    FreezingC     Celsius &#x3D; 0       &#x2F;&#x2F; 结冰点温度
    BoilingC      Celsius &#x3D; 100     &#x2F;&#x2F; 沸水温度
)

func CToF(c Celsius) Fahrenheit &#123; return Fahrenheit(c*9&#x2F;5 + 32) &#125;

func FToC(f Fahrenheit) Celsius &#123; return Celsius((f - 32) * 5 &#x2F; 9) &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们在这个包声明了两种类型：Celsius和Fahrenheit分别对应不同的温度单位。它们虽然有着相同的底层类型float64，但是它们是不同的数据类型，因此它们不可以被相互比较或混在一个表达式运算。刻意区分类型，可以避免一些像无意中使用不同单位的温度混合计算导致的错误；<strong>因此需要一个类似Celsius(t)或Fahrenheit(t)形式的显式转型操作才能将float64转为对应的类型</strong>。Celsius(t)和Fahrenheit(t)是类型转换操作，它们并不是函数调用。类型转换不会改变值本身，但是会使它们的语义发生变化。另一方面，CToF和FToC两个函数则是对不同温度单位下的温度进行换算，它们会返回不同的值。</p>
<p><strong>对于每一个类型T，都有一个对应的类型转换操作T(x)*</strong>，用于将x转为T类型（译注：如果T是指针类型，可能会需要用小括弧包装T，比如<code>(*int)(0)</code>）。<strong>只有当两个类型的底层基础类型相同时，才允许这种转型操作，或者是两者都是指向相同底层结构的指针类型，这些转换只改变类型而不会影响值本身</strong>。如果x是可以赋值给T类型的值，那么x必然也可以被转为T类型，但是一般没有这个必要。</p>
<p>数值类型之间的转型也是允许的，并且在字符串和一些特定类型的slice之间也是可以转换的，在下一章我们会看到这样的例子。这类转换可能改变值的表现。例如，将一个浮点数转为整数将丢弃小数部分，将一个字符串转为<code>[]byte</code>类型的slice将拷贝一个字符串数据的副本。在任何情况下，运行时不会发生转换失败的错误（译注: <strong>错误只会发生在编译阶段*</strong>）。</p>
<p>比较运算符<code>==</code>和<code>&lt;</code>也可以用来比较一个命名类型的变量和另一个有相同类型的变量，或有着相同底层类型的未命名类型的值之间做比较。但是如果两个值有着不同的类型，则不能直接进行比较：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var c Celsius
var f Fahrenheit
fmt.Println(c &#x3D;&#x3D; 0)          &#x2F;&#x2F; &quot;true&quot;
fmt.Println(f &gt;&#x3D; 0)          &#x2F;&#x2F; &quot;true&quot;
fmt.Println(c &#x3D;&#x3D; f)          &#x2F;&#x2F; compile error: type mismatch
fmt.Println(c &#x3D;&#x3D; Celsius(f)) &#x2F;&#x2F; &quot;true&quot;!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>许多类型都会定义一个String方法，因为当使用fmt包的打印方法时，将会优先使用该类型对应的String方法返回的结果打印，我们将在7.1节讲述。</p>
<h2 id="2-6-包和文件"><a href="#2-6-包和文件" class="headerlink" title="2.6. 包和文件"></a>2.6. 包和文件</h2><p>Go语言中的包和其他语言的库或模块的概念类似，目的都是为了支持模块化、封装、单独编译和代码重用。一个包的源代码保存在一个或多个以.go为文件后缀名的源文件中，通常一个包所在目录路径的后缀是包的导入路径；</p>
<p>每个包都对应一个独立的名字空间。</p>
<p>包还可以让我们通过控制哪些名字是外部可见的来隐藏内部实现信息。在Go语言中，一个简单的规则是：如果一个名字是大写字母开头的，那么该名字是导出的（译注：因为汉字不区分大小写，因此汉字开头的名字是没有导出的）。</p>
<p>在每个源文件的包声明前紧跟着的注释是包注释（§10.7.4）。通常，包注释的第一句应该先是包的功能概要说明。一个包通常只有一个源文件有包注释（译注：如果有多个包注释，目前的文档工具会根据源文件名的先后顺序将它们链接为一个包注释）。如果包注释很大，通常会放到一个独立的doc.go文件中。</p>
<p>对于在包级别声明的变量，如果有初始化表达式则用表达式初始化，还有一些没有初始化表达式的，例如某些表格数据初始化并不是一个简单的赋值过程。在这种情况下，我们可以用一个特殊的init初始化函数来简化初始化工作。每个文件都可以包含多个init初始化函数</p>
<p>这样的init初始化函数除了不能被调用或引用外，其他行为和普通函数类似。在每个文件中的init初始化函数，在程序开始执行时按照它们声明的顺序被自动调用。每个包在解决依赖的前提下，以导入声明的顺序初始化，每个包只会被初始化一次。因此，如果一个p包导入了q包，那么在p包初始化的时候可以认为q包必然已经初始化过了。初始化工作是自下而上进行的，main包最后被初始化。以这种方式，可以确保在main函数执行之前，所有依赖的包都已经完成初始化工作了</p>
<h2 id="2-7-作用域"><a href="#2-7-作用域" class="headerlink" title="2.7 作用域"></a>2.7 作用域</h2><p>个人认为，只要代码不重名名就不用考虑这些问题</p>
<h1 id="第三章-基础数据类型"><a href="#第三章-基础数据类型" class="headerlink" title="第三章　基础数据类型"></a>第三章　基础数据类型</h1><p>虽然数据种类很多，但它们都是对程序中一个变量或状态的间接引用。这意味着对任一引用类型数据的修改都会影响所有该引用的拷贝。</p>
<h2 id="3-1-整型"><a href="#3-1-整型" class="headerlink" title="3.1 整型"></a>3.1 整型</h2><p>Go语言同时提供了有符号和无符号类型的整数运算。这里有int8、int16、int32和int64四种截然不同大小的有符号整数类型，分别对应8、16、32、64bit大小的有符号整数，与此对应的是uint8、uint16、uint32和uint64四种无符号整数类型。</p>
<p>这里还有两种一般对应特定CPU平台机器字大小的有符号和无符号整数int和uint；其中int是应用最广泛的数值类型</p>
<p>Unicode字符rune类型是和int32等价的类型，通常用于表示一个Unicode码点。这两个名称可以互换使用。同样byte也是uint8类型的等价类型，byte类型一般用于强调数值是一个原始的数据而不是一个小的整数。</p>
<p>还有一种无符号的整数类型uintptr，没有指定具体的bit大小但是足以容纳指针。uintptr类型只有在底层编程时才需要，特别是Go语言和C语言函数库或操作系统接口相交互的地方</p>
<p>不管它们的具体大小，int、uint和uintptr是不同类型的兄弟类型。其中int和int32也是不同的类型，即使int的大小也是32bit，在需要将int当作int32类型的地方需要一个显式的类型转换操作，反之亦然。</p>
<p>在Go语言中，%取模运算符的符号和被取模数的符号总是一致的，因此<code>-5%3</code>和<code>-5%-3</code>结果都是-2。除法运算符<code>/</code>的行为则依赖于操作数是否全为整数，比如<code>5.0/4.0</code>的结果是1.25，但是5/4的结果是1，因为整数除法会向着0方向截断余数。</p>
<p>对于每种类型T，如果转换允许的话，类型转换操作T(x)将x转换为T类型。许多整数之间的相互转换并不会改变数值；它们只是告诉编译器如何解释这个值。但是对于将一个大尺寸的整数类型转为一个小尺寸的整数类型，或者是将一个浮点数转为整数，可能会改变数值或丢失精度：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">f :&#x3D; 3.141 &#x2F;&#x2F; a float64
i :&#x3D; int(f)
fmt.Println(f, i) &#x2F;&#x2F; &quot;3.141 3&quot;
f &#x3D; 1.99
fmt.Println(int(f)) &#x2F;&#x2F; &quot;1&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="3-2-浮点数"><a href="#3-2-浮点数" class="headerlink" title="3.2 浮点数"></a>3.2 浮点数</h2><h2 id="3-3-复数"><a href="#3-3-复数" class="headerlink" title="3.3 复数"></a>3.3 复数</h2><h2 id="3-4-布尔型"><a href="#3-4-布尔型" class="headerlink" title="3.4 布尔型"></a>3.4 布尔型</h2><h2 id="3-5-字符串"><a href="#3-5-字符串" class="headerlink" title="3.5 字符串"></a>3.5 字符串</h2><p>一个字符串是一个不可改变的字节序列。</p>
<p>不变性意味着如果两个字符串共享相同的底层数据的话也是安全的，这使得复制任何长度的字符串代价是低廉的。</p>
<h3 id="3-5-1-字符串面值"><a href="#3-5-1-字符串面值" class="headerlink" title="3.5.1. 字符串面值"></a>3.5.1. 字符串面值</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">const GoUsage &#x3D; &#96;Go is a tool for managing Go source code.

Usage:
    go command [arguments]
...&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="3-5-2-Unicode"><a href="#3-5-2-Unicode" class="headerlink" title="3.5.2 Unicode"></a>3.5.2 Unicode</h3><p>通用的表示一个Unicode码点的数据类型是int32，也就是Go语言中rune对应的类型；它的同义词rune符文正是这个意思。 </p>
<h2 id="3-5-字符串-1"><a href="#3-5-字符串-1" class="headerlink" title="3.5. 字符串"></a>3.5. 字符串</h2><p>一个字符串是一个不可改变的字节序列。字符串可以包含任意的数据，包括byte值0，但是通常是用来包含人类可读的文本。文本字符串通常被解释为采用UTF8编码的Unicode码点（rune）序列，我们稍后会详细讨论这个问题。</p>
<p>内置的len函数可以返回一个字符串中的字节数目（不是rune字符数目），索引操作s[i]返回第i个字节的字节值，i必须满足0 ≤ i&lt; len(s)条件约束。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">s :&#x3D; &quot;hello, world&quot;
fmt.Println(len(s))     &#x2F;&#x2F; &quot;12&quot;
fmt.Println(s[0], s[7]) &#x2F;&#x2F; &quot;104 119&quot; (&#39;h&#39; and &#39;w&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>如果试图访问超出字符串索引范围的字节将会导致panic异常：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">c :&#x3D; s[len(s)] &#x2F;&#x2F; panic: index out of range<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>第i个字节并不一定是字符串的第i个字符，因为对于非ASCII字符的UTF8编码会要两个或多个字节。我们先简单说下字符的工作方式。</p>
<p>子字符串操作s[i:j]基于原始的s字符串的第i个字节开始到第j个字节（并不包含j本身）生成一个新字符串。生成的新字符串将包含j-i个字节。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">fmt.Println(s[0:5]) &#x2F;&#x2F; &quot;hello&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>同样，如果索引超出字符串范围或者j小于i的话将导致panic异常。</p>
<p>不管i还是j都可能被忽略，当它们被忽略时将采用0作为开始位置，采用len(s)作为结束的位置。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">fmt.Println(s[:5]) &#x2F;&#x2F; &quot;hello&quot;
fmt.Println(s[7:]) &#x2F;&#x2F; &quot;world&quot;
fmt.Println(s[:])  &#x2F;&#x2F; &quot;hello, world&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>其中+操作符将两个字符串连接构造一个新字符串：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">fmt.Println(&quot;goodbye&quot; + s[5:]) &#x2F;&#x2F; &quot;goodbye, world&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>字符串可以用==和&lt;进行比较；比较通过逐个字节比较完成的，因此比较的结果是字符串自然编码的顺序。</p>
<p>字符串的值是不可变的：一个字符串包含的字节序列永远不会被改变，当然我们也可以给一个字符串变量分配一个新字符串值。可以像下面这样将一个字符串追加到另一个字符串：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">s :&#x3D; &quot;left foot&quot;
t :&#x3D; s
s +&#x3D; &quot;, right foot&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>这并不会导致原始的字符串值被改变，但是变量s将因为+=语句持有一个新的字符串值，但是t依然是包含原先的字符串值。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">fmt.Println(s) &#x2F;&#x2F; &quot;left foot, right foot&quot;
fmt.Println(t) &#x2F;&#x2F; &quot;left foot&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>因为字符串是不可修改的，因此尝试修改字符串内部数据的操作也是被禁止的：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">s[0] &#x3D; &#39;L&#39; &#x2F;&#x2F; compile error: cannot assign to s[0]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>不变性意味着如果两个字符串共享相同的底层数据的话也是安全的，这使得复制任何长度的字符串代价是低廉的。同样，一个字符串s和对应的子字符串切片s[7:]的操作也可以安全地共享相同的内存，因此字符串切片操作代价也是低廉的。在这两种情况下都没有必要分配新的内存。 图3.4演示了一个字符串和两个子串共享相同的底层数据。</p>
<h3 id="3-5-1-字符串面值-1"><a href="#3-5-1-字符串面值-1" class="headerlink" title="3.5.1. 字符串面值"></a>3.5.1. 字符串面值</h3><p>字符串值也可以用字符串面值方式编写，只要将一系列字节序列包含在双引号内即可：</p>
<pre class="line-numbers language-none"><code class="language-none">&quot;Hello, 世界&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://docs.hacknode.org/gopl-zh/images/ch3-04.png" alt="img"></p>
<p>因为Go语言源文件总是用UTF8编码，并且Go语言的文本字符串也以UTF8编码的方式处理，因此我们可以将Unicode码点也写到字符串面值中。</p>
<p>在一个双引号包含的字符串面值中，可以用以反斜杠<code>\</code>开头的转义序列插入任意的数据。下面的换行、回车和制表符等是常见的ASCII控制代码的转义方式：</p>
<pre class="line-numbers language-none"><code class="language-none">\a      响铃
\b      退格
\f      换页
\n      换行
\r      回车
\t      制表符
\v      垂直制表符
\&#39;      单引号 (只用在 &#39;\&#39;&#39; 形式的rune符号面值中)
\&quot;      双引号 (只用在 &quot;...&quot; 形式的字符串面值中)
\\      反斜杠<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以通过十六进制或八进制转义在字符串面值中包含任意的字节。一个十六进制的转义形式是<code>\xhh</code>，其中两个h表示十六进制数字（大写或小写都可以）。一个八进制转义形式是<code>\ooo</code>，包含三个八进制的o数字（0到7），但是不能超过<code>\377</code>（译注：对应一个字节的范围，十进制为255）。每一个单一的字节表达一个特定的值。稍后我们将看到如何将一个Unicode码点写到字符串面值中。</p>
<p>一个原生的字符串面值形式是<code>...</code>，使用反引号代替双引号。在原生的字符串面值中，没有转义操作；全部的内容都是字面的意思，包含退格和换行，因此一个程序中的原生字符串面值可能跨越多行（译注：在原生字符串面值内部是无法直接写<code>字符的，可以用八进制或十六进制转义或+&quot;</code>“连接字符串常量完成）。唯一的特殊处理是会删除回车以保证在所有平台上的值都是一样的，包括那些把回车也放入文本文件的系统（译注：Windows系统会把回车和换行一起放入文本文件中）。</p>
<p>原生字符串面值用于编写正则表达式会很方便，因为正则表达式往往会包含很多反斜杠。原生字符串面值同时被广泛应用于HTML模板、JSON面值、命令行提示信息以及那些需要扩展到多行的场景。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">const GoUsage &#x3D; &#96;Go is a tool for managing Go source code.

Usage:
    go command [arguments]
...&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="3-5-2-Unicode-1"><a href="#3-5-2-Unicode-1" class="headerlink" title="3.5.2. Unicode"></a>3.5.2. Unicode</h3><p>在很久以前，世界还是比较简单的，起码计算机世界就只有一个ASCII字符集：美国信息交换标准代码。ASCII，更准确地说是美国的ASCII，使用7bit来表示128个字符：包含英文字母的大小写、数字、各种标点符号和设备控制符。对于早期的计算机程序来说，这些就足够了，但是这也导致了世界上很多其他地区的用户无法直接使用自己的符号系统。随着互联网的发展，混合多种语言的数据变得很常见（译注：比如本身的英文原文或中文翻译都包含了ASCII、中文、日文等多种语言字符）。如何有效处理这些包含了各种语言的丰富多样的文本数据呢？</p>
<p>答案就是使用Unicode（ <a href="http://unicode.org/">http://unicode.org</a> ），它收集了这个世界上所有的符号系统，包括重音符号和其它变音符号，制表符和回车符，还有很多神秘的符号，每个符号都分配一个唯一的Unicode码点，Unicode码点对应Go语言中的rune整数类型（译注：rune是int32等价类型）。</p>
<p>在第八版本的Unicode标准里收集了超过120,000个字符，涵盖超过100多种语言。这些在计算机程序和数据中是如何体现的呢？通用的表示一个Unicode码点的数据类型是int32，也就是Go语言中rune对应的类型；它的同义词rune符文正是这个意思。</p>
<p>我们可以将一个符文序列表示为一个int32序列。这种编码方式叫UTF-32或UCS-4，每个Unicode码点都使用同样大小的32bit来表示。这种方式比较简单统一，但是它会浪费很多存储空间，因为大多数计算机可读的文本是ASCII字符，本来每个ASCII字符只需要8bit或1字节就能表示。而且即使是常用的字符也远少于65,536个，也就是说用16bit编码方式就能表达常用字符。但是，还有其它更好的编码方法吗？</p>
<h3 id="3-5-3-UTF-8"><a href="#3-5-3-UTF-8" class="headerlink" title="3.5.3. UTF-8"></a>3.5.3. UTF-8</h3><p>UTF8是一个将Unicode码点编码为字节序列的变长编码。UTF8编码是由Go语言之父Ken Thompson和Rob Pike共同发明的，，现在已经是Unicode的标准。</p>
<p>FIXME：这部分讲了一些UTF-8的相关知识，但是我没记。</p>
<h3 id="3-5-4-字符串和Byte切片"><a href="#3-5-4-字符串和Byte切片" class="headerlink" title="3.5.4 字符串和Byte切片"></a>3.5.4 字符串和Byte切片</h3><p>strconv包提供了布尔型、整型数、浮点数和对应字符串的相互转换，还提供了双引号转义相关的转换。</p>
<p>因为字符串是只读的，因此逐步构建字符串会导致很多分配和复制。在这种情况下，使用bytes.Buffer类型将会更有效</p>
<p>unicode包提供了IsDigit、IsLetter、IsUpper和IsLower等类似功能，它们用于给字符分类。每个函数有一个单一的rune类型的参数，然后返回一个布尔值。而像ToUpper和ToLower之类的转换函数将用于rune字符的大小写转换。所有的这些函数都是遵循Unicode标准定义的字母、数字等分类规范。strings包也有类似的函数，它们是ToUpper和ToLower，将原始字符串的每个字符都做相应的转换，然后返回新的字符串。</p>
<h3 id="3-5-5-字符串和数字的转换"><a href="#3-5-5-字符串和数字的转换" class="headerlink" title="3.5.5. 字符串和数字的转换"></a>3.5.5. 字符串和数字的转换</h3><p>将一个整数转为字符串，一种方法是用fmt.Sprintf返回一个格式化的字符串；另一个方法是用strconv.Itoa(“整数到ASCII”)：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">x :&#x3D; 123
y :&#x3D; fmt.Sprintf(&quot;%d&quot;, x)
fmt.Println(y, strconv.Itoa(x)) &#x2F;&#x2F; &quot;123 123&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>FormatInt和FormatUint函数可以用不同的进制来格式化数字：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">fmt.Println(strconv.FormatInt(int64(x), 2)) &#x2F;&#x2F; &quot;1111011&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>如果要将一个字符串解析为整数，可以使用strconv包的Atoi或ParseInt函数，还有用于解析无符号整数的ParseUint函数：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">x, err :&#x3D; strconv.Atoi(&quot;123&quot;)             &#x2F;&#x2F; x is an int
y, err :&#x3D; strconv.ParseInt(&quot;123&quot;, 10, 64) &#x2F;&#x2F; base 10, up to 64 bits<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>ParseInt函数的第三个参数是用于指定整型数的大小；例如16表示int16，0则表示int。在任何情况下，返回的结果y总是int64类型，你可以通过强制类型转换将它转为更小的整数类型。</p>
<p>有时候也会使用fmt.Scanf来解析输入的字符串和数字，特别是当字符串和数字混合在一行的时候，它可以灵活处理不完整或不规则的输入。</p>
<h2 id="3-6-常量"><a href="#3-6-常量" class="headerlink" title="3.6 常量"></a>3.6 常量</h2><p>所有常量的运算都可以在编译期完成，这样可以减少运行时的工作，也方便其他编译优化。</p>
<p>常量间的所有算术运算、逻辑运算和比较运算的结果也是常量</p>
<p>如果是批量声明的常量，除了第一个外其它的常量右边的初始化表达式都可以省略，如果省略初始化表达式则表示使用前面常量的初始化表达式写法，对应的常量类型也一样的。例如：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">const (
    a &#x3D; 1
    b
    c &#x3D; 2
    d
)

fmt.Println(a, b, c, d) &#x2F;&#x2F; &quot;1 1 2 2&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果只是简单地复制右边的常量表达式，其实并没有太实用的价值。但是它可以带来其它的特性，那就是iota常量生成器语法。</p>
<h3 id="3-6-1-iota-常量生成器"><a href="#3-6-1-iota-常量生成器" class="headerlink" title="3.6.1 iota 常量生成器"></a>3.6.1 iota 常量生成器</h3><p>常量声明可以使用iota常量生成器初始化，它用于生成一组以相似规则初始化的常量，但是不用每行都写一遍初始化表达式。在一个const声明语句中，在第一个声明的常量所在的行，iota将会被置为0，然后在每一个有常量声明的行加一。</p>
<p>下面是来自time包的例子，它首先定义了一个Weekday命名类型，然后为一周的每天定义了一个常量，从周日0开始。在其它编程语言中，这种类型一般被称为枚举类型。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type Weekday int

const (
    Sunday Weekday &#x3D; iota
    Monday
    Tuesday
    Wednesday
    Thursday
    Friday
    Saturday
)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>周日将对应0，周一为1，如此等等。</p>
<p>我们也可以在复杂的常量表达式中使用iota，下面是来自net包的例子，用于给一个无符号整数的最低5bit的每个bit指定一个名字：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type Flags uint

const (
    FlagUp Flags &#x3D; 1 &lt;&lt; iota &#x2F;&#x2F; is up
    FlagBroadcast            &#x2F;&#x2F; supports broadcast access capability
    FlagLoopback             &#x2F;&#x2F; is a loopback interface
    FlagPointToPoint         &#x2F;&#x2F; belongs to a point-to-point link
    FlagMulticast            &#x2F;&#x2F; supports multicast access capability
)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>随着iota的递增，每个常量对应表达式1 &lt;&lt; iota，是连续的2的幂，分别对应一个bit位置。使用这些常量可以用于测试、设置或清除对应的bit位的值 </p>
<p><em>Go语言并没有计算幂的运算符。</em></p>
<h3 id="3-6-2-无类型常量"><a href="#3-6-2-无类型常量" class="headerlink" title="3.6.2. 无类型常量"></a>3.6.2. 无类型常量</h3><p>另一个例子，math.Pi无类型的浮点数常量，可以直接用于任意需要浮点数或复数的地方：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var x float32 &#x3D; math.Pi
var y float64 &#x3D; math.Pi
var z complex128 &#x3D; math.Pi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>如果math.Pi被确定为特定类型，比如float64，那么结果精度可能会不一样，同时对于需要float32或complex128类型值的地方则会强制需要一个明确的类型转换 </p>
<p>对于常量面值，不同的写法可能会对应不同的类型。例如0、0.0、0i和<code>\u0000</code>虽然有着相同的常量值，但是它们分别对应无类型的整数、无类型的浮点数、无类型的复数和无类型的字符等不同的常量类型。同样，true和false也是无类型的布尔类型，字符串面值常量是无类型的字符串类型。</p>
<p>只有常量可以是无类型的。当一个无类型的常量被赋值给一个变量的时候，就像下面的第一行语句，或者出现在有明确类型的变量声明的右边，如下面的其余三行语句，无类型的常量将会被隐式转换为对应的类型，如果转换合法的话。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var f float64 &#x3D; 3 + 0i &#x2F;&#x2F; untyped complex -&gt; float64
f &#x3D; 2                  &#x2F;&#x2F; untyped integer -&gt; float64
f &#x3D; 1e123              &#x2F;&#x2F; untyped floating-point -&gt; float64
f &#x3D; &#39;a&#39;                &#x2F;&#x2F; untyped rune -&gt; float64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的语句相当于:</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var f float64 &#x3D; float64(3 + 0i)
f &#x3D; float64(2)
f &#x3D; float64(1e123)
f &#x3D; float64(&#39;a&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>对于一个没有显式类型的变量声明（包括简短变量声明），常量的形式将隐式决定变量的默认类型，就像下面的例子：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">i :&#x3D; 0      &#x2F;&#x2F; untyped integer;        implicit int(0)
r :&#x3D; &#39;\000&#39; &#x2F;&#x2F; untyped rune;           implicit rune(&#39;\000&#39;)
f :&#x3D; 0.0    &#x2F;&#x2F; untyped floating-point; implicit float64(0.0)
c :&#x3D; 0i     &#x2F;&#x2F; untyped complex;        implicit complex128(0i)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意有一点不同：无类型整数常量转换为int，它的内存大小是不确定的，但是无类型浮点数和复数常量则转换为内存大小明确的float64和complex128。 如果不知道浮点数类型的内存大小是很难写出正确的数值算法的，因此Go语言不存在整型类似的不确定内存大小的浮点数和复数类型。</p>
<h1 id="第四章-复合数据类型"><a href="#第四章-复合数据类型" class="headerlink" title="第四章　复合数据类型"></a>第四章　复合数据类型</h1><p>数组和结构体是聚合类型；它们的值由许多元素或成员字段的值组成。数组是由同构的元素组成——每个数组元素都是完全相同的类型——结构体则是由异构的元素组成的。数组和结构体都是有固定内存大小的数据结构。相比之下，slice和map则是动态的数据结构，它们将根据需要动态增长。</p>
<h2 id="4-1-数组"><a href="#4-1-数组" class="headerlink" title="4.1. 数组"></a>4.1. 数组</h2><p>因为数组的长度是固定的，因此在Go语言中很少直接使用数组。和数组对应的类型是Slice（切片），它是可以增长和收缩的动态序列</p>
<p>在数组字面值中，如果在数组的长度位置出现的是“…”省略号，则表示数组的长度是根据初始化值的个数来计算。因此，上面q数组的定义可以简化为</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">q :&#x3D; [...]int&#123;1, 2, 3&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>当调用一个函数的时候，函数的每个调用参数将会被赋值给函数内部的参数变量，所以函数参数变量接收的是一个复制的副本，并不是原始调用的变量。因为函数参数传递的机制导致传递大的数组类型将是低效的，并且对数组参数的任何的修改都是发生在复制的数组上，并不能直接修改调用时原始的数组变量。在这个方面，Go语言对待数组的方式和其它很多编程语言不同，其它编程语言可能会隐式地将数组作为引用或指针对象传入被调用的函数。</p>
<p>虽然通过指针来传递数组参数是高效的，而且也允许在函数内部修改数组的值，但是数组依然是僵化的类型，因为数组的类型包含了僵化的长度信息。</p>
<h2 id="4-2-Slice"><a href="#4-2-Slice" class="headerlink" title="4.2 Slice"></a>4.2 Slice</h2><p>一个slice是一个轻量级的数据结构，提供了访问数组子序列（或者全部）元素的功能，而且slice的底层确实引用一个数组对象。一个slice由三个部分构成：指针、长度和容量。指针指向第一个slice元素对应的底层数组元素的地址，要注意的是slice的第一个元素并不一定就是数组的第一个元素。长度对应slice中元素的数目；长度不能超过容量，容量一般是从slice的开始位置到底层数据的结尾位置。内置的len和cap函数分别返回slice的长度和容量。</p>
<p><img src="https://docs.hacknode.org/gopl-zh/images/ch4-01.png" alt="img"></p>
<p>如果切片操作超出cap(s)的上限将导致一个panic异常，但是超出len(s)则是意味着扩展了slice，因为新slice的长度会变大：</p>
<p>因为slice值包含指向第一个slice元素的指针，因此向函数传递slice将允许在函数内部修改底层数组的元素。换句话说，复制一个slice只是对底层的数组创建了一个新的slice别名（§2.3.2）。</p>
<p>要注意的是slice类型的变量s和数组类型的变量a的初始化语法的差异。slice和数组的字面值语法很类似，它们都是用花括弧包含一系列的初始化元素，但是对于slice并没有指明序列的长度。这会隐式地创建一个合适大小的数组，然后slice的指针指向底层的数组。就像数组字面值一样，slice的字面值也可以按顺序指定初始化值序列，或者是通过索引和元素值指定，或者用两种风格的混合语法初始化。</p>
<p>为何slice不直接支持比较运算符呢？这方面有两个原因。第一个原因，一个slice的元素是间接引用的，一个slice甚至可以包含自身。虽然有很多办法处理这种情形，但是没有一个是简单有效的。</p>
<p>第二个原因，因为slice的元素是间接引用的，一个固定的slice值(译注：指slice本身的值，不是元素的值)在不同的时刻可能包含不同的元素，因为底层数组的元素可能会被修改。而例如Go语言中map的key只做简单的浅拷贝，它要求key在整个生命周期内保持不变性(译注：例如slice扩容，就会导致其本身的值/地址变化)。而用深度相等判断的话，显然在map的key这种场合不合适。对于像指针或chan之类的引用类型，== 相等测试可以判断两个是否是引用相同的对象。一个针对slice的浅相等测试的==操作符可能是有一定用处的，也能临时解决map类型的key问题，但是slice和数组不同的相等测试行为会让人困惑。因此，安全的做法是直接禁止slice之间的比较操作。</p>
<p>slice唯一合法的比较操作是和nil比较，例如：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">if summer &#x3D;&#x3D; nil &#123; &#x2F;* ... *&#x2F; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>一个零值的slice等于nil。一个nil值的slice并没有底层数组。一个nil值的slice的长度和容量都是0，但是也有非nil值的slice的长度和容量也是0的，例如[]int{}或make([]int, 3)[3:]。与任意类型的nil值一样，我们可以用[]int(nil)类型转换表达式来生成一个对应类型slice的nil值。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var s []int    &#x2F;&#x2F; len(s) &#x3D;&#x3D; 0, s &#x3D;&#x3D; nil
s &#x3D; nil        &#x2F;&#x2F; len(s) &#x3D;&#x3D; 0, s &#x3D;&#x3D; nil
s &#x3D; []int(nil) &#x2F;&#x2F; len(s) &#x3D;&#x3D; 0, s &#x3D;&#x3D; nil
s &#x3D; []int&#123;&#125;    &#x2F;&#x2F; len(s) &#x3D;&#x3D; 0, s !&#x3D; nil<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果你需要测试一个slice是否是空的，使用len(s) == 0来判断，而不应该用s == nil来判断。除了和nil相等比较外，一个nil值的slice的行为和其它任意0长度的slice一样；例如reverse(nil)也是安全的。</p>
<p>内置的make函数创建一个指定元素类型、长度和容量的slice。容量部分可以省略，在这种情况下，容量将等于长度。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">make([]T, len)
make([]T, len, cap) &#x2F;&#x2F; same as make([]T, cap)[:len]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>在底层，make创建了一个匿名的数组变量，然后返回一个slice；只有通过返回的slice才能引用底层匿名的数组变量。</p>
<h3 id="4-2-1-append函数"><a href="#4-2-1-append函数" class="headerlink" title="4.2.1. append函数"></a>4.2.1. append函数</h3><p>内置的append函数用于向slice追加元素：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var runes []rune
for _, r :&#x3D; range &quot;Hello, 世界&quot; &#123;
    runes &#x3D; append(runes, r)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>正确地使用slice，需要记住尽管底层数组的元素是间接访问的，但是slice对应结构体本身的指针、长度和容量部分是直接访问的。</p>
<p>slice并不是一个纯粹的引用类型，它实际上是一个类似下面结构体的聚合类型：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type IntSlice struct &#123;
    ptr      *int
    len, cap int
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="4-3-Map"><a href="#4-3-Map" class="headerlink" title="4.3. Map"></a>4.3. Map</h2><p>它是一个无序的key/value对的集合，其中所有的key都是不同的，然后通过给定的key可以在常数时间复杂度内检索、更新或删除对应的value。</p>
<p>其中K对应的key必须是支持==比较运算符的数据类型，所以map可以通过测试key是否相等来判断是否已经存在。虽然浮点数类型也是支持相等运算符比较的，但是将浮点数用做key类型则是一个坏的想法</p>
<p>如果一个查找失败将返回value类型对应的零值，例如，即使map中不存在“bob”下面的代码也可以正常工作，因为ages[“bob”]失败时将返回0。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">ages[&quot;bob&quot;] &#x3D; ages[&quot;bob&quot;] + 1 &#x2F;&#x2F; happy birthday!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>但是map中的元素并不是一个变量，因此我们不能对map的元素进行取址操作：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">_ &#x3D; &amp;ages[&quot;bob&quot;] &#x2F;&#x2F; compile error: cannot take address of map element<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>禁止对map元素取址的原因是map可能随着元素数量的增长而重新分配更大的内存空间，从而可能导致之前的地址无效。</p>
<p>Map的迭代顺序是不确定的，并且不同的哈希函数实现可能导致不同的遍历顺序。在实践中，遍历的顺序是随机的，每一次遍历的顺序都不相同。这是故意的，每次都使用随机的遍历顺序可以强制要求程序不会依赖具体的哈希函数实现。如果要按顺序遍历key/value对，我们必须显式地对key进行排序，可以使用sort包的Strings函数对字符串slice进行排序。下面是常见的处理方式：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">import &quot;sort&quot;

var names []string
for name :&#x3D; range ages &#123;
    names &#x3D; append(names, name)
&#125;
sort.Strings(names)
for _, name :&#x3D; range names &#123;
    fmt.Printf(&quot;%s\t%d\n&quot;, name, ages[name])
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>map类型的零值是nil，也就是没有引用任何哈希表。map上的大部分操作，包括查找、删除、len和range循环都可以安全工作在nil值的map上，它们的行为和一个空的map类似。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var ages map[string]int
fmt.Println(ages &#x3D;&#x3D; nil)    &#x2F;&#x2F; &quot;true&quot;
fmt.Println(len(ages) &#x3D;&#x3D; 0) &#x2F;&#x2F; &quot;true&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>但是向一个nil值的map存入元素将导致一个panic异常：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">ages[&quot;carol&quot;] &#x3D; 21 &#x2F;&#x2F; panic: assignment to entry in nil map<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在向map存数据前必须先创建map。</p>
<p>有时候可能需要知道对应的元素是否真的是在map之中。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">age, ok :&#x3D; ages[&quot;bob&quot;]
if !ok &#123; 
    &#x2F;* &quot;bob&quot; is not a key in this map; age &#x3D;&#x3D; 0. *&#x2F; 
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>你会经常看到将这两个结合起来使用，像这样：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">if age, ok :&#x3D; ages[&quot;bob&quot;]; !ok &#123; &#x2F;* ... *&#x2F; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>Map的value类型也可以是一个聚合类型，比如是一个map或slice。在下面的代码中，图graph的key类型是一个字符串，value类型map[string]bool代表一个字符串集合。从概念上讲，graph将一个字符串类型的key映射到一组相关的字符串集合，它们指向新的graph的key。</p>
<p><em>gopl.io/ch4/graph</em></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var graph &#x3D; make(map[string]map[string]bool)

func addEdge(from, to string) &#123;
    edges :&#x3D; graph[from]
    if edges &#x3D;&#x3D; nil &#123;
        edges &#x3D; make(map[string]bool)
        graph[from] &#x3D; edges
    &#125;
    edges[to] &#x3D; true
&#125;

func hasEdge(from, to string) bool &#123;
    return graph[from][to]
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其中addEdge函数惰性初始化map是一个惯用方式，也就是说在每个值首次作为key时才初始化。addEdge函数显示了如何让map的零值也能正常工作；即使from到to的边不存在，graph[from][to]依然可以返回一个有意义的结果。</p>
<h2 id="4-4-结构体"><a href="#4-4-结构体" class="headerlink" title="4.4 结构体"></a>4.4 结构体</h2><p>如果结构体成员名字是以大写字母开头的，那么该成员就是导出的；这是Go语言导出规则决定的。一个结构体可能同时包含导出和未导出的成员。</p>
<p>一个命名为S的结构体类型将不能再包含S类型的成员：因为一个聚合的值不能包含它自身。（该限制同样适用于数组。）</p>
<p>但是S类型的结构体可以包含<code>*S</code>指针类型的成员，这可以让我们创建递归的数据结构，比如链表和树结构等。</p>
<p>如果结构体没有任何成员的话就是空结构体，写作struct{}。它的大小为0，也不包含任何信息，但是有时候依然是有价值的。有些Go语言程序员用map来模拟set数据结构时，用它来代替map中布尔类型的value，只是强调key的重要性，但是因为节约的空间有限，而且语法比较复杂，所以我们通常会避免这样的用法。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">seen :&#x3D; make(map[string]struct&#123;&#125;) &#x2F;&#x2F; set of strings
&#x2F;&#x2F; ...
if _, ok :&#x3D; seen[s]; !ok &#123;
    seen[s] &#x3D; struct&#123;&#125;&#123;&#125;
    &#x2F;&#x2F; ...first time seeing s...
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="4-4-1-结构体字面值"><a href="#4-4-1-结构体字面值" class="headerlink" title="4.4.1. 结构体字面值"></a>4.4.1. 结构体字面值</h3><p>如果考虑效率的话，较大的结构体通常会用指针的方式传入和返回，</p>
<p>如果要在函数内部修改结构体成员的话，用指针传入是必须的；因为在Go语言中，所有的函数参数都是值拷贝传入的，函数参数将不再是函数调用时的原始变量。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">pp :&#x3D; &amp;Point&#123;1, 2&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>它和下面的语句是等价的</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">pp :&#x3D; new(Point)
*pp &#x3D; Point&#123;1, 2&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>不过&amp;Point{1, 2}写法可以直接在表达式中使用，比如一个函数调用。</p>
<h3 id="4-4-2-结构体比较"><a href="#4-4-2-结构体比较" class="headerlink" title="4.4.2. 结构体比较"></a>4.4.2. 结构体比较</h3><p>如果结构体的全部成员都是可以比较的，那么结构体也是可以比较的，那样的话两个结构体将可以使用==或!=运算符进行比较。</p>
<p>等比较运算符==将比较两个结构体的每个成员，因此下面两个比较的表达式是等价的：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type Point struct&#123; X, Y int &#125;

p :&#x3D; Point&#123;1, 2&#125;
q :&#x3D; Point&#123;2, 1&#125;
fmt.Println(p.X &#x3D;&#x3D; q.X &amp;&amp; p.Y &#x3D;&#x3D; q.Y) &#x2F;&#x2F; &quot;false&quot;
fmt.Println(p &#x3D;&#x3D; q)                   &#x2F;&#x2F; &quot;false&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="4-4-3-结构体嵌入和匿名成员"><a href="#4-4-3-结构体嵌入和匿名成员" class="headerlink" title="4.4.3. 结构体嵌入和匿名成员"></a>4.4.3. 结构体嵌入和匿名成员</h3><p>Go语言有一个特性让我们只声明一个成员对应的数据类型而不指名成员的名字；这类成员就叫匿名成员。匿名成员的数据类型必须是命名的类型或指向一个命名的类型的指针。下面的代码中，Circle和Wheel各自都有一个匿名成员。我们可以说Point类型被嵌入到了Circle结构体，同时Circle类型被嵌入到了Wheel结构体。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type Circle struct &#123;
    Point
    Radius int
&#125;

type Wheel struct &#123;
    Circle
    Spokes int
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>得益于匿名嵌入的特性，我们可以直接访问叶子属性而不需要给出完整的路径：</strong></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var w Wheel
w.X &#x3D; 8            &#x2F;&#x2F; equivalent to w.Circle.Point.X &#x3D; 8
w.Y &#x3D; 8            &#x2F;&#x2F; equivalent to w.Circle.Point.Y &#x3D; 8
w.Radius &#x3D; 5       &#x2F;&#x2F; equivalent to w.Circle.Radius &#x3D; 5
w.Spokes &#x3D; 20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>不幸的是，结构体字面值并没有简短表示匿名成员的语法， 因此下面的语句都不能编译通过：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">w &#x3D; Wheel&#123;8, 8, 5, 20&#125;                       &#x2F;&#x2F; compile error: unknown fields
w &#x3D; Wheel&#123;X: 8, Y: 8, Radius: 5, Spokes: 20&#125; &#x2F;&#x2F; compile error: unknown fields<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>结构体字面值必须遵循形状类型声明时的结构，所以我们只能用下面的两种语法，它们彼此是等价的：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">fmt.Printf(&quot;%#v\n&quot;, w)
&#x2F;&#x2F; Output:
&#x2F;&#x2F; Wheel&#123;Circle:Circle&#123;Point:Point&#123;X:42, Y:8&#125;, Radius:5&#125;, Spokes:20&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><strong>需要注意的是Printf函数中%v参数包含的#副词，它表示用和Go语言类似的语法打印值。对于结构体类型来说，将包含每个成员的名字。</strong></p>
<h2 id="4-5-JSON"><a href="#4-5-JSON" class="headerlink" title="4.5. JSON"></a>4.5. JSON</h2><p>JavaScript对象表示法（JSON）是一种用于发送和接收结构化信息的标准协议。</p>
<p>Go语言对于这些标准格式的编码和解码都有良好的支持，由标准库中的encoding/json、encoding/xml、encoding/asn1等包提供支持（译注：Protocol Buffers的支持由 github.com/golang/protobuf 包提供）</p>
<p>基本的JSON类型有数字（十进制或科学记数法）、布尔值（true或false）、字符串，其中字符串是以双引号包含的Unicode字符序列，支持和Go语言类似的反斜杠转义特性，不过JSON使用的是<code>\Uhhhh</code>转义数字来表示一个UTF-16编码（译注：UTF-16和UTF-8一样是一种变长的编码，有些Unicode码点较大的字符需要用4个字节表示；而且UTF-16还有大端和小端的问题），而不是Go语言的rune类型。</p>
<p>在编码时，默认使用Go语言结构体的成员名字作为JSON的对象（通过reflect反射技术，我们将在12.6节讨论）。只有导出的结构体成员才会被编码，这也就是我们为什么选择用大写字母开头的成员名称。</p>
<p>其中Year名字的成员在编码后变成了released，还有Color成员编码后变成了小写字母开头的color。这是因为结构体成员Tag所导致的。一个结构体成员Tag是和在编译阶段关联到该成员的元信息字符串：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">Year  int  &#96;json:&quot;released&quot;&#96;
Color bool &#96;json:&quot;color,omitempty&quot;&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>因此成员Tag一般用原生字符串面值的形式书写。json开头键名对应的值用于控制encoding/json包的编码和解码的行为，并且encoding/…下面其它的包也遵循这个约定。成员Tag中json对应值的第一部分用于指定JSON对象的名字，比如将Go语言中的TotalCount成员对应到JSON中的total_count对象。Color成员的Tag还带了一个额外的omitempty选项，表示当Go语言结构体成员为空或零值时不生成该JSON对象（这里false为零值）。</p>
<h2 id="4-6-文本和HTML模板"><a href="#4-6-文本和HTML模板" class="headerlink" title="4.6. 文本和HTML模板"></a>4.6. 文本和HTML模板</h2><p>前面的例子，只是最简单的格式化，使用Printf是完全足够的。但是有时候会需要复杂的打印格式，这时候一般需要将格式化代码分离出来以便更安全地修改。这些功能是由text/template和html/template等模板包提供的，它们提供了一个将变量值填充到一个文本或HTML格式的模板的机制。</p>
<p>一个模板是一个字符串或一个文件，里面包含了一个或多个由双花括号包含的<code>&#123;&#123;action&#125;&#125;</code>对象。大部分的字符串只是按字面值打印，但是对于actions部分将触发其它的行为。每个actions都包含了一个用模板语言书写的表达式，一个action虽然简短但是可以输出复杂的打印值，模板语言包含通过选择结构体的成员、调用函数或方法、表达式控制流if-else语句和range循环语句，还有其它实例化模板等诸多特性。下面是一个简单的模板字符串：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">const templ &#x3D; &#96;&#123;&#123;.TotalCount&#125;&#125; issues:
&#123;&#123;range .Items&#125;&#125;----------------------------------------
Number: &#123;&#123;.Number&#125;&#125;
User:   &#123;&#123;.User.Login&#125;&#125;
Title:  &#123;&#123;.Title | printf &quot;%.64s&quot;&#125;&#125;
Age:    &#123;&#123;.CreatedAt | daysAgo&#125;&#125; days
&#123;&#123;end&#125;&#125;&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个模板先打印匹配到的issue总数，然后打印每个issue的编号、创建用户、标题还有存在的时间。对于每一个action，都有一个当前值的概念，对应点操作符，写作“.”。当前值“.”最初被初始化为调用模板时的参数，在当前例子中对应github.IssuesSearchResult类型的变量。模板中<code>&#123;&#123;.TotalCount&#125;&#125;</code>对应action将展开为结构体中TotalCount成员以默认的方式打印的值。模板中<code>&#123;&#123;range .Items&#125;&#125;</code>和<code>&#123;&#123;end&#125;&#125;</code>对应一个循环action，因此它们直接的内容可能会被展开多次，循环每次迭代的当前值对应当前的Items元素的值。</p>
<p>在一个action中，<code>|</code>操作符表示将前一个表达式的结果作为后一个函数的输入，类似于UNIX中管道的概念。在Title这一行的action中，第二个操作是一个printf函数，是一个基于fmt.Sprintf实现的内置函数，所有模板都可以直接使用。对于Age部分，第二个动作是一个叫daysAgo的函数，通过time.Since函数将CreatedAt成员转换为过去的时间长度：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func daysAgo(t time.Time) int &#123;
    return int(time.Since(t).Hours() &#x2F; 24)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><strong>这部分的模板特性是其他语言里没有的</strong></p>
<h1 id="第五章-函数"><a href="#第五章-函数" class="headerlink" title="第五章　函数"></a>第五章　函数</h1><h2 id="5-1-函数声明"><a href="#5-1-函数声明" class="headerlink" title="5.1. 函数声明"></a>5.1. 函数声明</h2><p>我们给出4种方法声明拥有2个int型参数和1个int型返回值的函数.blank identifier(译者注：即下文的_符号)可以强调某个参数未被使用。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func add(x int, y int) int   &#123;return x + y&#125;
func sub(x, y int) (z int)   &#123; z &#x3D; x - y; return&#125;
func first(x int, _ int) int &#123; return x &#125;
func zero(int, int) int      &#123; return 0 &#125;

fmt.Printf(&quot;%T\n&quot;, add)   &#x2F;&#x2F; &quot;func(int, int) int&quot;
fmt.Printf(&quot;%T\n&quot;, sub)   &#x2F;&#x2F; &quot;func(int, int) int&quot;
fmt.Printf(&quot;%T\n&quot;, first) &#x2F;&#x2F; &quot;func(int, int) int&quot;
fmt.Printf(&quot;%T\n&quot;, zero)  &#x2F;&#x2F; &quot;func(int, int) int&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>函数的形参是实参的拷贝。对形参进行修改不会影响实参。但是，如果实参包括引用类型，如指针，slice(切片)、map、function、channel等类型，实参可能会由于函数的间接引用被修改。</p>
<p>你可能会偶尔遇到没有函数体的函数声明，这表示该函数不是以Go实现的。这样的声明定义了函数标识符。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">package math

func Sin(x float64) float &#x2F;&#x2F;implemented in assembly language<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="5-2-递归"><a href="#5-2-递归" class="headerlink" title="5.2. 递归"></a>5.2. 递归</h2><p>golang.org/x/… 目录下存储了一些由Go团队设计、维护，对网络编程、国际化文件处理、移动平台、图像处理、加密解密、开发者工具提供支持的扩展包。未将这些扩展包加入到标准库原因有二，一是部分包仍在开发中，二是对大多数Go语言的开发者而言，扩展包提供的功能很少被使用。</p>
<p>大部分编程语言使用固定大小的函数调用栈，常见的大小从64KB到2MB不等。固定大小栈会限制递归的深度，当你用递归处理大量数据时，需要避免栈溢出；除此之外，还会导致安全性问题。与此相反，Go语言使用可变栈，栈的大小按需增加(初始时很小)。这使得我们使用递归时不必考虑溢出和安全问题。</p>
<h2 id="5-3-多返回值"><a href="#5-3-多返回值" class="headerlink" title="5.3. 多返回值"></a>5.3. 多返回值</h2><p>虽然Go的垃圾回收机制会回收不被使用的内存，但是这不包括操作系统层面的资源，比如打开的文件、网络连接。因此我们必须显式的释放这些资源。</p>
<p>虽然良好的命名很重要，但你也不必为每一个返回值都取一个适当的名字。比如，按照惯例，函数的最后一个bool类型的返回值表示函数是否运行成功，error类型的返回值代表函数的错误信息，对于这些类似的惯例，我们不必思考合适的命名，它们都无需解释。</p>
<p>如果一个函数所有的返回值都有显式的变量名，那么该函数的return语句可以省略操作数。这称之为bare return。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">&#x2F;&#x2F; CountWordsAndImages does an HTTP GET request for the HTML
&#x2F;&#x2F; document url and returns the number of words and images in it.
func CountWordsAndImages(url string) (words, images int, err error) &#123;
    resp, err :&#x3D; http.Get(url)
    if err !&#x3D; nil &#123;
        return
    &#125;
    doc, err :&#x3D; html.Parse(resp.Body)
    resp.Body.Close()
    if err !&#x3D; nil &#123;
        err &#x3D; fmt.Errorf(&quot;parsing HTML: %s&quot;, err)
        return
    &#125;
    words, images &#x3D; countWordsAndImages(doc)
    return
&#125;
func countWordsAndImages(n *html.Node) (words, images int) &#123; &#x2F;* ... *&#x2F; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>按照返回值列表的次序，返回所有的返回值，在上面的例子中，每一个return语句等价于：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">return words, images, err<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>当一个函数有多处return语句以及许多返回值时，bare return 可以减少代码的重复，但是使得代码难以被理解。举个例子，如果你没有仔细的审查代码，很难发现前2处return等价于 return 0,0,err（Go会将返回值 words和images在函数体的开始处，根据它们的类型，将其初始化为0），最后一处return等价于 return words，image，nil。基于以上原因，不宜过度使用bare return。</p>
<h2 id="5-4-错误"><a href="#5-4-错误" class="headerlink" title="5.4. 错误"></a>5.4. 错误</h2><p>panic是来自被调用函数的信号，表示发生了某个已知的bug。一个良好的程序永远不应该发生panic异常。</p>
<p>对于大部分函数而言，永远无法确保能否成功运行。这是因为错误的原因超出了程序员的控制。举个例子，任何进行I/O操作的函数都会面临出现错误的可能，只有没有经验的程序员才会相信读写操作不会失败，因此，当本该可信的操作出乎意料的失败后，我们必须弄清楚导致失败的原因。</p>
<p>在Go的错误处理中，错误是软件包API和应用程序用户界面的一个重要组成部分，程序运行失败仅被认为是几个预期的结果之一。</p>
<p>对于那些将运行失败看作是预期结果的函数，它们会返回一个额外的返回值，通常是最后一个，来传递错误信息。如果导致失败的原因只有一个，额外的返回值可以是一个布尔值，通常被命名为ok。</p>
<p>通常，导致失败的原因不止一种，尤其是对I/O操作而言，用户需要了解更多的错误信息。因此，额外的返回值不再是简单的布尔类型，而是error类型。</p>
<p>内置的error是接口类型。我们将在第七章了解接口类型的含义，以及它对错误处理的影响。现在我们只需要明白error类型可能是nil或者non-nil。nil意味着函数运行成功，non-nil表示失败。对于non-nil的error类型,我们可以通过调用error的Error函数或者输出函数获得字符串类型的错误信息。</p>
<p>通常，当函数返回non-nil的error时，其他的返回值是未定义的(undefined),这些未定义的返回值应该被忽略。然而，有少部分函数在发生错误时，仍然会返回一些有用的返回值。比如，当读取文件发生错误时，Read函数会返回可以读取的字节数以及错误信息。对于这种情况，正确的处理方式应该是先处理这些不完整的数据，再处理错误。因此对函数的返回值要有清晰的说明，以便于其他人使用。</p>
<p>在Go中，函数运行失败时会返回错误信息，这些错误信息被认为是一种预期的值而非异常（exception），这使得Go有别于那些将函数运行失败看作是异常的语言。虽然Go有各种异常机制，但这些机制仅被使用在处理那些未被预料到的错误，即bug，而不是那些在健壮程序中应该被避免的程序错误。对于Go的异常机制我们将在5.9介绍。</p>
<p>Go这样设计的原因是由于对于某个应该在控制流程中处理的错误而言，将这个错误以异常的形式抛出会混乱对错误的描述，这通常会导致一些糟糕的后果。当某个程序错误被当作异常处理后，这个错误会将堆栈跟踪信息返回给终端用户，这些信息复杂且无用，无法帮助定位错误。</p>
<p>正因此，Go使用控制流机制（如if和return）处理错误，这使得编码人员能更多的关注错误处理。</p>
<h3 id="5-4-1-错误处理策略"><a href="#5-4-1-错误处理策略" class="headerlink" title="5.4.1. 错误处理策略"></a>5.4.1. 错误处理策略</h3><p>常用的五种方式</p>
<p>首先，也是最常用的方式是传播错误。这意味着函数中某个子程序的失败，会变成该函数的失败。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">resp, err :&#x3D; http.Get(url)
if err !&#x3D; nil&#123;
    return nil, err
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>fmt.Errorf函数使用fmt.Sprintf格式化错误信息并返回。我们使用该函数添加额外的前缀上下文信息到原始错误信息。当错误最终由main函数处理时，错误信息应提供清晰的从原因到后果的因果链，</p>
<p>由于错误信息经常是以链式组合在一起的，所以错误信息中应避免大写和换行符。最终的错误信息可能很长，我们可以通过类似grep的工具处理错误信息（译者注：grep是一种文本搜索工具）。</p>
<p>以os包为例，os包确保文件操作（如os.Open、Read、Write、Close）返回的每个错误的描述不仅仅包含错误的原因（如无权限，文件目录不存在）也包含文件名，这样调用者在构造新的错误信息时无需再添加这些信息。</p>
<p>一般而言，被调用函数f(x)会将调用信息和参数信息作为发生错误时的上下文放在错误信息中并返回给调用者，调用者需要添加一些错误信息中不包含的信息， </p>
<p>如果错误发生后，程序无法继续运行，我们就可以采用第三种策略：输出错误信息并结束程序。需要注意的是，这种策略只应在main中执行。对库函数而言，应仅向上传播错误，除非该错误意味着程序内部包含不一致性，即遇到了bug，才能在库函数中结束程序。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">&#x2F;&#x2F; (In function main.)
if err :&#x3D; WaitForServer(url); err !&#x3D; nil &#123;
    fmt.Fprintf(os.Stderr, &quot;Site is down: %v\n&quot;, err)
    os.Exit(1)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>调用log.Fatalf可以更简洁的代码达到与上文相同的效果。log中的所有函数，都默认会在错误信息之前输出时间信息。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">if err :&#x3D; WaitForServer(url); err !&#x3D; nil &#123;
    log.Fatalf(&quot;Site is down: %v\n&quot;, err)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>长时间运行的服务器常采用默认的时间格式，而交互式工具很少采用包含如此多信息的格式。</p>
<pre class="line-numbers language-none"><code class="language-none">2006&#x2F;01&#x2F;02 15:04:05 Site is down: no such domain:
bad.gopl.io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>第四种策略：有时，我们只需要输出错误信息就足够了，不需要中断程序的运行。我们可以通过log包提供函数</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">if err :&#x3D; Ping(); err !&#x3D; nil &#123;
    log.Printf(&quot;ping failed: %v; networking disabled&quot;,err)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>或者标准错误流输出错误信息。</p>
<p>第五种，也是最后一种策略：我们可以直接忽略掉错误。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">dir, err :&#x3D; ioutil.TempDir(&quot;&quot;, &quot;scratch&quot;)
if err !&#x3D; nil &#123;
    return fmt.Errorf(&quot;failed to create temp dir: %v&quot;,err)
&#125;
&#x2F;&#x2F; ...use temp dir…
os.RemoveAll(dir) &#x2F;&#x2F; ignore errors; $TMPDIR is cleaned periodically<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>尽管os.RemoveAll会失败，但上面的例子并没有做错误处理。这是因为操作系统会定期的清理临时目录。</p>
<p><strong>在Go中，错误处理有一套独特的编码风格。检查某个子函数是否失败后，我们通常将处理失败的逻辑代码放在处理成功的代码之前。如果某个错误会导致函数返回，那么成功时的逻辑代码不应放在else语句块中，而应直接放在函数体中。Go中大部分函数的代码结构几乎相同，首先是一系列的初始检查，防止错误发生，之后是函数的实际逻辑。*</strong></p>
<h3 id="5-4-2-文件结尾错误（EOF）"><a href="#5-4-2-文件结尾错误（EOF）" class="headerlink" title="5.4.2. 文件结尾错误（EOF）"></a>5.4.2. 文件结尾错误（EOF）</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">in :&#x3D; bufio.NewReader(os.Stdin)
for &#123;
    r, _, err :&#x3D; in.ReadRune()
    if err &#x3D;&#x3D; io.EOF &#123;
        break &#x2F;&#x2F; finished reading
    &#125;
    if err !&#x3D; nil &#123;
        return fmt.Errorf(&quot;read failed:%v&quot;, err)
    &#125;
    &#x2F;&#x2F; ...use r…
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>因为文件结束这种错误不需要更多的描述，所以io.EOF有固定的错误信息——“EOF”。对于其他错误，我们可能需要在错误信息中描述错误的类型和数量，这使得我们不能像io.EOF一样采用固定的错误信息。  </p>
<h2 id="5-5-函数值"><a href="#5-5-函数值" class="headerlink" title="5.5. 函数值"></a>5.5. 函数值</h2><p>在Go中，函数被看作第一类值（first-class values）：函数像其他值一样，拥有类型，可以被赋值给其他变量，传递给函数，从函数返回。</p>
<p>函数类型的零值是nil。调用值为nil的函数值会引起panic错误：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var f func(int) int
f(3) &#x2F;&#x2F; 此处f的值为nil, 会引起panic错误<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>函数值可以与nil比较：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var f func(int) int
if f !&#x3D; nil &#123;
    f(3)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>但是函数值之间是不可比较的，也不能用函数值作为map的key。</p>
<h2 id="5-6-匿名函数"><a href="#5-6-匿名函数" class="headerlink" title="5.6. 匿名函数"></a>5.6. 匿名函数</h2><p>拥有函数名的函数只能在包级语法块中被声明，通过函数字面量（function literal），我们可绕过这一限制，在任何表达式中表示一个函数值。</p>
<p>函数字面量允许我们在使用函数时，再定义它。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">strings.Map(func(r rune) rune &#123; return r + 1 &#125;, &quot;HAL-9000&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>更为重要的是，通过这种方式定义的函数可以访问完整的词法环境（lexical environment），这意味着在函数中定义的内部函数可以引用该函数的变量，如下例所示：</p>
<p><em>gopl.io/ch5/squares</em></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">&#x2F;&#x2F; squares返回一个匿名函数。
&#x2F;&#x2F; 该匿名函数每次被调用时都会返回下一个数的平方。
func squares() func() int &#123;
    var x int
    return func() int &#123;
        x++
        return x * x
    &#125;
&#125;

func main() &#123;
    f :&#x3D; squares()
    fmt.Println(f()) &#x2F;&#x2F; &quot;1&quot;
    fmt.Println(f()) &#x2F;&#x2F; &quot;4&quot;
    fmt.Println(f()) &#x2F;&#x2F; &quot;9&quot;
    fmt.Println(f()) &#x2F;&#x2F; &quot;16&quot;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>squares的例子证明，函数值不仅仅是一串代码，还记录了状态。</p>
<p>在squares中定义的匿名内部函数可以访问和更新squares中的局部变量，这意味着匿名函数和squares中，存在变量引用。这就是函数值属于引用类型和函数值不可比较的原因。Go使用闭包（closures）技术实现函数值，Go程序员也把函数值叫做闭包。</p>
<p>通过这个例子，我们看到变量的生命周期不由它的作用域决定：squares返回后，变量x仍然隐式的存在于f中。</p>
<h3 id="5-6-1-警告：捕获迭代变量"><a href="#5-6-1-警告：捕获迭代变量" class="headerlink" title="5.6.1. 警告：捕获迭代变量"></a>5.6.1. 警告：捕获迭代变量</h3><h2 id="5-7-可变参数"><a href="#5-7-可变参数" class="headerlink" title="5.7. 可变参数"></a>5.7. 可变参数</h2><p>在声明可变参数函数时，需要在参数列表的最后一个参数类型之前加上省略符号“…”，这表示该函数会接收任意数量的该类型参数。</p>
<p><em>gopl.io/ch5/sum</em></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func sum(vals...int) int &#123;
    total :&#x3D; 0
    for _, val :&#x3D; range vals &#123;
        total +&#x3D; val
    &#125;
    return total
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在上面的代码中，调用者隐式的创建一个数组，并将原始参数复制到数组中，再把数组的一个切片作为参数传给被调用函数。如果原始参数已经是切片类型，我们该如何传递给sum？只需在最后一个参数后加上省略符。下面的代码功能与上个例子中最后一条语句相同。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">values :&#x3D; []int&#123;1, 2, 3, 4&#125;
fmt.Println(sum(values...)) &#x2F;&#x2F; &quot;10&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>虽然在可变参数函数内部，…int 型参数的行为看起来很像切片类型，但实际上，可变参数函数和以切片作为参数的函数是不同的。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func f(...int) &#123;&#125;
func g([]int) &#123;&#125;
fmt.Printf(&quot;%T\n&quot;, f) &#x2F;&#x2F; &quot;func(...int)&quot;
fmt.Printf(&quot;%T\n&quot;, g) &#x2F;&#x2F; &quot;func([]int)&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>可变参数函数经常被用于格式化字符串。</p>
<p>函数名的后缀f是一种通用的命名规范，代表该可变参数函数可以接收Printf风格的格式化字符串。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func errorf(linenum int, format string, args ...interface&#123;&#125;) &#123;
    fmt.Fprintf(os.Stderr, &quot;Line %d: &quot;, linenum)
    fmt.Fprintf(os.Stderr, format, args...)
    fmt.Fprintln(os.Stderr)
&#125;
linenum, name :&#x3D; 12, &quot;count&quot;
errorf(linenum, &quot;undefined: %s&quot;, name) &#x2F;&#x2F; &quot;Line 12: undefined: count&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>interface{}表示函数的最后一个参数可以接收任意类型 </p>
<h2 id="5-8-Deferred函数"><a href="#5-8-Deferred函数" class="headerlink" title="5.8. Deferred函数"></a>5.8. Deferred函数</h2><p>你只需要在调用普通函数或方法前加上关键字defer，就完成了defer所需要的语法。当执行到该条语句时，函数和参数表达式得到计算，但直到包含该defer语句的函数执行完毕时，defer后的函数才会被执行，不论包含defer语句的函数是通过return正常结束，还是由于panic导致的异常结束。你可以在一个函数中执行多条defer语句，它们的执行顺序与声明顺序相反。</p>
<p>defer语句经常被用于处理成对的操作，如打开、关闭、连接、断开连接、加锁、释放锁。通过defer机制，不论函数逻辑多复杂，都能保证在任何执行路径下，资源被释放。释放资源的defer应该直接跟在请求资源的语句后。 </p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">package ioutil
func ReadFile(filename string) ([]byte, error) &#123;
    f, err :&#x3D; os.Open(filename)
    if err !&#x3D; nil &#123;
        return nil, err
    &#125;
    defer f.Close()
    return ReadAll(f)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>或是处理互斥锁（9.2章）</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var mu sync.Mutex
var m &#x3D; make(map[string]int)
func lookup(key string) int &#123;
    mu.Lock()
    defer mu.Unlock()
    return m[key]
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>调试复杂程序时，defer机制也常被用于记录何时进入和退出函数。</p>
<p>下例中的bigSlowOperation函数，直接调用trace记录函数的被调情况。bigSlowOperation被调时，trace会返回一个函数值，该函数值会在bigSlowOperation退出时被调用。通过这种方式， 我们可以只通过一条语句控制函数的入口和所有的出口，甚至可以记录函数的运行时间，如例子中的start。需要注意一点：<strong>不要忘记defer语句后的圆括号</strong>，否则本该在进入时执行的操作会在退出时执行，而本该在退出时执行的，永远不会被执行。</p>
<p><em>gopl.io/ch5/trace</em></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func bigSlowOperation() &#123;
    defer trace(&quot;bigSlowOperation&quot;)() &#x2F;&#x2F; don&#39;t forget the extra parentheses
    &#x2F;&#x2F; ...lots of work…
    time.Sleep(10 * time.Second) &#x2F;&#x2F; simulate slow operation by sleeping
&#125;
func trace(msg string) func() &#123;
    start :&#x3D; time.Now()
    log.Printf(&quot;enter %s&quot;, msg)
    return func() &#123; 
        log.Printf(&quot;exit %s (%s)&quot;, msg,time.Since(start)) 
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> 通过os.Create打开文件进行写入，在关闭文件时，我们没有对f.close采用defer机制，因为这会产生一些微妙的错误。许多文件系统，尤其是NFS，写入文件时发生的错误会被延迟到文件关闭时反馈。如果没有检查文件关闭时的反馈信息，可能会导致数据丢失，而我们还误以为写入操作成功。如果io.Copy和f.close都失败了，我们倾向于将io.Copy的错误信息反馈给调用者，因为它先于f.close发生，更有可能接近问题的本质。</p>
<h2 id="5-9-Panic异常"><a href="#5-9-Panic异常" class="headerlink" title="5.9. Panic异常"></a>5.9. Panic异常</h2><p>Go的类型系统会在编译时捕获很多错误，但有些错误只能在运行时检查，如数组访问越界、空指针引用等。这些运行时错误会引起painc异常。</p>
<p>一般而言，当panic异常发生时，程序会中断运行，并立即执行在该goroutine中被延迟的函数（defer 机制）。随后，程序崩溃并输出日志信息</p>
<p>不是所有的panic异常都来自运行时，直接调用内置的panic函数也会引发panic异常；panic函数接受任何值作为参数。当某些不应该发生的场景发生时，我们就应该调用panic。比如，当程序到达了某条逻辑上不可能到达的路径：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">switch s :&#x3D; suit(drawCard()); s &#123;
    case &quot;Spades&quot;:                                &#x2F;&#x2F; ...
    case &quot;Hearts&quot;:                                &#x2F;&#x2F; ...
    case &quot;Diamonds&quot;:                              &#x2F;&#x2F; ...
    case &quot;Clubs&quot;:                                 &#x2F;&#x2F; ...
    default:
        panic(fmt.Sprintf(&quot;invalid suit %q&quot;, s)) &#x2F;&#x2F; Joker?
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>断言函数必须满足的前置条件是明智的做法，但这很容易被滥用。除非你能提供更多的错误信息，或者能更快速的发现错误，否则不需要使用断言，<strong>编译器在运行时会帮你检查代码。</strong></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func Reset(x *Buffer) &#123;
    if x &#x3D;&#x3D; nil &#123;
        panic(&quot;x is nil&quot;) &#x2F;&#x2F; unnecessary!
    &#125;
    x.elements &#x3D; nil
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>虽然Go的panic机制类似于其他语言的异常，但panic的适用场景有一些不同。由于panic会引起程序的崩溃，因此panic一般用于严重错误，如程序内部的逻辑不一致。<strong>勤奋的程序员认为任何崩溃都表明代码中存在漏洞，所以对于大部分漏洞，我们应该使用Go提供的错误机制，而不是panic，</strong>尽量避免程序的崩溃。在健壮的程序中，任何可以预料到的错误，如不正确的输入、错误的配置或是失败的I/O操作都应该被优雅的处理，最好的处理方式，就是使用Go的错误机制。</p>
<p>我们在下一节将看到，如何使程序从panic异常中恢复，阻止程序的崩溃</p>
<p>为了方便诊断问题，runtime包允许程序员输出堆栈信息。在下面的例子中，我们通过在main函数中延迟调用printStack输出堆栈信息。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    defer printStack()
    f(3)
&#125;
func printStack() &#123;
    var buf [4096]byte
    n :&#x3D; runtime.Stack(buf[:], false)
    os.Stdout.Write(buf[:n])
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>将panic机制类比其他语言异常机制的读者可能会惊讶，runtime.Stack为何能输出已经被释放函数的信息？在Go的panic机制中，延迟函数的调用在释放堆栈信息之前。</p>
<h2 id="5-10-Recover捕获异常"><a href="#5-10-Recover捕获异常" class="headerlink" title="5.10. Recover捕获异常"></a>5.10. Recover捕获异常</h2><p>如果在deferred函数中调用了内置函数recover，并且定义该defer语句的函数发生了panic异常，recover会使程序从panic中恢复，并返回panic value。导致panic异常的函数不会继续运行，但能正常返回。在未发生panic时调用recover，recover会返回nil。</p>
<p>让我们以语言解析器为例，说明recover的使用场景。考虑到语言解析器的复杂性，即使某个语言解析器目前工作正常，也无法肯定它没有漏洞。因此，当某个异常出现时，我们不会选择让解析器崩溃，而是会将panic异常当作普通的解析错误，并附加额外信息提醒用户报告此错误。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func Parse(input string) (s *Syntax, err error) &#123;
    defer func() &#123;
        if p :&#x3D; recover(); p !&#x3D; nil &#123;
            err &#x3D; fmt.Errorf(&quot;internal error: %v&quot;, p)
        &#125;
    &#125;()
    &#x2F;&#x2F; ...parser...
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>deferred函数帮助Parse从panic中恢复。在deferred函数内部，panic value被附加到错误信息中；并用err变量接收错误信息，返回给调用者。我们也可以通过调用runtime.Stack往错误信息中添加完整的堆栈调用信息。</p>
<p>虽然把对panic的处理都集中在一个包下，有助于简化对复杂和不可以预料问题的处理，但作为被广泛遵守的规范，你不应该试图去恢复其他包引起的panic。公有的API应该将函数的运行失败作为error返回，而不是panic。同样的，你也不应该恢复一个由他人开发的函数引起的panic，比如说调用者传入的回调函数，因为你无法确保这样做是安全的。</p>
<p>有时我们很难完全遵循规范，举个例子，net/http包中提供了一个web服务器，将收到的请求分发给用户提供的处理函数。很显然，我们不能因为某个处理函数引发的panic异常，杀掉整个进程；web服务器遇到处理函数导致的panic时会调用recover，输出堆栈信息，继续运行。这样的做法在实践中很便捷，但也会引起资源泄漏，或是因为recover操作，导致其他问题。</p>
<p>基于以上原因，安全的做法是有选择性的recover。换句话说，只恢复应该被恢复的panic异常，此外，这些异常所占的比例应该尽可能的低。为了标识某个panic是否应该被恢复，我们可以将panic value设置成特殊类型。在recover时对panic value进行检查，如果发现panic value是特殊类型，就将这个panic作为errror处理，如果不是，则按照正常的panic进行处理</p>
<p>有些情况下，我们无法恢复。某些致命错误会导致Go在运行时终止程序，如内存不足。</p>
<h1 id="第六章-方法"><a href="#第六章-方法" class="headerlink" title="第六章　方法"></a>第六章　方法</h1><h2 id="6-1-方法声明"><a href="#6-1-方法声明" class="headerlink" title="6.1. 方法声明"></a>6.1. 方法声明</h2><p>在函数声明时，在其名字之前放上一个变量，即是一个方法。这个附加的参数会将该函数附加到这种类型上，即相当于为这种类型定义了一个独占的方法。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">package geometry

import &quot;math&quot;

type Point struct&#123; X, Y float64 &#125;

&#x2F;&#x2F; traditional function
func Distance(p, q Point) float64 &#123;
    return math.Hypot(q.X-p.X, q.Y-p.Y)
&#125;

&#x2F;&#x2F; same thing, but as a method of the Point type
func (p Point) Distance(q Point) float64 &#123;
    return math.Hypot(q.X-p.X, q.Y-p.Y)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的代码里那个附加的参数p，叫做方法的接收器(receiver)，早期的面向对象语言留下的遗产将调用一个方法称为“向一个对象发送消息”。</p>
<p>在Go语言中，我们并不会像其它语言那样用this或者self作为接收器；我们可以任意的选择接收器的名字。由于接收器的名字经常会被使用到，所以保持其在方法间传递时的一致性和简短性是不错的主意。这里的建议是可以使用其类型的第一个字母，比如这里使用了Point的首字母p。</p>
<p>在方法调用过程中，接收器参数一般会在方法名之前出现。这和方法声明是一样的，都是接收器参数在方法名字之前。下面是例子：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">p :&#x3D; Point&#123;1, 2&#125;
q :&#x3D; Point&#123;4, 6&#125;
fmt.Println(Distance(p, q)) &#x2F;&#x2F; &quot;5&quot;, function call
fmt.Println(p.Distance(q))  &#x2F;&#x2F; &quot;5&quot;, method call<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的两个函数调用都是Distance，但是却没有发生冲突。第一个Distance的调用实际上用的是包级别的函数geometry.Distance，而第二个则是使用刚刚声明的Point，调用的是Point类下声明的Point.Distance方法。</p>
<p>这种p.Distance的表达式叫做选择器，因为他会选择合适的对应p这个对象的Distance方法来执行。选择器也会被用来选择一个struct类型的字段，比如p.X。</p>
<p>对于一个给定的类型，其内部的方法都必须有唯一的方法名，但是不同的类型却可以有同样的方法名</p>
<h2 id="6-2-基于指针对象的方法"><a href="#6-2-基于指针对象的方法" class="headerlink" title="6.2. 基于指针对象的方法"></a>6.2. 基于指针对象的方法</h2><p>当调用一个函数时，会对其每一个参数值进行拷贝，如果一个函数需要更新一个变量，或者函数的其中一个参数实在太大我们希望能够避免进行这种默认的拷贝，这种情况下我们就需要用到指针了。</p>
<p>为了避免歧义，在声明方法时，如果一个类型名本身是一个指针的话，是不允许其出现在接收器中的，比如下面这个例子：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type P *int
func (P) f() &#123; &#x2F;* ... *&#x2F; &#125; &#x2F;&#x2F; compile error: invalid receiver type<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>想要调用指针类型方法<code>(*Point).ScaleBy</code>，只要提供一个Point类型的指针即可，像下面这样。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">r :&#x3D; &amp;Point&#123;1, 2&#125;
r.ScaleBy(2)
fmt.Println(*r) &#x2F;&#x2F; &quot;&#123;2, 4&#125;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>幸运的是，go语言本身在这种地方会帮到我们。如果接收器p是一个Point类型的变量，并且其方法需要一个Point指针作为接收器，我们可以用下面这种简短的写法：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">p.ScaleBy(2)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>编译器会隐式地帮我们用&amp;p去调用ScaleBy这个方法。这种简写方法只适用于“变量”，包括struct里的字段比如p.X，以及array和slice内的元素比如perim[0]。我们不能通过一个无法取到地址的接收器来调用指针方法，比如临时变量的内存地址就无法获取得到：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">Point&#123;1, 2&#125;.ScaleBy(2) &#x2F;&#x2F; compile error: can&#39;t take address of Point literal<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>但是我们可以用一个<code>*Point</code>这样的接收器来调用Point的方法，因为我们可以通过地址来找到这个变量，只要用解引用符号<code>*</code>来取到该变量即可。编译器在这里也会给我们隐式地插入<code>*</code>这个操作符，所以下面这两种写法等价的：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">pptr.Distance(q)
(*pptr).Distance(q)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="6-2-1-Nil也是一个合法的接收器类型"><a href="#6-2-1-Nil也是一个合法的接收器类型" class="headerlink" title="6.2.1. Nil也是一个合法的接收器类型"></a>6.2.1. Nil也是一个合法的接收器类型</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">m :&#x3D; url.Values&#123;&quot;lang&quot;: &#123;&quot;en&quot;&#125;&#125; &#x2F;&#x2F; direct construction
m.Add(&quot;item&quot;, &quot;1&quot;)
m.Add(&quot;item&quot;, &quot;2&quot;)

fmt.Println(m.Get(&quot;lang&quot;)) &#x2F;&#x2F; &quot;en&quot;
fmt.Println(m.Get(&quot;q&quot;))    &#x2F;&#x2F; &quot;&quot;
fmt.Println(m.Get(&quot;item&quot;)) &#x2F;&#x2F; &quot;1&quot;      (first value)
fmt.Println(m[&quot;item&quot;])     &#x2F;&#x2F; &quot;[1 2]&quot;  (direct map access)

m &#x3D; nil
fmt.Println(m.Get(&quot;item&quot;)) &#x2F;&#x2F; &quot;&quot;
m.Add(&quot;item&quot;, &quot;3&quot;)         &#x2F;&#x2F; panic: assignment to entry in nil map<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对Get的最后一次调用中，nil接收器的行为即是一个空map的行为。我们可以等价地将这个操作写成Value(nil).Get(“item”)，但是如果你直接写nil.Get(“item”)的话是无法通过编译的，因为nil的字面量编译器无法判断其准确类型。所以相比之下，最后的那行m.Add的调用就会产生一个panic，因为他尝试更新一个空map。</p>
<p>由于url.Values是一个map类型，并且间接引用了其key/value对，因此url.Values.Add对这个map里的元素做任何的更新、删除操作对调用方都是可见的。实际上，就像在普通函数中一样，虽然可以通过引用来操作内部值，但在方法想要修改引用本身时是不会影响原始值的，比如把他置换为nil，或者让这个引用指向了其它的对象，调用方都不会受影响。（译注：因为传入的是存储了内存地址的变量，你改变这个变量本身是影响不了原始的变量的，想想C语言，是差不多的）</p>
<h2 id="6-3-通过嵌入结构体来扩展类型"><a href="#6-3-通过嵌入结构体来扩展类型" class="headerlink" title="6.3. 通过嵌入结构体来扩展类型"></a>6.3. 通过嵌入结构体来扩展类型</h2><p>读者如果对基于类来实现面向对象的语言比较熟悉的话，可能会倾向于将Point看作一个基类，而ColoredPoint看作其子类或者继承类，或者将ColoredPoint看作”is a” Point类型。但这是错误的理解。请注意上面例子中对Distance方法的调用。Distance有一个参数是Point类型，但q并不是一个Point类，所以尽管q有着Point这个内嵌类型，我们也必须要显式地选择它。尝试直接传q的话你会看到下面这样的错误：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">p.Distance(q) &#x2F;&#x2F; compile error: cannot use q (ColoredPoint) as Point<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>一个ColoredPoint并不是一个Point，但他”has a”Point，并且它有从Point类里引入的Distance和ScaleBy方法。如果你喜欢从实现的角度来考虑问题，内嵌字段会指导编译器去生成额外的包装方法来委托已经声明好的方法，和下面的形式是等价的：</p>
<p>下面是一个小trick。这个例子展示了简单的cache，其使用两个包级别的变量来实现，一个mutex互斥量(§9.2)和它所操作的cache：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var (
    mu sync.Mutex &#x2F;&#x2F; guards mapping
    mapping &#x3D; make(map[string]string)
)

func Lookup(key string) string &#123;
    mu.Lock()
    v :&#x3D; mapping[key]
    mu.Unlock()
    return v
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下面这个版本在功能上是一致的，但将两个包级别的变量放在了cache这个struct一组内：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var cache &#x3D; struct &#123;
    sync.Mutex
    mapping map[string]string
&#125;&#123;
    mapping: make(map[string]string),
&#125;


func Lookup(key string) string &#123;
    cache.Lock()
    v :&#x3D; cache.mapping[key]
    cache.Unlock()
    return v
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们给新的变量起了一个更具表达性的名字：cache。因为sync.Mutex字段也被嵌入到了这个struct里，其Lock和Unlock方法也就都被引入到了这个匿名结构中了，这让我们能够以一个简单明了的语法来对其进行加锁解锁操作。</p>
<h2 id="6-4-方法值和方法表达式"><a href="#6-4-方法值和方法表达式" class="headerlink" title="6.4. 方法值和方法表达式"></a>6.4. 方法值和方法表达式</h2><p>在某些情况，方法可以当做值来使用</p>
<h2 id="6-5-示例-Bit数组"><a href="#6-5-示例-Bit数组" class="headerlink" title="6.5. 示例: Bit数组"></a>6.5. 示例: Bit数组</h2><h2 id="6-6-封装"><a href="#6-6-封装" class="headerlink" title="6.6. 封装"></a>6.6. 封装</h2><p>一个对象的变量或者方法如果对调用方是不可见的话，一般就被定义为“封装”。</p>
<p>Go语言只有一种控制可见性的手段：大写首字母的标识符会从定义它们的包中被导出，小写字母的则不会。这种限制包内成员的方式同样适用于struct或者一个类型的方法。因而如果我们想要封装一个对象，我们必须将其定义为一个struct。</p>
<h1 id="第七章-接口"><a href="#第七章-接口" class="headerlink" title="第七章　接口"></a>第七章　接口</h1><p>接口类型是对其它类型行为的抽象和概括；因为接口类型不会和特定的实现细节绑定在一起，通过这种抽象的方式我们可以让我们的函数更加灵活和更具有适应能力。</p>
<p>很多面向对象的语言都有相似的接口概念，但Go语言中接口类型的独特之处在于它是满足隐式实现的。也就是说，我们没有必要对于给定的具体类型定义所有满足的接口类型；简单地拥有一些必需的方法就足够了。这种设计可以让你创建一个新的接口类型满足已经存在的具体类型却不会去改变这些类型的定义；当我们使用的类型来自于不受我们控制的包时这种设计尤其有用。 </p>
<h2 id="7-1-接口约定"><a href="#7-1-接口约定" class="headerlink" title="7.1. 接口约定"></a>7.1. 接口约定</h2><p>接口类型是一种抽象的类型。它不会暴露出它所代表的对象的内部值的结构和这个对象支持的基础操作的集合；它们只会表现出它们自己的方法。也就是说当你有看到一个接口类型的值时，你不知道它是什么，唯一知道的就是可以通过它的方法来做什么。</p>
<h2 id="7-2-接口类型"><a href="#7-2-接口类型" class="headerlink" title="7.2 接口类型"></a>7.2 接口类型</h2><h2 id="7-3-实现接口的条件"><a href="#7-3-实现接口的条件" class="headerlink" title="7.3 实现接口的条件"></a>7.3 实现接口的条件</h2><p>一个类型如果拥有一个接口需要的所有方法，那么这个类型就实现了这个接口。</p>
<p>例如，<code>*os.File</code>类型实现了io.Reader，Writer，Closer，和ReadWriter接口。<code>*bytes.Buffer</code>实现了Reader，Writer，和ReadWriter这些接口，但是它没有实现Closer接口因为它不具有Close方法</p>
<p>接口指定的规则非常简单：表达一个类型属于某个接口只要这个类型实现这个接口。所以：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var w io.Writer
w &#x3D; os.Stdout           &#x2F;&#x2F; OK: *os.File has Write method
w &#x3D; new(bytes.Buffer)   &#x2F;&#x2F; OK: *bytes.Buffer has Write method
w &#x3D; time.Second         &#x2F;&#x2F; compile error: time.Duration lacks Write method

var rwc io.ReadWriteCloser
rwc &#x3D; os.Stdout         &#x2F;&#x2F; OK: *os.File has Read, Write, Close methods
rwc &#x3D; new(bytes.Buffer) &#x2F;&#x2F; compile error: *bytes.Buffer lacks Close method<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这个规则甚至适用于等式右边本身也是一个接口类型</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">w &#x3D; rwc                 &#x2F;&#x2F; OK: io.ReadWriteCloser has Write method
rwc &#x3D; w                 &#x2F;&#x2F; compile error: io.Writer lacks Close method<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>在第6.5章中，IntSet类型的String方法的接收者是一个指针类型，所以我们不能在一个不能寻址的IntSet值上调用这个方法：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type IntSet struct &#123; &#x2F;* ... *&#x2F; &#125;
func (*IntSet) String() string
var _ &#x3D; IntSet&#123;&#125;.String() &#x2F;&#x2F; compile error: String requires *IntSet receiver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>但是我们可以在一个IntSet值上调用这个方法：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var s IntSet
var _ &#x3D; s.String() &#x2F;&#x2F; OK: s is a variable and &amp;s has a String method<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>然而，由于只有<code>*IntSet</code>类型有String方法，所以也只有<code>*IntSet</code>类型实现了fmt.Stringer接口：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var _ fmt.Stringer &#x3D; &amp;s &#x2F;&#x2F; OK
var _ fmt.Stringer &#x3D; s  &#x2F;&#x2F; compile error: IntSet lacks String method<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>对于创建的一个interface{}值持有一个boolean，float，string，map，pointer，或者任意其它的类型；我们当然不能直接对它持有的值做操作，因为interface{}没有任何方法。</p>
<p>每一个具体类型的组基于它们相同的行为可以表示成一个接口类型。不像基于类的语言，他们一个类实现的接口集合需要进行显式的定义，在Go语言中我们可以在需要的时候定义一个新的抽象或者特定特点的组，而不需要修改具体类型的定义。当具体的类型来自不同的作者时这种方式会特别有用。当然也确实没有必要在具体的类型中指出这些共性。</p>
<h2 id="7-4-flag-Value接口"><a href="#7-4-flag-Value接口" class="headerlink" title="7.4. flag.Value接口"></a>7.4. flag.Value接口</h2><h2 id="7-5-接口值"><a href="#7-5-接口值" class="headerlink" title="7.5. 接口值"></a>7.5. 接口值</h2><p>接口值，由两个部分组成，一个具体的类型和那个类型的值。它们被称为接口的动态类型和动态值。对于像Go语言这种静态类型的语言，类型是编译期的概念；因此一个类型不是一个值。在我们的概念模型中，一些提供每个类型信息的值被称为类型描述符，比如类型的名称和方法。在一个接口值中，类型部分代表与之相关类型的描述符。</p>
<p>下面4个语句中，变量w得到了3个不同的值。（开始和最后的值是相同的）</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var w io.Writer
w &#x3D; os.Stdout
w &#x3D; new(bytes.Buffer)
w &#x3D; nil<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>让我们进一步观察在每一个语句后的w变量的值和动态行为。第一个语句定义了变量w:</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var w io.Writer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>在Go语言中，变量总是被一个定义明确的值初始化，即使接口类型也不例外。对于一个接口的零值就是它的类型和值的部分都是nil</p>
<p>一个接口值基于它的动态类型被描述为空或非空，所以这是一个空的接口值。你可以通过使用w==nil或者w!=nil来判断接口值是否为空。调用一个空接口值上的任意方法都会产生panic:</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">w.Write([]byte(&quot;hello&quot;)) &#x2F;&#x2F; panic: nil pointer dereference<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>从概念上讲，不论接口值多大，动态值总是可以容下它。（这只是一个概念上的模型；具体的实现可能会非常不同）</p>
<p>接口值可以使用== 和!＝来进行比较。两个接口值相等仅当它们都是nil值，或者它们的动态类型相同并且动态值也根据这个动态类型的==操作相等。因为接口值是可比较的，所以它们可以用在map的键或者作为switch语句的操作数。</p>
<p>然而，如果两个接口值的动态类型相同，但是这个动态类型是不可比较的（比如切片），将它们进行比较就会失败并且panic:</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var x interface&#123;&#125; &#x3D; []int&#123;1, 2, 3&#125;
fmt.Println(x &#x3D;&#x3D; x) &#x2F;&#x2F; panic: comparing uncomparable type []int<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>考虑到这点，接口类型是非常与众不同的。其它类型要么是安全的可比较类型（如基本类型和指针）要么是完全不可比较的类型（如切片，映射类型，和函数），但是在比较接口值或者包含了接口值的聚合类型时，我们必须要意识到潜在的panic。同样的风险也存在于使用接口作为map的键或者switch的操作数。只能比较你非常确定它们的动态值是可比较类型的接口值。</p>
<p>当我们处理错误或者调试的过程中，得知接口值的动态类型是非常有帮助的。所以我们使用fmt包的%T动作:</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var w io.Writer
fmt.Printf(&quot;%T\n&quot;, w) &#x2F;&#x2F; &quot;&lt;nil&gt;&quot;
w &#x3D; os.Stdout
fmt.Printf(&quot;%T\n&quot;, w) &#x2F;&#x2F; &quot;*os.File&quot;
w &#x3D; new(bytes.Buffer)
fmt.Printf(&quot;%T\n&quot;, w) &#x2F;&#x2F; &quot;*bytes.Buffer&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在fmt包内部，使用反射来获取接口动态类型的名称</p>
<h3 id="7-5-1-警告：一个包含nil指针的接口不是nil接口"><a href="#7-5-1-警告：一个包含nil指针的接口不是nil接口" class="headerlink" title="7.5.1. 警告：一个包含nil指针的接口不是nil接口"></a>7.5.1. 警告：一个包含nil指针的接口不是nil接口</h3><p>一个不包含任何值的nil接口值和一个刚好包含nil指针的接口值是不同的。这个细微区别产生了一个容易绊倒每个Go程序员的陷阱。</p>
<p>思考下面的程序。当debug变量设置为true时，main函数会将f函数的输出收集到一个bytes.Buffer类型中。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">const debug &#x3D; true

func main() &#123;
    var buf *bytes.Buffer
    if debug &#123;
        buf &#x3D; new(bytes.Buffer) &#x2F;&#x2F; enable collection of output
    &#125;
    f(buf) &#x2F;&#x2F; NOTE: subtly incorrect!
    if debug &#123;
        &#x2F;&#x2F; ...use buf...
    &#125;
&#125;

&#x2F;&#x2F; If out is non-nil, output will be written to it.
func f(out io.Writer) &#123;
    &#x2F;&#x2F; ...do something...
    if out !&#x3D; nil &#123;
        out.Write([]byte(&quot;done!\n&quot;))
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们可能会预计当把变量debug设置为false时可以禁止对输出的收集，但是实际上在out.Write方法调用时程序发生了panic：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">if out !&#x3D; nil &#123;
    out.Write([]byte(&quot;done!\n&quot;)) &#x2F;&#x2F; panic: nil pointer dereference
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>当main函数调用函数f时，它给f函数的out参数赋了一个<em>bytes.Buffer的空指针，所以out的动态值是nil。然而，它的动态类型是</em>bytes.Buffer，意思就是out变量是一个包含空指针值的非空接口（如图7.5），所以防御性检查out!=nil的结果依然是true。</p>
<p><img src="https://docs.hacknode.org/gopl-zh/images/ch7-05.png" alt="img"></p>
<p>动态分配机制依然决定(*bytes.Buffer).Write的方法会被调用，但是这次的接收者的值是nil。对于一些如<em>os.File的类型，nil是一个有效的接收者(§6.2.1)，但是</em>bytes.Buffer类型不在这些种类中。这个方法会被调用，但是当它尝试去获取缓冲区时会发生panic。</p>
<p>问题在于尽管一个nil的<em>bytes.Buffer指针有实现这个接口的方法，它也不满足这个接口具体的行为上的要求。特别是这个调用违反了(</em>bytes.Buffer).Write方法的接收者非空的隐含先觉条件，所以将nil指针赋给这个接口是错误的。解决方案就是将main函数中的变量buf的类型改为io.Writer，因此可以避免一开始就将一个不完整的值赋值给这个接口：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var buf io.Writer
if debug &#123;
    buf &#x3D; new(bytes.Buffer) &#x2F;&#x2F; enable collection of output
&#125;
f(buf) &#x2F;&#x2F; OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>现在我们已经把接口值的技巧都讲完了，让我们来看更多的一些在Go标准库中的重要接口类型。在下面的三章中，我们会看到接口类型是怎样用在排序，web服务，错误处理中的。</p>
<h2 id="7-6-sort-Interface接口"><a href="#7-6-sort-Interface接口" class="headerlink" title="7.6. sort.Interface接口"></a>7.6. sort.Interface接口</h2><p>一个内置的排序算法需要知道三个东西：序列的长度，表示两个元素比较的结果，一种交换两个元素的方式；这就是sort.Interface的三个方法：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">package sort

type Interface interface &#123;
    Len() int
    Less(i, j int) bool &#x2F;&#x2F; i, j are indices of sequence elements
    Swap(i, j int)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>为了对序列进行排序，我们需要定义一个实现了这三个方法的类型，然后对这个类型的一个实例应用sort.Sort函数。思考对一个字符串切片进行排序，这可能是最简单的例子了。下面是这个新的类型StringSlice和它的Len，Less和Swap方法</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">type StringSlice []string
func (p StringSlice) Len() int           &#123; return len(p) &#125;
func (p StringSlice) Less(i, j int) bool &#123; return p[i] &lt; p[j] &#125;
func (p StringSlice) Swap(i, j int)      &#123; p[i], p[j] &#x3D; p[j], p[i] &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>现在我们可以通过像下面这样将一个切片转换为一个StringSlice类型来进行排序：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">sort.Sort(StringSlice(names))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="7-10-类型断言"><a href="#7-10-类型断言" class="headerlink" title="7.10. 类型断言"></a>7.10. 类型断言</h2><p>类型断言是一个使用在接口值上的操作。语法上它看起来像x.(T)被称为断言类型，这里x表示一个接口的类型和T表示一个类型。</p>
<p>一个类型断言检查它操作对象的动态类型是否和断言的类型匹配。果检查失败，接下来这个操作会抛出panic。 </p>
<p>第二种，如果相反地断言的类型T是一个接口类型，然后类型断言检查是否x的动态类型满足T。如果这个检查成功了，动态值没有获取到；这个结果仍然是一个有相同动态类型和值部分的接口值，但是结果为类型T。换句话说，对一个接口类型的类型断言改变了类型的表述方式，改变了可以获取的方法集合（通常更大）,但是它保留了接口值内部的动态类型和值的部分。</p>
<p>在下面的第一个类型断言后，w和rw都持有os.Stdout，因此它们都有一个动态类型<code>*os.File</code>，但是变量w是一个io.Writer类型，只对外公开了文件的Write方法，而rw变量还公开了它的Read方法。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var w io.Writer
w &#x3D; os.Stdout
rw :&#x3D; w.(io.ReadWriter) &#x2F;&#x2F; success: *os.File has both Read and Write
w &#x3D; new(ByteCounter)
rw &#x3D; w.(io.ReadWriter) &#x2F;&#x2F; panic: *ByteCounter has no Read method<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果断言操作的对象是一个nil接口值，那么不论被断言的类型是什么这个类型断言都会失败。我们几乎不需要对一个更少限制性的接口类型（更少的方法集合）做断言，因为它表现的就像是赋值操作一样，除了对于nil接口值的情况。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">w &#x3D; rw             &#x2F;&#x2F; io.ReadWriter is assignable to io.Writer
w &#x3D; rw.(io.Writer) &#x2F;&#x2F; fails only if rw &#x3D;&#x3D; nil<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>当类型断言的操作对象是一个变量，你有时会看见原来的变量名重用而不是声明一个新的本地变量名，这个重用的变量原来的值会被覆盖（理解：其实是声明了一个同名的新的本地变量，外层原来的w不会被改变），如下面这样：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">if w, ok :&#x3D; w.(*os.File); ok &#123;
    &#x2F;&#x2F; ...use w...
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="7-11-基于类型断言区别错误类型"><a href="#7-11-基于类型断言区别错误类型" class="headerlink" title="7.11. 基于类型断言区别错误类型"></a>7.11. 基于类型断言区别错误类型</h2><h2 id="7-12-通过类型断言询问行为"><a href="#7-12-通过类型断言询问行为" class="headerlink" title="7.12. 通过类型断言询问行为"></a>7.12. 通过类型断言询问行为</h2><h2 id="7-13-类型分支"><a href="#7-13-类型分支" class="headerlink" title="7.13. 类型分支"></a>7.13. 类型分支</h2><p>接口被以两种不同的方式使用。在第一个方式中，以io.Reader，io.Writer，fmt.Stringer，sort.Interface，http.Handler和error为典型，一个接口的方法表达了实现这个接口的具体类型间的相似性，但是隐藏了代码的细节和这些具体类型本身的操作。重点在于方法上，而不是具体的类型上。</p>
<p>第二个方式是利用一个接口值可以持有各种具体类型值的能力，将这个接口认为是这些类型的联合。类型断言用来动态地区别这些类型，使得对每一种情况都不一样。在这个方式中，重点在于具体的类型满足这个接口，而不在于接口的方法（如果它确实有一些的话），并且没有任何的信息隐藏。我们将以这种方式使用的接口描述为discriminated unions（可辨识联合）</p>
<p>如果你熟悉面向对象编程，你可能会将这两种方式当作是subtype polymorphism（子类型多态）和 ad hoc polymorphism（非参数多态）</p>
<p>和其它那些语言一样，Go语言查询一个SQL数据库的API会干净地将查询中固定的部分和变化的部分分开。一个调用的例子可能看起来像这样：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">import &quot;database&#x2F;sql&quot;

func listTracks(db sql.DB, artist string, minYear, maxYear int) &#123;
    result, err :&#x3D; db.Exec(
        &quot;SELECT * FROM tracks WHERE artist &#x3D; ? AND ? &lt;&#x3D; year AND year &lt;&#x3D; ?&quot;,
        artist, minYear, maxYear)
    &#x2F;&#x2F; ...
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Exec方法使用SQL字面量替换在查询字符串中的每个’?’；SQL字面量表示相应参数的值，它有可能是一个布尔值，一个数字，一个字符串，或者nil空值。用这种方式构造查询可以帮助避免SQL注入攻击；这种攻击就是对手可以通过利用输入内容中不正确的引号来控制查询语句。在Exec函数内部，我们可能会找到像下面这样的一个函数，它会将每一个参数值转换成它的SQL字面量符号。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func sqlQuote(x interface&#123;&#125;) string &#123;
    if x &#x3D;&#x3D; nil &#123;
        return &quot;NULL&quot;
    &#125; else if _, ok :&#x3D; x.(int); ok &#123;
        return fmt.Sprintf(&quot;%d&quot;, x)
    &#125; else if _, ok :&#x3D; x.(uint); ok &#123;
        return fmt.Sprintf(&quot;%d&quot;, x)
    &#125; else if b, ok :&#x3D; x.(bool); ok &#123;
        if b &#123;
            return &quot;TRUE&quot;
        &#125;
        return &quot;FALSE&quot;
    &#125; else if s, ok :&#x3D; x.(string); ok &#123;
        return sqlQuoteString(s) &#x2F;&#x2F; (not shown)
    &#125; else &#123;
        panic(fmt.Sprintf(&quot;unexpected type %T: %v&quot;, x, x))
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意到在原来的函数中，对于bool和string情况的逻辑需要通过类型断言访问提取的值。因为这个做法很典型，类型分支语句有一个扩展的形式，它可以将提取的值绑定到一个在每个case范围内都有效的新变量。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">switch x :&#x3D; x.(type) &#123; &#x2F;* ... *&#x2F; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这里我们已经将新的变量也命名为x；和类型断言一样，重用变量名是很常见的。和一个switch语句相似地，一个类型分支隐式的创建了一个词法块，因此新变量x的定义不会和外面块中的x变量冲突。每一个case也会隐式的创建一个单独的词法块。</p>
<p>使用类型分支的扩展形式来重写sqlQuote函数会让这个函数更加的清晰：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func sqlQuote(x interface&#123;&#125;) string &#123;
    switch x :&#x3D; x.(type) &#123;
    case nil:
        return &quot;NULL&quot;
    case int, uint:
        return fmt.Sprintf(&quot;%d&quot;, x) &#x2F;&#x2F; x has type interface&#123;&#125; here.
    case bool:
        if x &#123;
            return &quot;TRUE&quot;
        &#125;
        return &quot;FALSE&quot;
    case string:
        return sqlQuoteString(x) &#x2F;&#x2F; (not shown)
    default:
        panic(fmt.Sprintf(&quot;unexpected type %T: %v&quot;, x, x))
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>Go支持在一个case里写多个条件，例如：”a”,”b” 或者 i<1 && i >-1</strong></p>
<h3 id="goto语句"><a href="#goto语句" class="headerlink" title="goto语句"></a>goto语句</h3><p>使用goto语句跳转到标签，进行代码间的无条件跳转。在快速跳出循环，避免重复退出方面也有一定的帮助。并且可以简化一些代码的实现流程。</p>
<p>在满足条件时，如果需要重复退出两层循环，传统的编码方式：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
  var isBreak bool
  for x :&#x3D; 0; x &lt; 20; x++ &#123;
    for y :&#x3D; 0; y &lt; 20; y++ &#123;
      if y &#x3D;&#x3D; 2 &#123;
        isBreak &#x3D; true
        break
      &#125;
    &#125;
    if isBreak &#123; &#x2F;&#x2F; 根据标记，再退出外层循环
      break
    &#125;
  &#125;
  fmt.Println(&quot;over!&quot;)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>将上面的代码改写为goto形式：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
  for x :&#x3D; 0; x &lt; 20; x++ &#123;
    for y :&#x3D; 0; y &lt; 20; y++ &#123;
      if y &#x3D;&#x3D; 2 &#123;
        goto breakTag
      &#125;
    &#125;
  &#125;
  return 
breakTag:
  fmt.Println(&quot;done&quot;)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在以上代码中，标签只能被goto使用，不影响代码执行流程。在定义标签breakTag之前有一个return语句，此处如果不手动返回，则在不满足条件时也会执行breakTag代码。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">package main

import &quot;fmt&quot;

func main() &#123;
	for x :&#x3D; 0; x &lt; 20; x++ &#123;
		for y :&#x3D; 0; y &lt; 20; y++ &#123;
			if y &gt;&#x3D; 22 &#123;
				goto breakTag
			&#125;
		&#125;
	&#125;
breakTag:
	fmt.Println(&quot;done&quot;)
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在代码中，经常会遇到”多错误处理“，存在代码重复问题</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
  ...
  err :&#x3D; getUserInfo()
  if err !&#x3D; nil &#123;
    goto doExit
  &#125;
  err :&#x3D; getEmail()
  if err !&#x3D; nil &#123;
    goto doExit
  &#125;
  fmt.Println(&quot;over&quot;)
  return
doExit:
  fmt.Println(err)
  exitProcess()
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h3><p>在break语句后面添加标签，表示退出某个标签对应的代码块，添加的标签必须定义在对应的for，Switch和select的代码块上。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">package main

import &quot;fmt&quot;

func main() &#123;
OuterLoop:
	for x :&#x3D; 0; x &lt; 20; x++ &#123;
		for y :&#x3D; 0; y &lt; 20; y++ &#123;
			switch y &#123;
			case 1:
				fmt.Println(x - y) &#x2F;&#x2F; 退出OuterLoop的循环之外
				break OuterLoop
			case 2:
				fmt.Println(y - x)
				continue OuterLoop
			&#125;
		&#125;
	&#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="7-15-一些建议"><a href="#7-15-一些建议" class="headerlink" title="7.15. 一些建议"></a>7.15. 一些建议</h2><p>当设计一个新的包时，新手Go程序员总是先创建一套接口，然后再定义一些满足它们的具体类型。这种方式的结果就是有很多的接口，它们中的每一个仅只有一个实现。不要再这么做了。这种接口是不必要的抽象；它们也有一个运行时损耗。你可以使用导出机制(§6.6)来限制一个类型的方法或一个结构体的字段是否在包外可见。接口只有当有两个或两个以上的具体类型必须以相同的方式进行处理时才需要。</p>
<p>当一个接口只被一个单一的具体类型实现时有一个例外，就是由于它的依赖，这个具体类型不能和这个接口存在在一个相同的包中。这种情况下，一个接口是解耦这两个包的一个好方式。</p>
<p>因为在Go语言中只有当两个或更多的类型实现一个接口时才使用接口，它们必定会从任意特定的实现细节中抽象出来。结果就是有更少和更简单方法的更小的接口（经常和io.Writer或 fmt.Stringer一样只有一个）。当新的类型出现时，小的接口更容易满足。对于接口设计的一个好的标准就是 ask only for what you need（只考虑你需要的东西）</p>
<h1 id="第八章-Goroutines和Channels"><a href="#第八章-Goroutines和Channels" class="headerlink" title="第八章　Goroutines和Channels"></a>第八章　Goroutines和Channels</h1><p>Go语言中的并发程序可以用两种手段来实现。本章讲解goroutine和channel，其支持“顺序通信进程”(communicating sequential processes)或被简称为CSP。CSP是一种现代的并发编程模型，在这种编程模型中值会在不同的运行实例(goroutine)中传递，尽管大多数情况下仍然是被限制在单一实例中。</p>
<p>尽管Go对并发的支持是众多强力特性之一，但跟踪调试并发程序还是很困难，在线性程序中形成的直觉往往还会使我们误入歧途。</p>
<h2 id="8-1-Goroutines"><a href="#8-1-Goroutines" class="headerlink" title="8.1. Goroutines"></a>8.1. Goroutines</h2><p>在Go语言中，每一个并发的执行单元叫作一个goroutine。设想这里的一个程序有两个函数，一个函数做计算，另一个输出结果，假设两个函数没有相互之间的调用关系。一个线性的程序会先调用其中的一个函数，然后再调用另一个。如果程序中包含多个goroutine，对两个函数的调用则可能发生在同一时刻。马上就会看到这样的一个程序。</p>
<p>新的goroutine会用go语句来创建。在语法上，go语句是一个普通的函数或方法调用前加上关键字go。go语句会使其语句中的函数在一个新创建的goroutine中运行。而go语句本身会迅速地完成。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">f()    &#x2F;&#x2F; call f(); wait for it to return
go f() &#x2F;&#x2F; create a new goroutine that calls f(); don&#39;t wait<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>主函数返回时，所有的goroutine都会被直接打断，程序退出。除了从主函数退出或者直接终止程序之外，没有其它的编程方法能够让一个goroutine来打断另一个的执行，但是之后可以看到一种方式来实现这个目的，通过goroutine之间的通信来让一个goroutine请求其它的goroutine，并让被请求的goroutine自行结束执行。</p>
<h2 id="8-2-示例-并发的Clock服务"><a href="#8-2-示例-并发的Clock服务" class="headerlink" title="8.2. 示例: 并发的Clock服务"></a>8.2. 示例: 并发的Clock服务</h2><p>网络编程是并发大显身手的一个领域，由于服务器是最典型的需要同时处理很多连接的程序，这些连接一般来自于彼此独立的客户端 </p>
<h2 id="8-3-示例-并发的Echo服务"><a href="#8-3-示例-并发的Echo服务" class="headerlink" title="8.3. 示例: 并发的Echo服务"></a>8.3. 示例: 并发的Echo服务</h2><p>让服务使用并发不只是处理多个客户端的请求，甚至在处理单个连接时也可能会用到，就像我们上面的两个go关键词的用法。然而在我们使用go关键词的同时，需要慎重地考虑net.Conn中的方法在并发地调用时是否安全，事实上对于大多数类型来说也确实不安全。我们会在下一章中详细地探讨并发安全性。</p>
<h2 id="8-4-Channels"><a href="#8-4-Channels" class="headerlink" title="8.4. Channels"></a>8.4. Channels</h2><p>如果说goroutine是Go语言程序的并发体的话，那么channels则是它们之间的通信机制。一个channel是一个通信机制，它可以让一个goroutine通过它给另一个goroutine发送值信息。每个channel都有一个特殊的类型，也就是channels可发送数据的类型。一个可以发送int类型数据的channel一般写为chan int。</p>
<p>使用内置的make函数，我们可以创建一个channel：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">ch :&#x3D; make(chan int) &#x2F;&#x2F; ch has type &#39;chan int&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>当我们复制一个channel或用于函数参数传递时，我们只是拷贝了一个channel引用，因此调用者和被调用者将引用同一个channel对象。和其它的引用类型一样，channel的零值也是nil。</p>
<p>两个相同类型的channel可以使用==运算符比较。如果两个channel引用的是相同的对象，那么比较的结果为真。一个channel也可以和nil进行比较。</p>
<p>一个channel有发送和接受两个主要操作，都是通信行为。一个发送语句将一个值从一个goroutine通过channel发送到另一个执行接收操作的goroutine。发送和接收两个操作都使用<code>&lt;-</code>运算符。在发送语句中，<code>&lt;-</code>运算符分割channel和要发送的值。在接收语句中，<code>&lt;-</code>运算符写在channel对象之前。一个不使用接收结果的接收操作也是合法的。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">ch &lt;- x  &#x2F;&#x2F; a send statement
x &#x3D; &lt;-ch &#x2F;&#x2F; a receive expression in an assignment statement
&lt;-ch     &#x2F;&#x2F; a receive statement; result is discarded<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>Channel还支持close操作，用于关闭channel，随后对基于该channel的任何发送操作都将导致panic异常。对一个已经被close过的channel进行接收操作依然可以接受到之前已经成功发送的数据；如果channel中已经没有数据的话将产生一个零值的数据。</p>
<p>使用内置的close函数就可以关闭一个channel：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">close(ch)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>以最简单方式调用make函数创建的是一个无缓存的channel，但是我们也可以指定第二个整型参数，对应channel的容量。如果channel的容量大于零，那么该channel就是带缓存的channel。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">ch &#x3D; make(chan int)    &#x2F;&#x2F; unbuffered channel
ch &#x3D; make(chan int, 0) &#x2F;&#x2F; unbuffered channel
ch &#x3D; make(chan int, 3) &#x2F;&#x2F; buffered channel with capacity 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="8-4-1-不带缓存的Channels"><a href="#8-4-1-不带缓存的Channels" class="headerlink" title="8.4.1. 不带缓存的Channels"></a>8.4.1. 不带缓存的Channels</h3><p>一个基于无缓存Channels的发送操作将导致发送者goroutine阻塞，直到另一个goroutine在相同的Channels上执行接收操作，当发送的值通过Channels成功传输之后，两个goroutine可以继续执行后面的语句。反之，如果接收操作先发生，那么接收者goroutine也将阻塞，直到有另一个goroutine在相同的Channels上执行发送操作。</p>
<p>基于无缓存Channels的发送和接收操作将导致两个goroutine做一次同步操作。因为这个原因，无缓存Channels有时候也被称为同步Channels。当通过一个无缓存Channels发送数据时，接收者收到数据发生在唤醒发送者goroutine之前（译注：<em>happens before</em>，这是Go语言并发内存模型的一个关键术语！）。</p>
<p>在讨论并发编程时，当我们说x事件在y事件之前发生（<em>happens before</em>），我们并不是说x事件在时间上比y时间更早；我们要表达的意思是要保证在此之前的事件都已经完成了，例如在此之前的更新某些变量的操作已经完成，你可以放心依赖这些已完成的事件了。</p>
<p>当我们说x事件既不是在y事件之前发生也不是在y事件之后发生，我们就说x事件和y事件是并发的。这并不是意味着x事件和y事件就一定是同时发生的，我们只是不能确定这两个事件发生的先后顺序。</p>
<h3 id="8-4-2-串联的Channels（Pipeline）"><a href="#8-4-2-串联的Channels（Pipeline）" class="headerlink" title="8.4.2. 串联的Channels（Pipeline）"></a>8.4.2. 串联的Channels（Pipeline）</h3><p>Channels也可以用于将多个goroutine连接在一起，一个Channel的输出作为下一个Channel的输入。这种串联的Channels就是所谓的管道（pipeline）。下面的程序用两个channels将三个goroutine串联起来，如图8.1所示。</p>
<p><img src="https://docs.hacknode.org/gopl-zh/images/ch8-01.png" alt="img"></p>
<p>像这样的串联Channels的管道（Pipelines）可以用在需要长时间运行的服务中，每个长时间运行的goroutine可能会包含一个死循环，在不同goroutine的死循环内部使用串联的Channels来通信。但是，如果我们希望通过Channels只发送有限的数列该如何处理呢？</p>
<p>如果发送者知道，没有更多的值需要发送到channel的话，那么让接收者也能及时知道没有多余的值可接收将是有用的，因为接收者可以停止不必要的接收等待。这可以通过内置的close函数来关闭channel实现：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">close(naturals)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>当一个channel被关闭后，再向该channel发送数据将导致panic异常。当一个被关闭的channel中已经发送的数据都被成功接收后，后续的接收操作将不再阻塞，它们会立即返回一个零值。关闭上面例子中的naturals变量对应的channel并不能终止循环，它依然会收到一个永无休止的零值序列，然后将它们发送给打印者goroutine。</p>
<p>没有办法直接测试一个channel是否被关闭，但是接收操作有一个变体形式：它多接收一个结果，多接收的第二个结果是一个布尔值ok，ture表示成功从channels接收到值，false表示channels已经被关闭并且里面没有值可接收。使用这个特性，我们可以修改squarer函数中的循环代码，当naturals对应的channel被关闭并没有值可接收时跳出循环，并且也关闭squares对应的channel.</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">package main

import (
	&quot;fmt&quot;
)

func main() &#123;
	naturals :&#x3D; make(chan int)
	squares :&#x3D; make(chan int)

	&#x2F;&#x2F; Counter
	go func() &#123;
		for x :&#x3D; 0; x &lt; 5; x++ &#123;
			naturals &lt;- x
		&#125;
		close(naturals)
	&#125;()

	&#x2F;&#x2F; Squarer
	go func() &#123;
		for &#123;
			x, ok :&#x3D; &lt;-naturals
			if !ok &#123;
				break
			&#125;
			squares &lt;- x * x
		&#125;
		close(squares)
	&#125;()

	&#x2F;&#x2F; Printer (in main goroutine)
	for i :&#x3D; 0; i &lt; 5; i++ &#123;
		fmt.Println(&lt;-squares)
	&#125;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在下面的改进中，我们的计数器goroutine只生成100个含数字的序列，然后关闭naturals对应的channel，这将导致计算平方数的squarer对应的goroutine可以正常终止循环并关闭squares对应的channel。（在一个更复杂的程序中，可以通过defer语句关闭对应的channel。）最后，主goroutine也可以正常终止循环并退出程序。</p>
<p><em>gopl.io/ch8/pipeline2</em></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func main() &#123;
    naturals :&#x3D; make(chan int)
    squares :&#x3D; make(chan int)

    &#x2F;&#x2F; Counter
    go func() &#123;
        for x :&#x3D; 0; x &lt; 100; x++ &#123;
            naturals &lt;- x
        &#125;
        close(naturals)
    &#125;()

    &#x2F;&#x2F; Squarer
    go func() &#123;
        for x :&#x3D; range naturals &#123;
            squares &lt;- x * x
        &#125;
        close(squares)
    &#125;()

    &#x2F;&#x2F; Printer (in main goroutine)
    for x :&#x3D; range squares &#123;
        fmt.Println(x)
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>其实你并不需要关闭每一个channel。只有当需要告诉接收者goroutine，所有的数据已经全部发送时才需要关闭channel。不管一个channel是否被关闭，当它没有被引用时将会被Go语言的垃圾自动回收器回收。（不要将关闭一个打开文件的操作和关闭一个channel操作混淆。对于每个打开的文件，都需要在不使用的时候调用对应的Close方法来关闭文件。）</p>
<p>试图重复关闭一个channel将导致panic异常，试图关闭一个nil值的channel也将导致panic异常。关闭一个channels还会触发一个广播机制</p>
<h3 id="8-4-3-单方向的Channel"><a href="#8-4-3-单方向的Channel" class="headerlink" title="8.4.3. 单方向的Channel"></a>8.4.3. 单方向的Channel</h3><p>当一个channel作为一个函数参数时，它一般总是被专门用于只发送或者只接收。</p>
<p>分别用于只发送或只接收的channel。类型<code>chan&lt;- int</code>表示一个只发送int的channel，只能发送不能接收。相反，类型<code>&lt;-chan int</code>表示一个只接收int的channel，只能接收不能发送。（箭头<code>&lt;-</code>和关键字chan的相对位置表明了channel的方向。）这种限制将在编译期检测。</p>
<p><strong>因为关闭操作只用于断言不再向channel发送新的数据，所以只有在发送者所在的goroutine才会调用close函数，因此对一个只接收的channel调用close将是一个编译错误</strong>。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func counter(out chan&lt;- int) &#123;
    for x :&#x3D; 0; x &lt; 100; x++ &#123;
        out &lt;- x
    &#125;
    close(out)
&#125;

func squarer(out chan&lt;- int, in &lt;-chan int) &#123;
    for v :&#x3D; range in &#123;
        out &lt;- v * v
    &#125;
    close(out)
&#125;

func printer(in &lt;-chan int) &#123;
    for v :&#x3D; range in &#123;
        fmt.Println(v)
    &#125;
&#125;

func main() &#123;
    naturals :&#x3D; make(chan int)
    squares :&#x3D; make(chan int)
    go counter(naturals)
    go squarer(squares, naturals)
    printer(squares)
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>调用counter（naturals）时，naturals的类型将隐式地从chan int转换成chan&lt;- int。调用printer(squares)也会导致相似的隐式转换，这一次是转换为<code>&lt;-chan int</code>类型只接收型的channel。任何双向channel向单向channel变量的赋值操作都将导致该隐式转换</p>
<h3 id="8-4-4-带缓存的Channels"><a href="#8-4-4-带缓存的Channels" class="headerlink" title="8.4.4. 带缓存的Channels"></a>8.4.4. 带缓存的Channels</h3><p>向缓存Channel的发送操作就是向内部缓存队列的尾部插入元素，接收操作则是从队列的头部删除元素。如果内部缓存队列是满的，那么发送操作将阻塞直到因另一个goroutine执行接收操作而释放了新的队列空间。相反，如果channel是空的，接收操作将阻塞直到有另一个goroutine执行发送操作而向队列插入元素。</p>
<p>如果我们使用了无缓存的channel，那么两个慢的goroutines将会因为没有人接收而被永远卡住。这种情况，称为goroutines泄漏，这将是一个BUG。和垃圾变量不同，泄漏的goroutines并不会被自动回收，因此确保每个不再需要的goroutine能正常退出是重要的。</p>
<p>关于无缓存或带缓存channels之间的选择，或者是带缓存channels的容量大小的选择，都可能影响程序的正确性。无缓存channel更强地保证了每个发送操作与相应的同步接收操作；但是对于带缓存channel，这些操作是解耦的。同样，即使我们知道将要发送到一个channel的信息的数量上限，创建一个对应容量大小的带缓存channel也是不现实的，因为这要求在执行任何接收操作之前缓存所有已经发送的值。如果未能分配足够的缓存将导致程序死锁。</p>
<p>Channel的缓存也可能影响程序的性能。想象一家蛋糕店有三个厨师，一个烘焙，一个上糖衣，还有一个将每个蛋糕传递到它下一个厨师的生产线。在狭小的厨房空间环境，每个厨师在完成蛋糕后必须等待下一个厨师已经准备好接受它；这类似于在一个无缓存的channel上进行沟通。</p>
<p>如果在每个厨师之间有一个放置一个蛋糕的额外空间，那么每个厨师就可以将一个完成的蛋糕临时放在那里而马上进入下一个蛋糕的制作中；这类似于将channel的缓存队列的容量设置为1。只要每个厨师的平均工作效率相近，那么其中大部分的传输工作将是迅速的，个体之间细小的效率差异将在交接过程中弥补。如果厨师之间有更大的额外空间——也是就更大容量的缓存队列——将可以在不停止生产线的前提下消除更大的效率波动，例如一个厨师可以短暂地休息，然后再加快赶上进度而不影响其他人。</p>
<p>另一方面，如果生产线的前期阶段一直快于后续阶段，那么它们之间的缓存在大部分时间都将是满的。相反，如果后续阶段比前期阶段更快，那么它们之间的缓存在大部分时间都将是空的。对于这类场景，额外的缓存并没有带来任何好处。</p>
<p>生产线的隐喻对于理解channels和goroutines的工作机制是很有帮助的。<strong>例如，如果第二阶段是需要精心制作的复杂操作，一个厨师可能无法跟上第一个厨师的进度，或者是无法满足第三阶段厨师的需求。要解决这个问题，我们可以再雇佣另一个厨师来帮助完成第二阶段的工作，他执行相同的任务但是独立工作</strong>。这类似于基于相同的channels创建另一个独立的goroutine。</p>
<h2 id="8-9-并发的退出"><a href="#8-9-并发的退出" class="headerlink" title="8.9. 并发的退出"></a>8.9. 并发的退出</h2><p>Go语言并没有提供在一个goroutine中终止另一个goroutine的方法，由于这样会导致goroutine之间的共享变量落在未定义的状态上</p>
<p>为了能够达到我们退出goroutine的目的，我们需要更靠谱的策略，来通过一个channel把消息广播出去，这样goroutine们能够看到这条事件消息，并且在事件完成之后，可以知道这件事已经发生过了。</p>
<p>回忆一下我们关闭了一个channel并且被消费掉了所有已发送的值，操作channel之后的代码可以立即被执行，并且会产生零值。我们可以将这个机制扩展一下，来作为我们的广播机制：不要向channel发送值，而是用关闭一个channel来进行广播。</p>
<p>现在当取消发生时，所有后台的goroutine都会迅速停止并且主函数会返回。当然，当主函数返回时，一个程序会退出，而我们又无法在主函数退出的时候确认其已经释放了所有的资源(译注：因为程序都退出了，你的代码都没法执行了)。这里有一个方便的窍门我们可以一用：取代掉直接从主函数返回，我们调用一个panic，然后runtime会把每一个goroutine的栈dump下来。如果main goroutine是唯一一个剩下的goroutine的话，他会清理掉自己的一切资源。但是如果还有其它的goroutine没有退出，他们可能没办法被正确地取消掉，也有可能被取消但是取消操作会很花时间；所以这里的一个调研还是很有必要的。我们用panic来获取到足够的信息来验证我们上面的判断，看看最终到底是什么样的情况。</p>
<h1 id="第九章-基于共享变量的并发"><a href="#第九章-基于共享变量的并发" class="headerlink" title="第九章　基于共享变量的并发"></a>第九章　基于共享变量的并发</h1><h2 id="9-1-竞态条件"><a href="#9-1-竞态条件" class="headerlink" title="9.1 竞态条件"></a>9.1 竞态条件</h2><p>当我们没有办法自信地确认一个事件是在另一个事件的前面或者后面发生的话，就说明x和y这两个事件是并发的。</p>
<p>一个函数在并发调用时没法工作的原因太多了，比如死锁(deadlock)、活锁(livelock)和饿死(resource starvation)。我们没有空去讨论所有的问题，这里我们只聚焦在竞争条件上。</p>
<p>竞争条件指的是程序在多个goroutine交叉执行操作时，没有给出正确的结果。竞争条件是很恶劣的一种场景，因为这种问题会一直潜伏在你的程序里，然后在非常少见的时候蹦出来，或许只是会在很大的负载时才会发生，又或许是会在使用了某一个编译器、某一种平台或者某一种架构的时候才会出现。这些使得竞争条件带来的问题非常难以复现而且难以分析诊断。</p>
<h2 id="9-2-sync-Mutex互斥锁"><a href="#9-2-sync-Mutex互斥锁" class="headerlink" title="9.2. sync.Mutex互斥锁"></a>9.2. sync.Mutex互斥锁</h2><p>这种互斥很实用，而且被sync包里的Mutex类型直接支持。它的Lock方法能够获取到token(这里叫锁)，并且Unlock方法会释放这个token：</p>
<p><em>gopl.io/ch9/bank3</em></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">import &quot;sync&quot;

var (
    mu      sync.Mutex &#x2F;&#x2F; guards balance
    balance int
)

func Deposit(amount int) &#123;
    mu.Lock()
    balance &#x3D; balance + amount
    mu.Unlock()
&#125;

func Balance() int &#123;
    mu.Lock()
    b :&#x3D; balance
    mu.Unlock()
    return b
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在更复杂的临界区的应用中，尤其是必须要尽早处理错误并返回的情况下，就很难去(靠人)判断对Lock和Unlock的调用是在所有路径中都能够严格配对的了。Go语言里的defer简直就是这种情况下的救星：我们用defer来调用Unlock，临界区会隐式地延伸到函数作用域的最后，这样我们就从“总要记得在函数返回之后或者发生错误返回时要记得调用一次Unlock”这种状态中获得了解放。Go会自动帮我们完成这些事情。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func Balance() int &#123;
    mu.Lock()
    defer mu.Unlock()
    return balance
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>此外，一个deferred Unlock即使在临界区发生panic时依然会执行，这对于用recover (§5.10)来恢复的程序来说是很重要的。defer调用只会比显式地调用Unlock成本高那么一点点，不过却在很大程度上保证了代码的整洁性。</p>
<p>理想情况下，取款应该只在整个操作中获得一次互斥锁。下面这样的尝试是错误的：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">&#x2F;&#x2F; NOTE: incorrect!
func Withdraw(amount int) bool &#123;
    mu.Lock()
    defer mu.Unlock()
    Deposit(-amount)
    if Balance() &lt; 0 &#123;
        Deposit(amount)
        return false &#x2F;&#x2F; insufficient funds
    &#125;
    return true
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面这个例子中，Deposit会调用mu.Lock()第二次去获取互斥锁，但因为mutex已经锁上了，而无法被重入(译注：go里没有重入锁，关于重入锁的概念，请参考java)—也就是说没法对一个已经锁上的mutex来再次上锁—这会导致程序死锁，没法继续执行下去，Withdraw会永远阻塞下去。</p>
<h2 id="9-3-sync-RWMutex读写锁"><a href="#9-3-sync-RWMutex读写锁" class="headerlink" title="9.3. sync.RWMutex读写锁"></a>9.3. sync.RWMutex读写锁</h2><p>由于Balance函数只需要读取变量的状态，所以我们同时让多个Balance调用并发运行事实上是安全的，只要在运行的时候没有存款或者取款操作就行。在这种场景下我们需要一种特殊类型的锁，其允许多个只读操作并行执行，但写操作会完全互斥。这种锁叫作“多读单写”锁(multiple readers, single writer lock)，Go语言提供的这样的锁是sync.RWMutex：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var mu sync.RWMutex
var balance int
func Balance() int &#123;
    mu.RLock() &#x2F;&#x2F; readers lock
    defer mu.RUnlock()
    return balance
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>RLock只能在临界区共享变量没有任何写入操作时可用。一般来说，我们不应该假设逻辑上的只读函数/方法也不会去更新某一些变量。比如一个方法功能是访问一个变量，但它也有可能会同时去给一个内部的计数器+1(译注：可能是记录这个方法的访问次数啥的)，或者去更新缓存—使即时的调用能够更快。如果有疑惑的话，请使用互斥锁。</p>
<p>RWMutex只有当获得锁的大部分goroutine都是读操作，而锁在竞争条件下，也就是说，goroutine们必须等待才能获取到锁的时候，RWMutex才是最能带来好处的。RWMutex需要更复杂的内部记录，所以会让它比一般的无竞争锁的mutex慢一些</p>
<h2 id="9-4-内存同步"><a href="#9-4-内存同步" class="headerlink" title="9.4. 内存同步"></a>9.4. 内存同步</h2><p>你可能比较纠结为什么Balance方法需要用到互斥条件，无论是基于channel还是基于互斥量。毕竟和存款不一样，它只由一个简单的操作组成，所以不会碰到其它goroutine在其执行“期间”执行其它逻辑的风险。这里使用mutex有两方面考虑。第一Balance不会在其它操作比如Withdraw“中间”执行。第二（更重要的）是“同步”不仅仅是一堆goroutine执行顺序的问题，同样也会涉及到内存的问题。</p>
<p>在现代计算机中可能会有一堆处理器，每一个都会有其本地缓存(local cache)。为了效率，对内存的写入一般会在每一个处理器中缓冲，并在必要时一起flush到主存。这种情况下这些数据可能会以与当初goroutine写入顺序不同的顺序被提交到主存。像channel通信或者互斥量操作这样的原语会使处理器将其聚集的写入flush并commit，这样goroutine在某个时间点上的执行结果才能被其它处理器上运行的goroutine得到。</p>
<p>考虑一下下面代码片段的可能输出：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var x, y int
go func() &#123;
    x &#x3D; 1 &#x2F;&#x2F; A1
    fmt.Print(&quot;y:&quot;, y, &quot; &quot;) &#x2F;&#x2F; A2
&#125;()
go func() &#123;
    y &#x3D; 1                   &#x2F;&#x2F; B1
    fmt.Print(&quot;x:&quot;, x, &quot; &quot;) &#x2F;&#x2F; B2
&#125;()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>因为两个goroutine是并发执行，并且访问共享变量时也没有互斥，会有数据竞争，所以程序的运行结果没法预测的话也请不要惊讶。我们可能希望它能够打印出下面这四种结果中的一种，相当于几种不同的交错执行时的情况：</p>
<pre class="line-numbers language-none"><code class="language-none">y:0 x:1
x:0 y:1
x:1 y:1
y:1 x:1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>第四行可以被解释为执行顺序A1,B1,A2,B2或者B1,A1,A2,B2的执行结果。然而实际运行时还是有些情况让我们有点惊讶：</p>
<pre class="line-numbers language-none"><code class="language-none">x:0 y:0
y:0 x:0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>在一个独立的goroutine中，每一个语句的执行顺序是可以被保证的，也就是说goroutine内顺序是连贯的。但是在不使用channel且不使用mutex这样的显式同步操作时，我们就没法保证事件在不同的goroutine中看到的执行顺序是一致的了。尽管goroutine A中一定需要观察到x=1执行成功之后才会去读取y，但它没法确保自己观察得到goroutine B中对y的写入，所以A还可能会打印出y的一个旧版的值。</p>
<h2 id="9-5-sync-Once惰性初始化"><a href="#9-5-sync-Once惰性初始化" class="headerlink" title="9.5. sync.Once惰性初始化"></a>9.5. sync.Once惰性初始化</h2><p>回忆一下9.4节。因为缺少显式的同步，编译器和CPU是可以随意地去更改访问内存的指令顺序，以任意方式，只要保证每一个goroutine自己的执行顺序一致</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var mu sync.RWMutex &#x2F;&#x2F; guards icons
var icons map[string]image.Image
&#x2F;&#x2F; Concurrency-safe.
func Icon(name string) image.Image &#123;
    mu.RLock()
    if icons !&#x3D; nil &#123;
        icon :&#x3D; icons[name]
        mu.RUnlock()
        return icon
    &#125;
    mu.RUnlock()

    &#x2F;&#x2F; acquire an exclusive lock
    mu.Lock()
    if icons &#x3D;&#x3D; nil &#123; &#x2F;&#x2F; NOTE: must recheck for nil
        loadIcons()
    &#125;
    icon :&#x3D; icons[name]
    mu.Unlock()
    return icon
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的代码有两个临界区。goroutine首先会获取一个读锁，查询map，然后释放锁。如果条目被找到了(一般情况下)，那么会直接返回。如果没有找到，那goroutine会获取一个写锁。不释放共享锁的话，也没有任何办法来将一个共享锁升级为一个互斥锁，所以我们必须重新检查icons变量是否为nil，以防止在执行这一段代码的时候，icons变量已经被其它gorouine初始化过了。</p>
<p>上面的模板使我们的程序能够更好的并发，但是有一点太复杂且容易出错。幸运的是，sync包为我们提供了一个专门的方案来解决这种一次性初始化的问题：sync.Once。概念上来讲，一次性的初始化需要一个互斥量mutex和一个boolean变量来记录初始化是不是已经完成了；互斥量用来保护boolean变量和客户端数据结构。Do这个唯一的方法需要接收初始化函数作为其参数。让我们用sync.Once来简化前面的Icon函数吧：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">var loadIconsOnce sync.Once
var icons map[string]image.Image
&#x2F;&#x2F; Concurrency-safe.
func Icon(name string) image.Image &#123;
    loadIconsOnce.Do(loadIcons)
    return icons[name]
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>每一次对Do(loadIcons)的调用都会锁定mutex，并会检查boolean变量(译注：Go1.9中会先判断boolean变量是否为1(true)，只有不为1才锁定mutex，不再需要每次都锁定mutex)。在第一次调用时，boolean变量的值是false，Do会调用loadIcons并会将boolean变量设置为true。随后的调用什么都不会做，但是mutex同步会保证loadIcons对内存(这里其实就是指icons变量啦)产生的效果能够对所有goroutine可见。用这种方式来使用sync.Once的话，我们能够避免在变量被构建完成之前和其它goroutine共享该变量。</p>
<h2 id="9-6-竞争条件检测"><a href="#9-6-竞争条件检测" class="headerlink" title="9.6. 竞争条件检测"></a>9.6. 竞争条件检测</h2><p>只要在go build，go run或者go test命令后面加上-race的flag，就会使编译器创建一个你的应用的“修改”版或者一个附带了能够记录所有运行期对共享变量访问工具的test，并且会记录下每一个读或者写共享变量的goroutine的身份信息。另外，修改版的程序会记录下所有的同步事件，比如go语句，channel操作，以及对<code>(*sync.Mutex).Lock</code>，<code>(*sync.WaitGroup).Wait</code>等等的调用。(完整的同步事件集合是在The Go Memory Model文档中有说明，该文档是和语言文档放在一起的</p>
<p>竞争检查器会检查这些事件，会寻找在哪一个goroutine中出现了这样的case，例如其读或者写了一个共享变量，这个共享变量是被另一个goroutine在没有进行干预同步操作便直接写入的。这种情况也就表明了是对一个共享变量的并发访问，即数据竞争。这个工具会打印一份报告，内容包含变量身份，读取和写入的goroutine中活跃的函数的调用栈。这些信息在定位问题时通常很有用。</p>
<p>竞争检查器会报告所有的已经发生的数据竞争。然而，它只能检测到运行时的竞争条件；并不能证明之后不会发生数据竞争。所以为了使结果尽量正确，请保证你的测试并发地覆盖到了你的包。</p>
<p>由于需要额外的记录，因此构建时加了竞争检测的程序跑起来会慢一些，且需要更大的内存，即使是这样，这些代价对于很多生产环境的工作来说还是可以接受的。对于一些偶发的竞争条件来说，让竞争检查器来干活可以节省无数日夜的debugging。(译注：多少服务端C和C++程序员为此竞折腰)</p>
<h2 id="9-8-Goroutines和线程"><a href="#9-8-Goroutines和线程" class="headerlink" title="9.8. Goroutines和线程"></a>9.8. Goroutines和线程</h2><h3 id="9-8-1-动态栈"><a href="#9-8-1-动态栈" class="headerlink" title="9.8.1. 动态栈"></a>9.8.1. 动态栈</h3><p>每一个OS线程都有一个固定大小的内存块(一般会是2MB)来做栈，这个栈会用来存储当前正在被调用或挂起(指在调用其它函数时)的函数的内部变量。这个固定大小的栈同时很大又很小。因为2MB的栈对于一个小小的goroutine来说是很大的内存浪费，比如对于我们用到的，一个只是用来WaitGroup之后关闭channel的goroutine来说。而对于go程序来说，同时创建成百上千个goroutine是非常普遍的，如果每一个goroutine都需要这么大的栈的话，那这么多的goroutine就不太可能了。除去大小的问题之外，固定大小的栈对于更复杂或者更深层次的递归函数调用来说显然是不够的。修改固定的大小可以提升空间的利用率，允许创建更多的线程，并且可以允许更深的递归调用，不过这两者是没法同时兼备的。</p>
<p>相反，一个goroutine会以一个很小的栈开始其生命周期，一般只需要2KB。一个goroutine的栈，和操作系统线程一样，会保存其活跃或挂起的函数调用的本地变量，但是和OS线程不太一样的是，一个goroutine的栈大小并不是固定的；栈的大小会根据需要动态地伸缩。而goroutine的栈的最大值有1GB，比传统的固定大小的线程栈要大得多，尽管一般情况下，大多goroutine都不需要这么大的栈。</p>
<h3 id="9-8-2-Goroutine调度"><a href="#9-8-2-Goroutine调度" class="headerlink" title="9.8.2. Goroutine调度"></a>9.8.2. Goroutine调度</h3><p>OS线程会被操作系统内核调度。每几毫秒，一个硬件计时器会中断处理器，这会调用一个叫作scheduler的内核函数。这个函数会挂起当前执行的线程并将它的寄存器内容保存到内存中，检查线程列表并决定下一次哪个线程可以被运行，并从内存中恢复该线程的寄存器信息，然后恢复执行该线程的现场并开始执行线程。因为操作系统线程是被内核所调度，所以从一个线程向另一个“移动”需要完整的上下文切换，也就是说，保存一个用户线程的状态到内存，恢复另一个线程的到寄存器，然后更新调度器的数据结构。这几步操作很慢，因为其局部性很差需要几次内存访问，并且会增加运行的cpu周期。</p>
<p>Go的运行时包含了其自己的调度器，这个调度器使用了一些技术手段，比如m:n调度，因为其会在n个操作系统线程上多工(调度)m个goroutine。Go调度器的工作和内核的调度是相似的，但是这个调度器只关注单独的Go程序中的goroutine（译注：按程序独立）。</p>
<p>和操作系统的线程调度不同的是，Go调度器并不是用一个硬件定时器，而是被Go语言“建筑”本身进行调度的。例如当一个goroutine调用了time.Sleep，或者被channel调用或者mutex操作阻塞时，调度器会使其进入休眠并开始执行另一个goroutine，直到时机到了再去唤醒第一个goroutine。因为这种调度方式不需要进入内核的上下文，所以重新调度一个goroutine比调度一个线程代价要低得多。</p>
<h3 id="9-8-3-GOMAXPROCS"><a href="#9-8-3-GOMAXPROCS" class="headerlink" title="9.8.3. GOMAXPROCS"></a>9.8.3. GOMAXPROCS</h3><p>Go的调度器使用了一个叫做GOMAXPROCS的变量来决定会有多少个操作系统的线程同时执行Go的代码。其默认的值是运行机器上的CPU的核心数，所以在一个有8个核心的机器上时，调度器一次会在8个OS线程上去调度GO代码。(GOMAXPROCS是前面说的m:n调度中的n)。在休眠中的或者在通信中被阻塞的goroutine是不需要一个对应的线程来做调度的。在I/O中或系统调用中或调用非Go语言函数时，是需要一个对应的操作系统线程的，但是GOMAXPROCS并不需要将这几种情况计算在内。 </p>
<h3 id="9-8-4-Goroutine没有ID号"><a href="#9-8-4-Goroutine没有ID号" class="headerlink" title="9.8.4. Goroutine没有ID号"></a>9.8.4. Goroutine没有ID号</h3><p>goroutine没有可以被程序员获取到的身份(id)的概念。这一点是设计上故意而为之，由于thread-local storage总是会被滥用。比如说，一个web server是用一种支持tls的语言实现的，而非常普遍的是很多函数会去寻找HTTP请求的信息，这代表它们就是去其存储层(这个存储层有可能是tls)查找的。这就像是那些过分依赖全局变量的程序一样，会导致一种非健康的“距离外行为”，在这种行为下，一个函数的行为可能并不仅由自己的参数所决定，而是由其所运行在的线程所决定。因此，如果线程本身的身份会改变——比如一些worker线程之类的——那么函数的行为就会变得神秘莫测。</p>
<p>Go鼓励更为简单的模式，这种模式下参数(译注：外部显式参数和内部显式参数。tls 中的内容算是”外部”隐式参数)对函数的影响都是显式的。这样不仅使程序变得更易读，而且会让我们自由地向一些给定的函数分配子任务时不用担心其身份信息影响行为。</p>
<h1 id="10-包"><a href="#10-包" class="headerlink" title="10 包"></a>10 包</h1><h2 id="10-1-包简介"><a href="#10-1-包简介" class="headerlink" title="10.1 包简介"></a>10.1 包简介</h2><p>Go语言的闪电般的编译速度主要得益于三个语言特性。第一点，所有导入的包必须在每个文件的开头显式声明，这样的话编译器就没有必要读取和分析整个源文件来判断包的依赖关系。第二点，禁止包的环状依赖，因为没有循环依赖，包的依赖关系形成一个有向无环图，每个包可以被独立编译，而且很可能是被并发编译。第三点，编译后包的目标文件不仅仅记录包本身的导出信息，目标文件同时还记录了包的依赖关系。因此，在编译一个包的时候，编译器只需要读取每个直接导入包的目标文件，而不需要遍历所有依赖的的文件（译注：很多都是重复的间接依赖）。</p>
<h2 id="10-2-导入路径"><a href="#10-2-导入路径" class="headerlink" title="10.2. 导入路径"></a>10.2. 导入路径</h2><p>如果你计划分享或发布包，那么导入路径最好是全球唯一的。为了避免冲突，所有非标准库包的导入路径建议以所在组织的互联网域名为前缀；而且这样也有利于包的检索。</p>
<h2 id="10-3-包声明"><a href="#10-3-包声明" class="headerlink" title="10.3. 包声明"></a>10.3. 包声明</h2><p>例如，math/rand包的每个源文件的开头都包含<code>package rand</code>包声明语句，所以当你导入这个包，你就可以用rand.Int、rand.Float64类似的方式访问包的成员。</p>
<p>通常来说，默认的包名就是包导入路径名的最后一段，因此即使两个包的导入路径不同，它们依然可能有一个相同的包名。例如，math/rand包和crypto/rand包的包名都是rand。 </p>
<p>关于默认包名一般采用导入路径名的最后一段的约定也有三种例外情况。第一个例外，包对应一个可执行程序，也就是main包，这时候main包本身的导入路径是无关紧要的。名字为main的包是给go build（§10.7.3）构建命令一个信息，这个包编译完之后必须调用连接器生成一个可执行程序。</p>
<p>第二个例外，包所在的目录中可能有一些文件名是以<code>_test.go</code>为后缀的Go源文件（译注：前面必须有其它的字符，因为以<code>_</code>或<code>.</code>开头的源文件会被构建工具忽略），并且这些源文件声明的包名也是以<code>_test</code>为后缀名的。这种目录可以包含两种包：一种是普通包，另一种则是测试的外部扩展包。所有以<code>_test</code>为后缀包名的测试外部扩展包都由go test命令独立编译，普通包和测试的外部扩展包是相互独立的。测试的外部扩展包一般用来避免测试代码中的循环导入依赖，具体细节我们将在11.2.4节中介绍。</p>
<p>第三个例外，一些依赖版本号的管理工具会在导入路径后追加版本号信息，例如”gopkg.in/yaml.v2”。这种情况下包的名字并不包含版本号后缀，而是yaml。</p>
<h2 id="10-4-导入声明"><a href="#10-4-导入声明" class="headerlink" title="10.4. 导入声明"></a>10.4. 导入声明</h2><p>如果我们想同时导入两个有着名字相同的包，例如math/rand包和crypto/rand包，那么导入声明必须至少为一个同名包指定一个新的包名以避免冲突。这叫做导入包的重命名。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">import (
    &quot;crypto&#x2F;rand&quot;
    mrand &quot;math&#x2F;rand&quot; &#x2F;&#x2F; alternative name mrand avoids conflict
)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>导入包的重命名只影响当前的源文件。其它的源文件如果导入了相同的包，可以用导入包原本默认的名字或重命名为另一个完全不同的名字。它不仅仅只是为了解决名字冲突。如果导入的一个包名很笨重，特别是在一些自动生成的代码中，这时候用一个简短名称会更方便</p>
<p>每个导入声明语句都明确指定了当前包和被导入包之间的依赖关系。如果遇到包循环导入的情况，Go语言的构建工具将报告错误。</p>
<h2 id="10-5-包的匿名导入"><a href="#10-5-包的匿名导入" class="headerlink" title="10.5. 包的匿名导入"></a>10.5. 包的匿名导入</h2><p>如果只是导入一个包而并不使用导入的包将会导致一个编译错误。但是有时候我们只是想利用导入包而产生的副作用：它会计算包级变量的初始化表达式和执行导入包的init初始化函数（§2.6.2）。这时候我们需要抑制“unused import”编译错误，我们可以用下划线<code>_</code>来重命名导入的包。像往常一样，下划线<code>_</code>为空白标识符，并不能被访问。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">import _ &quot;image&#x2F;png&quot; &#x2F;&#x2F; register PNG decoder<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这个被称为包的匿名导入。它通常是用来实现一个编译时机制，然后通过在main主程序入口选择性地导入附加的包。</p>
<p>数据库包database/sql也是采用了类似的技术，让用户可以根据自己需要选择导入必要的数据库驱动。例如：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">import (
    &quot;database&#x2F;sql&quot;
    _ &quot;github.com&#x2F;lib&#x2F;pq&quot;              &#x2F;&#x2F; enable support for Postgres
    _ &quot;github.com&#x2F;go-sql-driver&#x2F;mysql&quot; &#x2F;&#x2F; enable support for MySQL
)

db, err &#x3D; sql.Open(&quot;postgres&quot;, dbname) &#x2F;&#x2F; OK
db, err &#x3D; sql.Open(&quot;mysql&quot;, dbname)    &#x2F;&#x2F; OK
db, err &#x3D; sql.Open(&quot;sqlite3&quot;, dbname)  &#x2F;&#x2F; returns error: unknown driver &quot;sqlite3&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="10-6-包和命名"><a href="#10-6-包和命名" class="headerlink" title="10.6. 包和命名"></a>10.6. 包和命名</h2><p>当创建一个包，一般要用短小的包名，但也不能太短导致难以理解。</p>
<p>要尽量避免包名使用可能被经常用于局部变量的名字，这样可能导致用户重命名导入包，</p>
<p>包名一般采用单数的形式。标准库的bytes、errors和strings使用了复数形式，这是为了避免和预定义的类型冲突，同样还有go/types是为了避免和type关键字冲突。</p>
<h2 id="10-7-工具"><a href="#10-7-工具" class="headerlink" title="10.7. 工具"></a>10.7. 工具</h2><h3 id="10-7-1-工作区结构"><a href="#10-7-1-工作区结构" class="headerlink" title="10.7.1. 工作区结构"></a>10.7.1. 工作区结构</h3><p>对于大多数的Go语言用户，只需要配置一个名叫GOPATH的环境变量，用来指定当前工作目录即可。当需要切换到不同工作区的时候，只要更新GOPATH就可以了</p>
<p>第二个环境变量GOROOT用来指定Go的安装目录，还有它自带的标准库包的位置。GOROOT的目录结构和GOPATH类似，因此存放fmt包的源代码对应目录应该为$GOROOT/src/fmt。用户一般不需要设置GOROOT，默认情况下Go语言安装工具会将其设置为安装的目录路径</p>
<h3 id="10-7-2-下载包"><a href="#10-7-2-下载包" class="headerlink" title="10.7.2. 下载包"></a>10.7.2. 下载包</h3><p>使用命令<code>go get</code>可以下载一个单一的包或者用<code>...</code>下载整个子目录里面的每个包。Go语言工具箱的go命令同时计算并下载所依赖的每个包，这也是前一个例子中golang.org/x/net/html自动出现在本地工作区目录的原因。</p>
<p><code>go get</code>命令支持当前流行的托管网站GitHub、Bitbucket和Launchpad，可以直接向它们的版本控制系统请求代码。对于其它的网站，你可能需要指定版本控制系统的具体路径和协议，例如 Git或Mercurial。运行<code>go help importpath</code>获取相关的信息。</p>
<p><code>go get</code>命令获取的代码是真实的本地存储仓库，而不仅仅只是复制源文件，因此你依然可以使用版本管理工具比较本地代码的变更或者切换到其它的版本。例如golang.org/x/net包目录对应一个Git仓库：</p>
<pre class="line-numbers language-none"><code class="language-none">$ cd $GOPATH&#x2F;src&#x2F;golang.org&#x2F;x&#x2F;net
$ git remote -v
origin  https:&#x2F;&#x2F;go.googlesource.com&#x2F;net (fetch)
origin  https:&#x2F;&#x2F;go.googlesource.com&#x2F;net (push)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>需要注意的是导入路径含有的网站域名和本地Git仓库对应远程服务地址并不相同，真实的Git地址是go.googlesource.com。这其实是Go语言工具的一个特性，可以让包用一个自定义的导入路径，但是真实的代码却是由更通用的服务提供，例如googlesource.com或github.com。因为页面 <a href="https://golang.org/x/net/html">https://golang.org/x/net/html</a> 包含了如下的元数据，它告诉Go语言的工具当前包真实的Git仓库托管地址：</p>
<pre class="line-numbers language-none"><code class="language-none">$ go build gopl.io&#x2F;ch1&#x2F;fetch
$ .&#x2F;fetch https:&#x2F;&#x2F;golang.org&#x2F;x&#x2F;net&#x2F;html | grep go-import
&lt;meta name&#x3D;&quot;go-import&quot;
      content&#x3D;&quot;golang.org&#x2F;x&#x2F;net git https:&#x2F;&#x2F;go.googlesource.com&#x2F;net&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果指定<code>-u</code>命令行标志参数，<code>go get</code>命令将确保所有的包和依赖的包的版本都是最新的，然后重新编译和安装它们。如果不包含该标志参数的话，而且如果包已经在本地存在，那么代码将不会被自动更新。</p>
<p><code>go get -u</code>命令只是简单地保证每个包是最新版本，如果是第一次下载包则是比较方便的；但是对于发布程序则可能是不合适的，因为本地程序可能需要对依赖的包做精确的版本依赖管理。通常的解决方案是使用vendor的目录用于存储依赖包的固定版本的源代码，对本地依赖的包的版本更新也是谨慎和持续可控的。在Go1.5之前，一般需要修改包的导入路径，所以复制后golang.org/x/net/html导入路径可能会变为gopl.io/vendor/golang.org/x/net/html。最新的Go语言命令已经支持vendor特性，但限于篇幅这里并不讨论vendor的具体细节。</p>
<h3 id="10-7-3-构建包"><a href="#10-7-3-构建包" class="headerlink" title="10.7.3. 构建包"></a>10.7.3. 构建包</h3><p><code>go build</code>命令编译命令行参数指定的每个包。</p>
<h3 id="10-7-4-包文档"><a href="#10-7-4-包文档" class="headerlink" title="10.7.4. 包文档"></a>10.7.4. 包文档</h3><p>Go语言的编码风格鼓励为每个包提供良好的文档。包中每个导出的成员和包声明前都应该包含目的和用法说明的注释。</p>
<p>Go语言中的文档注释一般是完整的句子，第一行通常是摘要说明，以被注释者的名字开头。注释中函数的参数或其它的标识符并不需要额外的引号或其它标记注明。例如，下面是fmt.Fprintf的文档注释。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">&#x2F;&#x2F; Fprintf formats according to a format specifier and writes to w.
&#x2F;&#x2F; It returns the number of bytes written and any write error encountered.
func Fprintf(w io.Writer, format string, a ...interface&#123;&#125;) (int, error)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>Fprintf函数格式化的细节在fmt包文档中描述。如果注释后紧跟着包声明语句，那注释对应整个包的文档。包文档对应的注释只能有一个（译注：其实可以有多个，它们会组合成一个包文档注释），包注释可以出现在任何一个源文件中。如果包的注释内容比较长，一般会放到一个独立的源文件中；fmt包注释就有300行之多。这个专门用于保存包文档的源文件通常叫doc.go。</p>
<h3 id="10-7-5-内部包"><a href="#10-7-5-内部包" class="headerlink" title="10.7.5. 内部包"></a>10.7.5. 内部包</h3><p>为了满足这些需求，Go语言的构建工具对包含internal名字的路径段的包导入路径做了特殊处理。这种包叫internal包，一个internal包只能被和internal目录有同一个父目录的包所导入。例如，net/http/internal/chunked内部包只能被net/http/httputil或net/http包导入，但是不能被net/url包导入。不过net/url包却可以导入net/http/httputil包。</p>
<pre class="line-numbers language-none"><code class="language-none">net&#x2F;http
net&#x2F;http&#x2F;internal&#x2F;chunked
net&#x2F;http&#x2F;httputil
net&#x2F;url<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="10-7-6-查询包"><a href="#10-7-6-查询包" class="headerlink" title="10.7.6. 查询包"></a>10.7.6. 查询包</h3><p><code>go list</code>命令可以查询可用包的信息。其最简单的形式，可以测试包是否在工作区并打印它的导入路径</p>
<h1 id="第十一章-测试"><a href="#第十一章-测试" class="headerlink" title="第十一章　测试"></a>第十一章　测试</h1><p>现在的程序已经远比Wilkes时代的更大也更复杂，也有许多技术可以让软件的复杂性可得到控制。其中有两种技术在实践中证明是比较有效的。第一种是代码在被正式部署前需要进行代码评审。第二种则是测试</p>
<p>我们说测试的时候一般是指自动化测试，也就是写一些小的程序用来检测被测试代码（产品代码）的行为和预期的一样，这些通常都是精心设计的执行某些特定的功能或者是通过随机性的输入待验证边界的处理。</p>
<p>Go语言的测试技术是相对低级的。它依赖一个go test测试命令和一组按照约定方式编写的测试函数，测试命令可以运行这些测试函数。编写相对轻量级的纯测试代码是有效的，而且它很容易延伸到基准测试和示例文档。</p>
<p>在实践中，编写测试代码和编写程序本身并没有多大区别。我们编写的每一个函数也是针对每个具体的任务。我们必须小心处理边界条件，思考合适的数据结构，推断合适的输入应该产生什么样的结果输出。编写测试代码和编写普通的Go代码过程是类似的；它并不需要学习新的符号、规则和工具。</p>
<h2 id="11-1-go-test"><a href="#11-1-go-test" class="headerlink" title="11.1 go test"></a>11.1 go test</h2><p>go test命令是一个按照一定的约定和组织来测试代码的程序。在包目录内，所有以<code>_test.go</code>为后缀名的源文件在执行go build时不会被构建成包的一部分，它们是go test测试的一部分。</p>
<p>在<code>*_test.go</code>文件中，有三种类型的函数：测试函数、基准测试(benchmark)函数、示例函数。一个测试函数是以Test为函数名前缀的函数，用于测试程序的一些逻辑行为是否正确；go test命令会调用这些测试函数并报告测试结果是PASS或FAIL。基准测试函数是以Benchmark为函数名前缀的函数，它们用于衡量一些函数的性能；go test命令会多次运行基准测试函数以计算一个平均的执行时间。示例函数是以Example为函数名前缀的函数，提供一个由编译器保证正确性的示例文档。</p>
<p>go test命令会遍历所有的<code>*_test.go</code>文件中符合上述命名规则的函数，生成一个临时的main包用于调用相应的测试函数，接着构建并运行、报告测试结果，最后清理测试中生成的临时文件。</p>
<h2 id="11-2-测试函数"><a href="#11-2-测试函数" class="headerlink" title="11.2 测试函数"></a>11.2 测试函数</h2><p>每个测试函数必须导入testing包。测试函数有如下的签名：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func TestName(t *testing.T) &#123;
    &#x2F;&#x2F; ...
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>测试函数的名字必须以Test开头，可选的后缀名必须以大写字母开头，其中t参数用于报告测试失败和附加的日志信息</p>
<p>先编写测试用例并观察到测试用例触发了和用户报告的错误相同的描述是一个好的测试习惯。只有这样，我们才能定位我们要真正解决的问题。</p>
<p>先写测试用例的另外的好处是，运行测试通常会比手工描述报告的处理更快，这让我们可以进行快速地迭代。如果测试集有很多运行缓慢的测试，我们可以通过只选择运行某些特定的测试来加快测试速度。</p>
<p>参数<code>-v</code>可用于打印每个测试函数的名字和运行时间：</p>
<pre class="line-numbers language-none"><code class="language-none">$ go test -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>参数<code>-run</code>对应一个正则表达式，只有测试函数名被它正确匹配的测试函数才会被<code>go test</code>测试命令运行：</p>
<pre class="line-numbers language-none"><code class="language-none">$ go test -v -run&#x3D;&quot;French|Canal&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>当然，一旦我们已经修复了失败的测试用例，在我们提交代码更新之前，我们应该以不带参数的<code>go test</code>命令运行全部的测试用例，以确保修复失败测试的同时没有引入新的问题。</p>
<p>失败测试的输出并不包括调用t.Errorf时刻的堆栈调用信息。和其他编程语言或测试框架的assert断言不同，t.Errorf调用也没有引起panic异常或停止测试的执行。即使表格中前面的数据导致了测试的失败，表格后面的测试数据依然会运行测试，因此在一个测试中我们可能了解多个失败的信息。</p>
<p>如果我们真的需要停止测试，或许是因为初始化失败或可能是早先的错误导致了后续错误等原因，我们可以使用t.Fatal或t.Fatalf停止当前测试函数。它们必须在和测试函数同一个goroutine内调用。</p>
<h3 id="11-2-1-随机测试"><a href="#11-2-1-随机测试" class="headerlink" title="11.2.1. 随机测试"></a>11.2.1. 随机测试</h3><p>表格驱动的测试便于构造基于精心挑选的测试数据的测试用例。另一种测试思路是随机测试，也就是通过构造更广泛的随机输入来测试探索函数的行为。</p>
<p>那么对于一个随机的输入，我们如何能知道希望的输出结果呢？这里有两种处理策略。第一个是编写另一个对照函数，使用简单和清晰的算法，虽然效率较低但是行为和要测试的函数是一致的，然后针对相同的随机输入检查两者的输出结果。第二种是生成的随机输入的数据遵循特定的模式，这样我们就可以知道期望的输出的模式。</p>
<p>下面的例子使用的是第二种方法：randomPalindrome函数用于随机生成回文字符串。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">import &quot;math&#x2F;rand&quot;

&#x2F;&#x2F; randomPalindrome returns a palindrome whose length and contents
&#x2F;&#x2F; are derived from the pseudo-random number generator rng.
func randomPalindrome(rng *rand.Rand) string &#123;
    n :&#x3D; rng.Intn(25) &#x2F;&#x2F; random length up to 24
    runes :&#x3D; make([]rune, n)
    for i :&#x3D; 0; i &lt; (n+1)&#x2F;2; i++ &#123;
        r :&#x3D; rune(rng.Intn(0x1000)) &#x2F;&#x2F; random rune up to &#39;\u0999&#39;
        runes[i] &#x3D; r
        runes[n-1-i] &#x3D; r
    &#125;
    return string(runes)
&#125;

func TestRandomPalindromes(t *testing.T) &#123;
    &#x2F;&#x2F; Initialize a pseudo-random number generator.
    seed :&#x3D; time.Now().UTC().UnixNano()
    t.Logf(&quot;Random seed: %d&quot;, seed)
    rng :&#x3D; rand.New(rand.NewSource(seed))

    for i :&#x3D; 0; i &lt; 1000; i++ &#123;
        p :&#x3D; randomPalindrome(rng)
        if !IsPalindrome(p) &#123;
            t.Errorf(&quot;IsPalindrome(%q) &#x3D; false&quot;, p)
        &#125;
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>虽然随机测试会有不确定因素，但是它也是至关重要的，我们可以从失败测试的日志获取足够的信息。在我们的例子中，输入IsPalindrome的p参数将告诉我们真实的数据，但是对于函数将接受更复杂的输入，不需要保存所有的输入，只要日志中简单地记录随机数种子即可（像上面的方式）。有了这些随机数初始化种子，我们可以很容易修改测试代码以重现失败的随机测试。</p>
<p>通过使用当前时间作为随机种子，在整个过程中的每次运行测试命令时都将探索新的随机数据。如果你使用的是定期运行的自动化测试集成系统，随机测试将特别有价值。</p>
<h3 id="11-2-2-测试一个命令"><a href="#11-2-2-测试一个命令" class="headerlink" title="11.2.2. 测试一个命令"></a>11.2.2. 测试一个命令</h3><p>要注意的是在测试代码中并没有调用log.Fatal或os.Exit，因为调用这类函数会导致程序提前退出；调用这些函数的特权应该放在main函数中。如果真的有意外的事情导致函数发生panic异常，测试驱动应该尝试用recover捕获异常，然后将当前测试当作失败处理。如果是可预期的错误，例如非法的用户输入、找不到文件或配置文件不当等应该通过返回一个非空的error的方式处理。</p>
<h3 id="11-2-3-白盒测试"><a href="#11-2-3-白盒测试" class="headerlink" title="11.2.3. 白盒测试"></a>11.2.3. 白盒测试</h3><p>一种测试分类的方法是基于测试者是否需要了解被测试对象的内部工作原理。黑盒测试只需要测试包公开的文档和API行为，内部实现对测试代码是透明的。相反，白盒测试有访问包内部函数和数据结构的权限，因此可以做到一些普通客户端无法实现的测试。</p>
<p>例如，一个白盒测试可以在每个操作之后检测不变量的数据类型。（<strong>白盒测试只是一个传统的名称，其实称为clear box测试会更准确。</strong>）</p>
<p>黑盒和白盒这两种测试方法是互补的。黑盒测试一般更健壮，随着软件实现的完善测试代码很少需要更新。它们可以帮助测试者了解真实客户的需求，也可以帮助发现API设计的一些不足之处。相反，白盒测试则可以对内部一些棘手的实现提供更多的测试覆盖。</p>
<h3 id="11-2-4-外部测试包"><a href="#11-2-4-外部测试包" class="headerlink" title="11.2.4. 外部测试包"></a>11.2.4. 外部测试包</h3><p>我们可以通过外部测试包的方式解决循环依赖的问题，也就是在net/url包所在的目录声明一个独立的url_test测试包。其中包名的<code>_test</code>后缀告诉go test工具它应该建立一个额外的包来运行测试。我们将这个外部测试包的导入路径视作是net/url_test会更容易理解，但实际上它并不能被其他任何包导入。</p>
<p>因为外部测试包是一个独立的包，所以能够导入那些<code>依赖待测代码本身</code>的其他辅助包；包内的测试代码就无法做到这点。在设计层面，外部测试包是在所有它依赖的包的上层，正如图11.2所示。</p>
<p><img src="https://docs.hacknode.org/gopl-zh/images/ch11-02.png" alt="img"></p>
<p>通过避免循环的导入依赖，外部测试包可以更灵活地编写测试，特别是集成测试（需要测试多个组件之间的交互），可以像普通应用程序那样自由地导入其他包。</p>
<h3 id="11-2-5-编写有效的测试"><a href="#11-2-5-编写有效的测试" class="headerlink" title="11.2.5. 编写有效的测试"></a>11.2.5. 编写有效的测试</h3><p>许多Go语言新人会惊异于Go语言极简的测试框架。很多其它语言的测试框架都提供了识别测试函数的机制（通常使用反射或元数据），通过设置一些“setup”和“teardown”的钩子函数来执行测试用例运行的初始化和之后的清理操作，同时测试工具箱还提供了很多类似assert断言、值比较函数、格式化输出错误信息和停止一个失败的测试等辅助函数（通常使用异常机制）。虽然这些机制可以使得测试非常简洁，但是测试输出的日志却会像火星文一般难以理解。此外，虽然测试最终也会输出PASS或FAIL的报告，但是它们提供的信息格式却非常不利于代码维护者快速定位问题，因为失败信息的具体含义非常隐晦，比如“assert: 0 == 1”或成页的海量跟踪日志。</p>
<p>Go语言的测试风格则形成鲜明对比。它期望测试者自己完成大部分的工作，定义函数避免重复，就像普通编程那样。编写测试并不是一个机械的填空过程；一个测试也有自己的接口，尽管它的维护者也是测试仅有的一个用户。一个好的测试不应该引发其他无关的错误信息，它只要清晰简洁地描述问题的症状即可，有时候可能还需要一些上下文信息。在理想情况下，维护者可以在不看代码的情况下就能根据错误信息定位错误产生的原因。一个好的测试不应该在遇到一点小错误时就立刻退出测试，它应该尝试报告更多的相关的错误信息，因为我们可能从多个失败测试的模式中发现错误产生的规律。</p>
<p>下面的断言函数比较两个值，然后生成一个通用的错误信息，并停止程序。它很好用也确实有效，但是当测试失败的时候，打印的错误信息却几乎是没有价值的。它并没有为快速解决问题提供一个很好的入口。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">import (
    &quot;fmt&quot;
    &quot;strings&quot;
    &quot;testing&quot;
)
&#x2F;&#x2F; A poor assertion function.
func assertEqual(x, y int) &#123;
    if x !&#x3D; y &#123;
        panic(fmt.Sprintf(&quot;%d !&#x3D; %d&quot;, x, y))
    &#125;
&#125;
func TestSplit(t *testing.T) &#123;
    words :&#x3D; strings.Split(&quot;a:b:c&quot;, &quot;:&quot;)
    assertEqual(len(words), 3)
    &#x2F;&#x2F; ...
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>从这个意义上说，断言函数犯了过早抽象的错误：仅仅测试两个整数是否相同，而没能根据上下文提供更有意义的错误信息。我们可以根据具体的错误打印一个更有价值的错误信息，就像下面例子那样。只有在测试中出现重复模式时才采用抽象。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func TestSplit(t *testing.T) &#123;
    s, sep :&#x3D; &quot;a:b:c&quot;, &quot;:&quot;
    words :&#x3D; strings.Split(s, sep)
    if got, want :&#x3D; len(words), 3; got !&#x3D; want &#123;
        t.Errorf(&quot;Split(%q, %q) returned %d words, want %d&quot;,
            s, sep, got, want)
    &#125;
    &#x2F;&#x2F; ...
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>现在的测试不仅报告了调用的具体函数、它的输入和结果的意义；并且打印的真实返回的值和期望返回的值；并且即使断言失败依然会继续尝试运行更多的测试。一旦我们写了这样结构的测试，下一步自然不是用更多的if语句来扩展测试用例，我们可以用像IsPalindrome的表驱动测试那样来准备更多的s和sep测试用例。</p>
<h3 id="11-2-6-避免脆弱的测试"><a href="#11-2-6-避免脆弱的测试" class="headerlink" title="11.2.6. 避免脆弱的测试"></a>11.2.6. 避免脆弱的测试</h3><p>避免脆弱测试代码的方法是只检测你真正关心的属性。保持测试代码的简洁和内部结构的稳定。特别是对断言部分要有所选择。不要对字符串进行全字匹配，而是针对那些在项目的发展中是比较稳定不变的子串。很多时候值得花力气来编写一个从复杂输出中提取用于断言的必要信息的函数，虽然这可能会带来很多前期的工作，但是它可以帮助迅速及时修复因为项目演化而导致的不合逻辑的失败测试。</p>
<h2 id="11-3-测试覆盖率"><a href="#11-3-测试覆盖率" class="headerlink" title="11.3. 测试覆盖率"></a>11.3. 测试覆盖率</h2><p>就其性质而言，测试不可能是完整的</p>
<p>对待测程序执行的测试的程度称为测试的覆盖率。测试覆盖率并不能量化——即使最简单的程序的动态也是难以精确测量的——但是有启发式方法来帮助我们编写有效的测试代码。</p>
<p>这些启发式方法中，语句的覆盖率是最简单和最广泛使用的。语句的覆盖率是指在测试中至少被运行一次的代码占总代码数的比例。</p>
<p>首先，我们要确保所有的测试都正常通过：</p>
<pre class="line-numbers language-none"><code class="language-none">$ go test -v -run&#x3D;Coverage gopl.io&#x2F;ch7&#x2F;eval
&#x3D;&#x3D;&#x3D; RUN TestCoverage
--- PASS: TestCoverage (0.00s)
PASS
ok      gopl.io&#x2F;ch7&#x2F;eval         0.011s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下面这个命令可以显示测试覆盖率工具的使用用法：</p>
<pre class="line-numbers language-none"><code class="language-none">$ go tool cover
Usage of &#39;go tool cover&#39;:
Given a coverage profile produced by &#39;go test&#39;:
    go test -coverprofile&#x3D;c.out

Open a web browser displaying annotated source code:
    go tool cover -html&#x3D;c.out
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>go tool</code>命令运行Go工具链的底层可执行程序。这些底层可执行程序放在$GOROOT/pkg/tool/${GOOS}_${GOARCH}目录。因为有<code>go build</code>命令的原因，我们很少直接调用这些底层工具。</p>
<p>现在我们可以用<code>-coverprofile</code>标志参数重新运行测试：</p>
<pre class="line-numbers language-none"><code class="language-none">$ go test -run&#x3D;Coverage -coverprofile&#x3D;c.out gopl.io&#x2F;ch7&#x2F;eval
ok      gopl.io&#x2F;ch7&#x2F;eval         0.032s      coverage: 68.5% of statements<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>这个标志参数通过在测试代码中插入生成钩子来统计覆盖率数据。也就是说，在运行每个测试前，它将待测代码拷贝一份并做修改，在每个词法块都会设置一个布尔标志变量。当被修改后的被测试代码运行退出时，将统计日志数据写入c.out文件，并打印一部分执行的语句的一个总结。（如果你需要的是摘要，使用<code>go test -cover</code>。）</p>
<p>如果使用了<code>-covermode=count</code>标志参数，那么将在每个代码块插入一个计数器而不是布尔标志量。在统计结果中记录了每个块的执行次数，这可以用于衡量哪些是被频繁执行的热点代码。</p>
<p>为了收集数据，我们运行了测试覆盖率工具，打印了测试日志，生成一个HTML报告，然后在浏览器中打开（图11.3）。</p>
<pre class="line-numbers language-none"><code class="language-none">$ go tool cover -html&#x3D;c.out<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>实现100%的测试覆盖率听起来很美，但是在具体实践中通常是不可行的，也不是值得推荐的做法。因为那只能说明代码被执行过而已，并不意味着代码就是没有BUG的；因为对于逻辑复杂的语句需要针对不同的输入执行多次。有一些语句，例如上面的panic语句则永远都不会被执行到。另外，还有一些隐晦的错误在现实中很少遇到也很难编写对应的测试代码。测试从本质上来说是一个比较务实的工作，编写测试代码和编写应用代码的成本对比是需要考虑的。测试覆盖率工具可以帮助我们快速识别测试薄弱的地方，但是设计好的测试用例和编写应用代码一样需要严密的思考。</p>
<h2 id="11-4-基准测试"><a href="#11-4-基准测试" class="headerlink" title="11.4. 基准测试"></a>11.4. 基准测试</h2><p>基准测试是测量一个程序在固定工作负载下的性能。在Go语言中，基准测试函数和普通测试函数写法类似，但是以Benchmark为前缀名，并且带有一个<code>*testing.B</code>类型的参数；<code>*testing.B</code>参数除了提供和<code>*testing.T</code>类似的方法，还有额外一些和性能测量相关的方法。它还提供了一个整数N，用于指定操作执行的循环次数。</p>
<p>下面是IsPalindrome函数的基准测试，其中循环将执行N次。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">import &quot;testing&quot;

func BenchmarkIsPalindrome(b *testing.B) &#123;
    for i :&#x3D; 0; i &lt; b.N; i++ &#123;
        IsPalindrome(&quot;A man, a plan, a canal: Panama&quot;)
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们用下面的命令运行基准测试。和普通测试不同的是，默认情况下不运行任何基准测试。我们需要通过<code>-bench</code>命令行标志参数手工指定要运行的基准测试函数。该参数是一个正则表达式，用于匹配要执行的基准测试函数的名字，默认值是空的。其中“.”模式将可以匹配所有基准测试函数，但因为这里只有一个基准测试函数，因此和<code>-bench=IsPalindrome</code>参数是等价的效果。</p>
<pre class="line-numbers language-none"><code class="language-none">$ cd $GOPATH&#x2F;src&#x2F;gopl.io&#x2F;ch11&#x2F;word2
$ go test -bench&#x3D;.
PASS
BenchmarkIsPalindrome-8 1000000                1035 ns&#x2F;op
ok      gopl.io&#x2F;ch11&#x2F;word2      2.179s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>结果中基准测试名的数字后缀部分，这里是8，表示运行时对应的GOMAXPROCS的值，这对于一些与并发相关的基准测试是重要的信息。</p>
<p>报告显示每次调用IsPalindrome函数花费1.035微秒，是执行1,000,000次的平均时间。因为基准测试驱动器开始时并不知道每个基准测试函数运行所花的时间，它会尝试在真正运行基准测试前先尝试用较小的N运行测试来估算基准测试函数所需要的时间，然后推断一个较大的时间保证稳定的测量结果。</p>
<p>循环在基准测试函数内实现，而不是放在基准测试框架内实现，这样可以让每个基准测试函数有机会在循环启动前执行初始化代码，这样并不会显著影响每次迭代的平均运行时间。如果还是担心初始化代码部分对测量时间带来干扰，那么可以通过testing.B参数提供的方法来临时关闭或重置计时器，不过这些一般很少会用到。</p>
<p>这个基准测试告诉了我们某个具体操作所需的绝对时间，但我们往往想知道的是两个不同的操作的时间对比。例如，如果一个函数需要1ms处理1,000个元素，那么处理10000或1百万将需要多少时间呢？这样的比较揭示了渐近增长函数的运行时间。另一个例子：I/O缓存该设置为多大呢？基准测试可以帮助我们选择在性能达标情况下所需的最小内存。第三个例子：对于一个确定的工作哪种算法更好？基准测试可以评估两种不同算法对于相同的输入在不同的场景和负载下的优缺点。</p>
<p>比较型的基准测试就是普通程序代码。它们通常是单参数的函数，由几个不同数量级的基准测试函数调用，就像这样：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">func benchmark(b *testing.B, size int) &#123; &#x2F;* ... *&#x2F; &#125;
func Benchmark10(b *testing.B)         &#123; benchmark(b, 10) &#125;
func Benchmark100(b *testing.B)        &#123; benchmark(b, 100) &#125;
func Benchmark1000(b *testing.B)       &#123; benchmark(b, 1000) &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过函数参数来指定输入的大小，但是参数变量对于每个具体的基准测试都是固定的。要避免直接修改b.N来控制输入的大小。除非你将它作为一个固定大小的迭代计算输入，否则基准测试的结果将毫无意义。</p>
<p>比较型的基准测试反映出的模式在程序设计阶段是很有帮助的，但是即使程序完工了也应当保留基准测试代码。因为随着项目的发展，或者是输入的增加，或者是部署到新的操作系统或不同的处理器，我们可以再次用基准测试来帮助我们改进设计。</p>
<h2 id="11-5-剖析"><a href="#11-5-剖析" class="headerlink" title="11.5. 剖析"></a>11.5. 剖析</h2><p>基准测试(Benchmark)对于衡量特定操作的性能是有帮助的，但是当我们试图让程序跑的更快的时候，我们通常并不知道从哪里开始优化</p>
<p>当我们想仔细观察我们程序的运行速度的时候，最好的方法是性能剖析。剖析技术是基于程序执行期间一些自动抽样，然后在收尾时进行推断；最后产生的统计结果就称为剖析数据。</p>
<p>Go语言支持多种类型的剖析性能分析，每一种关注不同的方面，但它们都涉及到每个采样记录的感兴趣的一系列事件消息，每个事件都包含函数调用时函数调用堆栈的信息。内建的<code>go test</code>工具对几种分析方式都提供了支持。</p>
<p>CPU剖析数据标识了最耗CPU时间的函数。在每个CPU上运行的线程在每隔几毫秒都会遇到操作系统的中断事件，每次中断时都会记录一个剖析数据然后恢复正常的运行。</p>
<p>堆剖析则标识了最耗内存的语句。剖析库会记录调用内部内存分配的操作，平均每512KB的内存申请会触发一个剖析数据。</p>
<p>阻塞剖析则记录阻塞goroutine最久的操作，例如系统调用、管道发送和接收，还有获取锁等。每当goroutine被这些操作阻塞时，剖析库都会记录相应的事件。</p>
<p>只需要开启下面其中一个标志参数就可以生成各种分析文件。当同时使用多个标志参数时需要当心，因为一项分析操作可能会影响其他项的分析结果。</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">$ go test -cpuprofile&#x3D;cpu.out
$ go test -blockprofile&#x3D;block.out
$ go test -memprofile&#x3D;mem.out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>对于一些非测试程序也很容易进行剖析，具体的实现方式，与程序是短时间运行的小工具还是长时间运行的服务会有很大不同。剖析对于长期运行的程序尤其有用，因此可以通过调用Go的runtime API来启用运行时剖析。</p>
<p>一旦我们已经收集到了用于分析的采样数据，我们就可以使用pprof来分析这些数据。这是Go工具箱自带的一个工具，但并不是一个日常工具，它对应<code>go tool pprof</code>命令。该命令有许多特性和选项，但是最基本的是两个参数：生成这个概要文件的可执行程序和对应的剖析数据。</p>
<p>为了提高分析效率和减少空间，分析日志本身并不包含函数的名字；它只包含函数对应的地址。也就是说pprof需要对应的可执行程序来解读剖析数据。虽然<code>go test</code>通常在测试完成后就丢弃临时用的测试程序，但是在启用分析的时候会将测试程序保存为foo.test文件，其中foo部分对应待测包的名字。</p>
<p>本书最后的两章是讨论reflect和unsafe包,<strong>一般的Go程序员很少使用它们，事实上也很少需要用到</strong>。因此，如果你还没有写过任何真实的Go程序的话，现在可以先去写些代码了。</p>
<h1 id="第十二章-反射"><a href="#第十二章-反射" class="headerlink" title="第十二章　反射"></a>第十二章　反射</h1><p>Go语言提供了一种机制，能够在运行时更新变量和检查它们的值、调用它们的方法和它们支持的内在操作，而不需要在编译时就知道这些变量的具体类型。这种机制被称为反射。</p>
<p>在本章，我们将探讨Go语言的反射特性，看看它可以给语言增加哪些表达力，以及在两个至关重要的API是如何使用反射机制的：一个是fmt包提供的字符串格式化功能，另一个是类似encoding/json和encoding/xml提供的针对特定协议的编解码功能。对于我们在4.6节中看到过的text/template和html/template包，它们的实现也是依赖反射技术的。然后，反射是一个复杂的内省技术，不应该随意使用，因此，尽管上面这些包内部都是用反射技术实现的，但是它们自己的API都没有公开反射相关的接口。</p>
<h2 id="12-1-为何需要反射"><a href="#12-1-为何需要反射" class="headerlink" title="12.1. 为何需要反射?"></a>12.1. 为何需要反射?</h2><p>有时候我们需要编写一个函数能够处理一类并不满足普通公共接口的类型的值，也可能是因为它们并没有确定的表示方式，或者是在我们设计该函数的时候这些类型可能还不存在。</p>
<p>一个大家熟悉的例子是fmt.Fprintf函数提供的字符串格式化处理逻辑，它可以用来对任意类型的值格式化并打印，甚至支持用户自定义的类型。</p>
<p>我们首先用switch类型分支来测试输入参数是否实现了String方法，如果是的话就调用该方法。然后继续增加类型测试分支，检查这个值的动态类型是否是string、int、bool等基础类型，并在每种情况下执行相应的格式化操作。</p>
<p>但是我们如何处理其它类似[]float64、map[string][]string等类型呢？我们当然可以添加更多的测试分支，但是这些组合类型的数目基本是无穷的。还有如何处理类似url.Values这样的具名类型呢？即使类型分支可以识别出底层的基础类型是map[string][]string，但是它并不匹配url.Values类型，因为它们是两种不同的类型，而且switch类型分支也不可能包含每个类似url.Values的类型，这会导致对这些库的依赖。</p>
<p>没有办法来检查未知类型的表示方式，我们被卡住了。这就是我们为何需要反射的原因。</p>
<h2 id="12-2-reflect-Type和reflect-Value"><a href="#12-2-reflect-Type和reflect-Value" class="headerlink" title="12.2. reflect.Type和reflect.Value"></a>12.2. reflect.Type和reflect.Value</h2><p>反射是由 reflect 包提供的。 它定义了两个重要的类型, Type 和 Value. 一个 Type 表示一个Go类型. 它是一个接口, 有许多方法来区分类型以及检查它们的组成部分, 例如一个结构体的成员或一个函数的参数等. 唯一能反映 reflect.Type 实现的是接口的类型描述信息(§7.5), 也正是这个实体标识了接口值的动态类型.</p>
<p>函数 reflect.TypeOf 接受任意的 interface{} 类型, 并以reflect.Type形式返回其动态类型:</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">t :&#x3D; reflect.TypeOf(3)  &#x2F;&#x2F; a reflect.Type
fmt.Println(t.String()) &#x2F;&#x2F; &quot;int&quot;
fmt.Println(t)          &#x2F;&#x2F; &quot;int&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>根据我的经验，感觉反射的东西，不是经常用到，属于那种用到再查的知识，（go并不像java那么面向对象）</p>
<h1 id="第十三章-底层编程"><a href="#第十三章-底层编程" class="headerlink" title="第十三章　底层编程"></a>第十三章　底层编程</h1><p>Go语言的设计包含了诸多安全策略，限制了可能导致程序运行出错的用法。编译时类型检查可以发现大多数类型不匹配的操作，例如两个字符串做减法的错误。字符串、map、slice和chan等所有的内置类型，都有严格的类型转换规则。</p>
<p>对于无法静态检测到的错误，例如数组访问越界或使用空指针，运行时动态检测可以保证程序在遇到问题的时候立即终止并打印相关的错误信息。自动内存管理（垃圾内存自动回收）可以消除大部分野指针和内存泄漏相关的问题。</p>
<p>Go语言的实现刻意隐藏了很多底层细节。我们无法知道一个结构体真实的内存布局，也无法获取一个运行时函数对应的机器码，也无法知道当前的goroutine是运行在哪个操作系统线程之上。事实上，Go语言的调度器会自己决定是否需要将某个goroutine从一个操作系统线程转移到另一个操作系统线程。一个指向变量的指针也并没有展示变量真实的地址。因为垃圾回收器可能会根据需要移动变量的内存位置，当然变量对应的地址也会被自动更新。</p>
<p>总的来说，Go语言的这些特性使得Go程序相比较低级的C语言来说更容易预测和理解，程序也不容易崩溃。通过隐藏底层的实现细节，也使得Go语言编写的程序具有高度的可移植性，因为语言的语义在很大程度上是独立于任何编译器实现、操作系统和CPU系统结构的（当然也不是完全绝对独立：例如int等类型就依赖于CPU机器字的大小，某些表达式求值的具体顺序，还有编译器实现的一些额外的限制等）。</p>
<p>有时候我们可能会放弃使用部分语言特性而优先选择具有更好性能的方法，例如需要与其他语言编写的库进行互操作，或者用纯Go语言无法实现的某些函数。</p>
<p>在本章，我们将展示如何使用unsafe包来摆脱Go语言规则带来的限制，讲述如何创建C语言函数库的绑定，以及如何进行系统调用。</p>
<p><strong>本章提供的方法不应该轻易使用</strong>（译注：属于黑魔法，虽然功能很强大，但是也容易误伤到自己）如果没有处理好细节，它们可能导致各种不可预测的并且隐晦的错误，甚至连有经验的C语言程序员也无法理解这些错误。使用unsafe包的同时也放弃了Go语言保证与未来版本的兼容性的承诺，因为它必然会有意无意中使用很多非公开的实现细节，而这些实现的细节在未来的Go语言中很可能会被改变。</p>
<p>要注意的是，unsafe包是一个采用特殊方式实现的包。虽然它可以和普通包一样的导入和使用，但它实际上是由编译器实现的。它提供了一些访问语言内部特性的方法，特别是内存布局相关的细节。将这些特性封装到一个独立的包中，是为在极少数情况下需要使用的时候，同时引起人们的注意（译注：因为看包的名字就知道使用unsafe包是不安全的）。此外，有一些环境因为安全的因素可能限制这个包的使用。</p>
<p>不过unsafe包被广泛地用于比较低级的包, 例如runtime、os、syscall还有net包等，因为它们需要和操作系统密切配合，但是对于普通的程序一般是不需要使用unsafe包的。</p>
<h2 id="13-1-unsafe-Sizeof-Alignof-和-Offsetof"><a href="#13-1-unsafe-Sizeof-Alignof-和-Offsetof" class="headerlink" title="13.1. unsafe.Sizeof, Alignof 和 Offsetof"></a>13.1. unsafe.Sizeof, Alignof 和 Offsetof</h2><h2 id="13-4-通过cgo调用C代码"><a href="#13-4-通过cgo调用C代码" class="headerlink" title="13.4. 通过cgo调用C代码"></a>13.4. 通过cgo调用C代码</h2><p>Go程序可能会遇到要访问C语言的某些硬件驱动函数的场景，或者是从一个C++语言实现的嵌入式数据库查询记录的场景，或者是使用Fortran语言实现的一些线性代数库的场景。C语言作为一个通用语言，很多库会选择提供一个C兼容的API，然后用其他不同的编程语言实现（译者：Go语言需要也应该拥抱这些巨大的代码遗产）。</p>
<p>在本节中，我们将构建一个简易的数据压缩程序，使用了一个Go语言自带的叫cgo的用于支援C语言函数调用的工具。这类工具一般被称为 <em>foreign-function interfaces</em> （简称ffi）, 并且在类似工具中cgo也不是唯一的。SWIG（ <a href="http://swig.org/">http://swig.org</a> ）是另一个类似的且被广泛使用的工具，SWIG提供了很多复杂特性以支援C++的特性，但SWIG并不是我们要讨论的主题</p>
<p>如果是比较小的C语言库，我们完全可以用纯Go语言重新实现一遍。如果我们对性能也没有特殊要求的话，我们还可以用os/exec包的方法将C编写的应用程序作为一个子进程运行。只有当你需要使用复杂而且性能更高的底层C接口时，就是使用cgo的场景了（译注：用os/exec包调用子进程的方法会导致程序运行时依赖那个应用程序）。下面我们将通过一个例子讲述cgo的具体用法。</p>
<p>译注：本章采用的代码都是最新的。因为之前已经出版的书中包含的代码只能在Go1.5之前使用。从Go1.6开始，Go语言已经明确规定了哪些Go语言指针可以直接传入C语言函数。新代码重点是增加了bz2alloc和bz2free的两个函数，用于bz_stream对象空间的申请和释放操作</p>
<p>其中<code>import &quot;C&quot;</code>的语句是比较特别的。其实并没有一个叫C的包，但是这行语句会让Go编译程序在编译之前先运行cgo工具。</p>
<h2 id="13-5-几点忠告"><a href="#13-5-几点忠告" class="headerlink" title="13.5. 几点忠告"></a>13.5. 几点忠告</h2><p>我们在前一章结尾的时候，我们警告要谨慎使用reflect包。那些警告同样适用于本章的unsafe包。</p>
<p>高级语言使得程序员不用再关心真正运行程序的指令细节，同时也不再需要关注许多如内存布局之类的实现细节。因为高级语言这个绝缘的抽象层，我们可以编写安全健壮的，并且可以运行在不同操作系统上的具有高度可移植性的程序。</p>
<p>但是unsafe包，它让程序员可以透过这个绝缘的抽象层直接使用一些必要的功能，虽然可能是为了获得更好的性能。但是代价就是牺牲了可移植性和程序安全，因此使用unsafe包是一个危险的行为。我们对何时以及如何使用unsafe包的建议和我们在11.5节提到的Knuth对过早优化的建议类似。大多数Go程序员可能永远不会需要直接使用unsafe包。当然，也永远都会有一些需要使用unsafe包实现会更简单的场景。如果确实认为使用unsafe包是最理想的方式，那么应该尽可能将它限制在较小的范围，这样其它代码就可以忽略unsafe的影响。</p>
<p>现在，赶紧将最后两章抛入脑后吧。编写一些实实在在的应用是真理。请远离reflect的unsafe包，除非你确实需要它们。</p>
<p>最后，用Go快乐地编程。我们希望你能像我们一样喜欢Go语言。</p>
]]></content>
      <categories>
        <category>书摘</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>《把时间当做朋友》阅读笔记</title>
    <url>/%E4%B9%A6%E6%91%98/Books/%E3%80%8A%E6%8A%8A%E6%97%B6%E9%97%B4%E5%BD%93%E5%81%9A%E6%9C%8B%E5%8F%8B%E3%80%8B%E6%91%98%E5%BD%95/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="本书不是时间管理书籍"><a href="#本书不是时间管理书籍" class="headerlink" title="本书不是时间管理书籍"></a>本书不是时间管理书籍</h3><p>尽管本书的内容也包括任务管理等与常见“时间管理技巧”相关的内容，但是，本书主张时间不可管理、一切都靠积累。</p>
<p>更进一步地说，本书主张一个人必须在开启心智、提高思考能力之后，才能够用正确的方法做正确的事情。也只有这样，时间才是朋友，否则，它就是敌人。很多“时间管理技巧”并非无用，但往往由于使用者心智能力低下甚至尚未开启心智，致使那些技巧只能治标，不能治本，甚至既不治标，也不治本。</p>
<h3 id="这本书不是成功学书籍"><a href="#这本书不是成功学书籍" class="headerlink" title="这本书不是成功学书籍"></a>这本书不是成功学书籍</h3><p>成功从来都不是人人都可以做到的事情，过去不是，现在不是，将来依然不是。基于比较的成功观，是伤人的、害人的。事实上，对年轻人来说，成长比成功更重要，而且，这才是人人都可以做到的事情，才是人人都值得追求的事情。而成长其实只有一条路——积累。</p>
<h3 id="这本书不是心灵鸡汤式的书籍"><a href="#这本书不是心灵鸡汤式的书籍" class="headerlink" title="这本书不是心灵鸡汤式的书籍"></a>这本书不是心灵鸡汤式的书籍</h3><p>这本书里没有安慰，因为这本书不是写给脆弱的人的——只有脆弱的人才不断需要安慰。现实是残酷的，生活是艰难的，无论什么样的时代，无论对哪一个层次的人，都是如此，对大多数年轻人来说，更是如此。人的理性建立在接受现实的基础上，不能接受现实，一切成长都是虚妄。只有坚强的人才能接受现实，只有接受现实，才有可能开始运用心智作出理性的决定，进而才有可能做时间的朋友</p>
<h3 id="这不是一本讲大道理的书"><a href="#这不是一本讲大道理的书" class="headerlink" title="这不是一本讲大道理的书"></a>这不是一本讲大道理的书</h3><p>这本书所传递的信息，原本只不过属于常识，可由于种种原因，并没有被真正普及、理解，实在可惜。</p>
<h3 id="第2版前言"><a href="#第2版前言" class="headerlink" title="第2版前言"></a>第2版前言</h3><p>这本书在一个读者群中反应更为热烈——在职场上打拼过一两年的新人。当然，现在我已经可以理解个中原因：因为这本书所讲述的一些道理是需要一定的经验和挫折才能真正理解的。对尚未做过什么实事，尚未遇到什么挫折的人来说，这些道理看起来是那么简单、那么明显，乃至于和废话差不多——而所谓“越早醒悟越好”这样的言词，对他们来说是相当地苍白；所谓“苦口婆心”的态度，对他们来说是相当地腻歪。</p>
<p>有些道理就是很难传播——因为人们只传递自己认同的东西。有些道理就是不大可能被多数人认同，于是，即便它再合乎逻辑，再怎么有用，也不是很容易传播。</p>
<h3 id="第1版前言"><a href="#第1版前言" class="headerlink" title="第1版前言"></a>第1版前言</h3><p>无论是谁，都最终在某一刻意识到时间的珍贵，并且几乎注定会因懂事太晚而多少有些后悔。病了要投医，病急了就很可能乱投医。可是书店里各种各样的关于“时间管理”的书籍多半于事无补——至少这是我自己的经验。一方面是束手无策，另一方面是时间无情地流逝，恶性循环早已经形成——要做的事情越来越多，可用的时间越来越少；而因此时间越来越珍贵，时间越来越紧迫；时间越珍贵就越紧迫，时间越紧迫就越珍贵……压力越来越大，生活成了一团乱麻。</p>
<p>时间是个问题，可是“管理”它却不是正确有效的方法，因为那是几乎做不到的事情。之所以后来换成这个名字，在于“把时间当作朋友”更能体现本书的实质。我自己也是在写作的过程中才清楚地意识到“管理时间”的说法有多么荒谬。<strong>人是没办法管理时间的，时间也不听从任何人的管理</strong></p>
<p>终于有一天，我对自己说：<strong>“承认了吧，你对时间的流逝无能为力。”</strong>那一刻的醒悟，感觉就像凤凰涅槃一样浴火重生——这个说法多少有些矫情，但又确实过于准确而无可替代。那一瞬间，我已经30多岁——还好，并不算太晚。</p>
<p>要管理的不是时间，而是自己。人们生活在同一个世界，却又各自生活在自己的那个版本之中。改变自己，就意味着属于自己的那个版本的世界将会随之而变，其中也包括时间的属性。开启自己的心智，让自己能够用最可能准确的方式思考、观察、记录、总结、分享和行动，那么自己的时间就会拥有不同的质量，进而整个生活都必然因此焕然一新。</p>
<p>人生的幸运在于能够“用正确的方式做正确的事情”。而什么是正确的或者更好的方式，什么事情真的值得去做，需要运用良好的心智才能作出尽可能准确的判断。若真的做到“用正确的方式做正确的事情”，那一瞬间，时间无须管理（当然就算想管其实也没人能做到），它是你的朋友，陪你亦步亦趋走到最后的朋友。</p>
<h2 id="困境"><a href="#困境" class="headerlink" title="困境"></a>困境</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>完成任何任务都需要一定的时间。同时，任何任务都最好或必须在某个特定的时间点之前完成，即，任务都有一个最后期限。而且，只要是必须完成的任务，不管是否已经开始执行，ddl就在不断迫近，因为时间永不停歇。</p>
<p>问题好像很简单，看起来无非有以下几种情况。</p>
<ul>
<li>没有按时开始执行任务。</li>
<li>错误估算完成任务所需时间。</li>
<li>在任务的执行过程中出现了差错。</li>
</ul>
<p>果真如此的话，那么解决方案好像也很简单。</p>
<ul>
<li>按时开始执行任务。</li>
<li>正确估算完成任务所需时间。</li>
<li>在执行任务的过程中不要出差错。</li>
</ul>
<p>可事实上问题并非如此简单，否则也不会让那么多人一 生都束手无策。</p>
<h3 id="慌乱"><a href="#慌乱" class="headerlink" title="慌乱"></a>慌乱</h3><p>大多数人都一样，压力刻在额头，匆忙写在脸上。他们身上充满了矛盾——他们“<strong>既勤奋又懒惰</strong>”。</p>
<p>经过反复询问，认真观察，我终于明白了——很多学生“既勤奋又懒惰”的怪异现象来自他们对“时间压力”的感受。“没时间了”或者“时间不够了”的恐慌，使他们超乎寻常地勤奋。哪怕只是虚假的“勤奋”，一样能让他们恨不得废寝忘食。而同样的感受，也使他们终日不忘寻找捷径，美其名曰“提高效率”，而实际上却想着“最好不费吹灰之力”。无论哪一种行为，都肯定是不现实的，因为已经“没时间了”——这才是冷冰冰的事实。</p>
<p>“没时间了”，是“时间恐慌症”患者脑子里唯一反复闪现的一句话。巨大的压力，极度的恐慌，使“患者”身上综合了一切矛盾：他们既勤奋又懒惰，既聪明又愚蠢，既勇敢又懦弱，既满怀希望又分分秒秒面临绝望，既充满自信又随时随地体会自卑……</p>
<p>但是，生活中明显有另外一些人——尽管数量上并不占优——在用另外一种状态生活。他们从容，他们优雅，他们善于化解各种压力，安静地去做他们认为应该做的事情，并总能有所成就。他们甚至可以达到常人无法想象的境界——不以物喜，不以己悲。面对同样的困境，这另外的一些人究竟是如何保持从容的呢？</p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>你想打开一扇门，可那门上有个锁，把门锁住了。“如果能找到钥匙就好了”，你想。可是钥匙在哪里呢？反正不在那把锁上。既然门被锁上了，钥匙就一定不会插在锁孔里。</p>
<p>“没时间了！”这种尴尬就像是一把我们想要打开的锁。</p>
<p>同样，要想摆脱这种尴尬，死盯着这把锁是没有用的。</p>
<p>很少有人会注意，所谓“管理时间”抑或“时间管理”是虚假的概念，是不可能完成的任务。时间不会服从任何人的管理，它只会自顾自地流逝。你不可能冲它大喊：“时间，你给我慢一点！”它只是自顾自地流逝。你也不可能向它大叫：“时间，你给我快一点！”它还是自顾自地流逝。时间不理任何人，它用自己特有的速度流逝，不受任何外界因素影响。</p>
<p>钥匙在其他地方，反正不在锁上。尝试着从“管理时间”开始解决问题，注定徒劳。尽管我们面临的尴尬是“没时间了”，可从本质上来看，这尴尬与时间的关系不是很大。没错，<strong>问题出在我们自己身上。</strong></p>
<p>看起来似乎很有道理，而实际的操作效果怎么样呢？并不好。为什么？因为你发现（或最终证明）自己没有足够的能力去区分一项任务是否重要、是否紧急。所以，到头来，尽管别人告诉你的方法是对的，可是你操作起来却得不到期望的结果。</p>
<p>没错，问题出在我们自己身上。</p>
<p>我们无法管理时间。<strong>我们真正能够管理的，是我们自己</strong>。只有接受这个简单的事实，才有解决问题的希望。“时间不可管理”，尽管听上去很简单，但是理解它，进而接受它，可不见得那么容易。因为，它未必是（甚至几乎肯定不是）你以往已经认同的观念。</p>
<p>其实，这本书的主旨非常简单：时间是不可能被管理的。必须开启心智，看清楚，想明白：问题出在我们自 己身上。而我们所面临的问题，与时间、管理或时间管理都没有多大的关系。解决方案只有一个，那就是“一切都靠积累”。深信积累的力量，时间就是你的朋友，否则，它就是你的敌人。</p>
<h2 id="醒悟"><a href="#醒悟" class="headerlink" title="醒悟"></a>醒悟</h2><h3 id="孰主孰仆"><a href="#孰主孰仆" class="headerlink" title="孰主孰仆"></a>孰主孰仆</h3><p><strong>你的大脑并不是你，你的大脑是（属于）“你的”大脑。</strong></p>
<p>尽管你用它思考，好像它也在指导你的行为，但是你要明白，你不应该隶属于你的大脑，而应该是它隶属于你，你“可以控制你的大脑”——分清主仆很重要。</p>
<p>“<strong>运用心智获得解放</strong>”。不要再让自己“跟着感觉走”，成为大脑的奴隶，而是翻身做大脑的主人。</p>
<h3 id="何谓心智"><a href="#何谓心智" class="headerlink" title="何谓心智"></a>何谓心智</h3><p>一个人的心智就是其过往获得的一切知识及经验的总和（包括基于这些知识和经验造就的思考方法、思考模式）。心智与智商不同。大多数人都拥有正常的智商，但并非每个拥有正常智商的人都拥有正常的心智。许多人的心智仍处于未开启的状态。我们常看到所谓的“聪明人办傻事”，其原因基本上都是他们的心智尚未开启。他们即使做出了错误的判断也会振振有词——绝非强词夺理，而是义正词严、双目炯炯、真诚满怀。</p>
<p>无论是正向还是反向，心智一旦开启，就会不断自我积累，自我过滤，直至根深蒂固。人与人之间心智力量的差异，就是这样一点点地积累，最终天差地别。既然一个人的心智是他的知识和经验的总和，当然也会包括他的思考方法和思考模式。因为无论是吸收知识还是总结经验，都需要经过思考才能得出结论。在此过程中，他的思考方法和思考模式都会多多少少产生变化，根据新的知识和经验，或巩固、或调整、或否定、或重建……</p>
<p>所以说，心智这东西“上不封顶、下无保底”。心智一旦开启，就可能因为学习而像病毒一样疯狂发展，与此同时，“学习能力”也会相应地大幅增长。于是，心智可以发展，可以培养，可以重建，甚至可以反复重建——怎么可能封顶？然而，反过来，如若这一过程中出现一些差错，那么心智的发展就有可能停滞，甚至倒退，弄不好还会“痴心不得反癫狂”——怎么可能保底？这就好比有些人一辈子都是“原始人”；有一些人“开窍”了，演化成了“现代人”，甚至<a href="http://goo.gl/Z7bo2">尼采</a>所说的“超人”；同时还有一些人也“开窍”了，退化成了“猴子”。</p>
<p>有些认识，哪怕是简单的常识，也需要亲身经历后才能真正体会”。只有拥有无与伦比的打字速度，才能体会打字速度快的好处。</p>
<blockquote>
<p>心智真正成熟的人在一些情况下能够做到无须亲自经历，仅凭思考就得到深刻的体会。</p>
</blockquote>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>人们可能会基于一模一样的原因做出截然相反的决定。</p>
<p>当有机会学习一项技能的时候，人们常常会问：“学这东西有什么用呢？”其实，在尚未学习之前，对提问者来说，答案只能是“不知道”——尽管很多书籍中都已经花费大量的篇幅去论述“为什么要学习（某项技能）”。而“不知道那东西（对自己）有什么用”，恰恰是一部分人（更多一些）决定不学的原因，同时，它也是另一部分人（更少一些）决定去学的原因。</p>
<p>为了表述方便，让我们把“因为不知道那东西有什么用而决定学习的人”称为“甲”，把“因为不知道那东西有什么用而拒绝学习的人”称为“乙”。</p>
<p>在更多的时候，甲很可能想都没有想过“学这东西有什么用”。他从来都不问用途，只是自顾自学去了。许多年后，他自然而然地找到了这项技能的用处，享受了其已有技能所带来的种种好处。于是，这个既有经验成为他心智的一部分。当遇到新的学习机会时，他会自然而然地采取同样的策略——管它有什么用呢，学呗，学了总有用处。他也会自然而然地理解并相信“技不压身”的道理。</p>
<p>说完甲我们来说乙。乙当然永远不会知道这东西对他究竟有什么用，因为他从未拥有过这项技能，更不可能有机会亲身体会。随着时间推移，他凭自己的经验能够得到的结论只能是：“我没学也没什么。”也许有一天，当他因为没有学习这项技能而遇到一点尴尬的时候，可能会慨叹：“当初不懂事，要是学过就好了……”然而，这对他来说，仅限于慨叹。再次遇到学习机会的时候，他依然会选择放弃，只不过除了“不知道学它有什么用”之外还多了一个理由：“现在学也来不及了。”这种拒绝学习的判断，渐渐融入他的心智，难以更易，最终，当他再次面临同样的机会时，他还会与过去一样，做出同样的选择。</p>
<p>问题的关键在于，做出截然相反决定的理由竟然是一模一样的！人们通常认为，恰当的逻辑训练能够提高一个人做出正确选择决定的几率。可在上述情况下，大多数逻辑都无能为力。这种情况在生活中并不罕见，相反，比比皆是。父母教育孩子的时候被孩子驳得哑口无言就是这类情况——并不是孩子不讲逻辑，也不是孩子的观点正确，只是他就是无法理解父母所要传递的经验或者道理。他们不相信的理由和父母相信的理由很可能是一模一样的！</p>
<h2 id="现实"><a href="#现实" class="headerlink" title="现实"></a>现实</h2><h3 id="速成绝无可能"><a href="#速成绝无可能" class="headerlink" title="速成绝无可能"></a>速成绝无可能</h3><p>期望速成，从微观层面上看，有两个主要原因。</p>
<p>第一个原因是人希望自己的欲望马上得到满足的天性。一个确定的事实是，几乎每个人都有无穷无尽的欲望。虽然每个人都知道，不是所有欲望都能被满足，但人们仍然不会放弃追逐尽可能多的欲望。于是，不劳而获成了每个人心中的诸多愿望之一，甚至可能是其中最大的愿望。如果达不到不劳而获，少劳多获也可以接受，而且最好是“劳”尽量少，“获”尽量多，多多益善。从这个角度更进一步地说，大多数人都抱着类似这样的想法：如果收获的可能性很大，最好马上看到成果；如果收获的可能性很小，最好马上知道结果。</p>
<p>每个人都有这种欲望，差别仅在程度或者表现上。</p>
<p>第二个原因，也是浮躁的根源，就是很多人不懂“有些阶段就是无法跨越”这个道理。因此，他们才那么不现实地希望找到一个方法，靠其迅速达成目标，完结任务，获得解脱。可是，无论做什么事都需要时间，而且可能需要很多时间。 </p>
<p>除了上面这两个微观上的原因外，还有一个宏观上的原因也使人们常常不由自主地奢望速成——哪怕之前已经“醒悟”过。这个宏观上的原因即所谓的“现状使然”。根据达特茅斯学院经济学教授<a href="http://goo.gl/vLrz8">布兰奇弗劳尔</a>的调查结论，通常情况下，一个人一生各个阶段的满意程度和其年龄分布可以连成一个U型曲线。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220205095242.png" alt="img"></p>
<p>从这张图中可以看出，大多数人对其自身的满意程度从15岁左右开始持续下降，这大抵是不再无知无畏造成的。从那时起，一个人慢慢意识到自己在这个世界上其实微不足道，进而开始在所谓的理想和扭曲的现实中拼斗、挣扎，直到45岁左右才渐出苦海，曲线开始上扬。这就是以一个普通人的心智，观察、感受、思索、理解、实践、回顾，直至恍然大悟或者误入歧途的时间——30年。</p>
<p>在这漫长的 30 年里，由自我满意度持续下降所造成的浮躁形成了巨大的心理压力。越是浮躁，就越是对自己的现状不满；越是对自己的现状不满，就越是浮躁。</p>
<p>更大的问题在于，大多数人并不知道几乎所有的人都是这样。相反，现实好像总是提醒我们：有些人过得比我们好多了。这就是统计学的优势。它可以排除感情因素，用冷冰冰的数字展示现实。如果它所展示的现实与我们原本以为的并不相同甚至相反，这一优势就变得更为明显。掌握统计学常识的人，心智力量显然要比那些对此毫无了解的人强大——他们可以理解统计学结论的意义，即便那结论并非来自亲身经历，而他们也因此离现实更近一些。</p>
<p>总的来说，<strong>一方面是自己的无限欲望，一方面是要完成的事情太多，一方面是自我满意度的不断下降——这就是人们总是不由自主地期望速成的根源</strong>。出路肯定存在，但这出路只有一个起点——接受现实。<strong>告诉自己：我有不足，我需要时间，我没办法一蹴而就。</strong></p>
<h3 id="交换才是硬道理"><a href="#交换才是硬道理" class="headerlink" title="交换才是硬道理"></a>交换才是硬道理</h3><p>“我要”的欲望从来不会消减，只会不断增加。大多数人之所以会浮躁，是因为他们一无积累（或者积累太少，几乎无法换取任何东西），二无方法和经验（所以求而不得）。与此同时，“我要”的欲望恰恰因为无法获得而熊熊燃烧。情况更恶劣的时候，那欲望之火甚至可以烧掉他们所有的时间和精力，以至占用原本可以用于努力（或者投机）的时间，陷入死循环，无法挣脱。</p>
<p>积累多的人之所以稳健，是因为对他来说，“我要”的欲望可以用“我有”的东西来满足。即便“我有”的暂时不够，他也能借助已经拥有的足够的努力和勤奋（抑或投机取巧的方法和经验），只需假以时日，定能如愿以偿。一旦得偿所愿，<strong>不仅“我有”的更多，“我要”的也更容易获得，如此形成良性循环。</strong></p>
<p>生活的本质就是这样，你想要什么，它偏不给你什么。摆脱这个死循环的方法只有一个——给我什么我就用好什么，积累到一定程度再去换能换的东西。要不断想办法运用心智的力量去识别那些死循环和恶性循环，然后在好像不可能的情况下跳出去。</p>
<p>要想跳出去倒也简单。拿出一张纸，将其划分为左右两半，然后做两个列表，左边是“我有的”，右边是“我要的”，逐一罗列。完成后要尽量客观地判断：先划掉“我要的”当中那些无法用“我有的”换取的；再仔细判断在剩下的能用“我有的”换取的那些“我要的”之中，哪些是必须的、必要的、重要的、不可或缺的，并在其上做重点标记。偶尔会有一些“我要的”无法用现在“我有的”换来，却又是必须、必要，甚至不可或缺的，这需要我们认真考虑用什么样的手段再积累一些“我有的”，从而有足够资本换取那些“暂且换不到但极其想要的”——或努力勤奋，或投机取巧。投机的方式并非不能用，尽管它的成功概率实际上并没有看起来那么高，而它的失败概率甚至和它看起来的成功概率一样高。</p>
<p>还有一个辅助手段，就是在想到“我要什么”的时候马上提醒自己，接下来要花一些时间去思考“我有什么”。后者会在转瞬间让你“脚踏实地”。</p>
<p>最坏的情况是，拿出纸和笔认真面对自己，结果发现“自己什么都没有”。这也许令人气馁，但其实对任何一个正常人来说，“还有时间”、“还有精力”、“还有正常的智商”就已经足够了。只要努力，只要勤奋，机会总是存在的——我们必须要相信这一点，最好相信到毫不怀疑。</p>
<h3 id="完美永不存在"><a href="#完美永不存在" class="headerlink" title="完美永不存在"></a>完美永不存在</h3><p>越是能力差的人，越有那种非常不现实又极其脆弱的完美主义倾向。他们不现实，是因为他们不懂。因为他们不懂，所以他们不现实；因为他们不现实，所以他们脆弱。他们很容易受伤，因为他们的要求太高，也因此总是做不到。</p>
<p>有时，有些人会故意这样做，尽管他们自己不愿意承认。把自己标榜成完美主义者，是他们抬高自己的手段，是他们不去做一些事情的借口。他们把这个借口说出来的时候真个掷地有声：“做不好的事情我不做！”然而，这可能是装出来的。人就是这样，装得久了，就装得像了；装得太像、太久，不管事实怎样，自己倒是先信了。而这当然会影响之后的决定和行为。</p>
<p>这些人所说的“做不好”，其实是“不能一下子做好”，但问题在于，没有什么事情是一下子就能做好的。所以，他们这个也不做，那个也不做，到最后，已经不是“不做一些事情”了，而是“什么都没做”、“什么都不做”，结果“一事无成”。好笑的是，</p>
<h3 id="未知永远存在"><a href="#未知永远存在" class="headerlink" title="未知永远存在"></a>未知永远存在</h3><p>在进入任何一个新领域时，这种压力都能使新手窒息。而已经在那个领域里“浸泡”过一段时间的人，往往早已忘记了曾经面对的恐惧和压力，懒得（抑或不屑）开导新手、帮助新手。其实，更多的时候，一些老手实际上并不是“懒得”或者“不屑”，而是“没想到竟然连这个也需要解释”。</p>
<p>然而，为了进步，<strong>我们必须忍受一定的未知。</strong></p>
<p>首先，我们要承认自己不可能全知全晓。有些时候，有些问题没有答案，就好像“先有鸡还是先有蛋”一样。而有些时候，即便有了答案，其原因也不见得是我们能够搞懂的。</p>
<p>其次，我们要了解未知分为两种：一种是永远不能解决的，另一种是在可预见的未来也许能够解决的。对一个人来说，超过100年就可以算“永远”了，所以，第一种未知对个人来说意义不大；第二种未知却是我们必须面对的，学习的难度也在于此。“第一章的内容需要在掌握后面某一章的知识之后才能深入了解”，这几乎是所有高难知识体系的普遍特征。也就是说，在第一章，我们会有无数疑问，可这些疑问以当时的知识是无法全部解决的，需要我们继续学习，用接下来获得的知识解释今天的疑问。这就是那些爱钻牛角尖的人最终常常吃亏的重要原因——他们总是想“马上解决当时不可能解决的问题”。</p>
<p>再强调一次，我们必须接受这个现实——未知永远存在。而后，我们只能不断地尝试着去适应“在未知中不断前行”。</p>
<p>如果不能接受这个现实，就无法忍受未知的存在，也会平添无数的焦虑。焦虑是导致时间浪费、效率低下的根源之一。当人处于焦虑的时候，甚至可能出现一切理智都被清空的情况。另外，焦虑的情绪会让人觉得“必须要做点什么”，但是，在缺乏理智的状态下做出的任何决定和行为都可能带来灾难性的后果。一个相对有效的策略是：当有问题解决不了时，可以先把它记下来，然后继续前行。注意，一定要把它们记下来。</p>
<p>很多人没有记录的习惯，以至出现曾经因为思考（疑问就是思考的起点）后“忘了”而失去获得答案机会的情况。继续前行，并不意味着忽略这些问题，因为它们已被记下来了。而又因为它们被记了下来，所以可以在以后拿出来重新审视，不一定当什么时候、在什么地方、因为什么由头，它们之中的一部分就突然有了清楚的解决方案。当然，可能性最大的原因只有一个——你一直在前行，你一直在积累，你一直在成长。所以，到有了答案的那一刻，你不再是当初无能为力的你，你已经重生。</p>
<h3 id="现状无法马上摆脱"><a href="#现状无法马上摆脱" class="headerlink" title="现状无法马上摆脱"></a>现状无法马上摆脱</h3><p>与外界的无谓比较，让每个人凭空多出了一个根本不属于自己的目标，动辄被自己的理想绑架。很多人（应该是绝大多数人）的工作态度本质上是“骑驴找马”。基于种种原因（主要是概率问题），人们往往对自己正在从事的职业并不满意。很多人都心怀梦想，有一个“无论如何早晚都要从事的梦想职业”，而不幸的是，很多人正因如此最终沦为平庸之辈</p>
<p>尽管天分确实很重要，但一个人的能力主要靠积累获得。从一个人开始从事一个职业的那一瞬间起，只要足够认真、努力，他的能力就会不停地积累。如果这个人实际上向往的是另一个职业，那么他的所谓“梦想”几乎必然使他在当前这份职业上心不在焉、无甚积累。其实，世界上80%以上的职业并不过分依赖天分，更可能甚至几乎只依赖积累。天长日久，这个人在当前的职业中将逐渐落后于那些认真做事的人。但此时他不会因为自己的落后而奋起直追，反过来，更可能的是把“反正我的梦想不是这个”当作借口。</p>
<p>无论是谁，进入自己梦想职业的成本都很高昂——极少数运气好的人除外——有些相对依赖天分和运气的行业更是如此 。当初未能从事一个职业就已经能说明问题了——除了运气不好，更可能的是因为积累不够。几年过去，这个人在他的所谓“梦想职业”中的经验积累依然是零，仍旧只是空有梦想。还有一个他更可能宁愿视而不见的事实是，那些在他所谓“梦想职业”中拼搏努力的人在这段时间里已经积累了无数经验，磨炼出了他在“圈外”无法想象的各种能力。就算有一天，这个人有足够运气，进入了那个他梦寐以求的领域，结果可能还是发现自己一无所有、毫无竞争力，最后不过是一切清零、从头再来。</p>
<p>心怀“梦想”的时间越长，它的沉没成本就越高。很多人都在无意之间被自己的“梦想”所绑架，所以，很多时候，对很多人来说，所谓“梦想”也许只是陷阱。许多年来，我曾见过身边不少的人一点一点被他们珍爱的“梦想”毁掉。</p>
<p>越是不满现状，摆脱现状的欲望就越强烈，而这种欲望会让一个人最终迷失方向，因为无论是谁，从本质上看都无法摆脱现状——每一时刻的现状都是过去某一或者某些时刻的结果，而每一时刻的现状都是未来某一或者某些时刻的原因。没有人能够逃脱现实的束缚。</p>
<p>从某种意义上理解，“逆境造就成功、磨难令人成熟”之类的话纯属胡说八道。显然，在顺境中更容易成功，而且很多磨难根本没有必要——这更可能是失败者对他们自己一生都未曾有机会体验的成功以及成功者“意淫”式的猜想而已。失败者永远没有机会了解成功的真相，因为人最容易受自身经验的限制，而不曾有哪怕一点点成功经验的人更无从摆脱自身的局限。</p>
<p>对现状不满、急于摆脱现状，是人们常常不知不觉落入的陷阱（尽管偶尔这也是少数人真正的动力）。接受现状才是最优策略——有什么做什么，有什么用什么；做什么都做好，用什么都用好。不要常常觉得苦（这会让人忍不住顾影自怜，浪费精力与时间），而要想办法在任何情况下找到情趣——快乐是一种本事。这些年我遇到的几乎所有优秀的年轻人都有这样的特征：他们很少对现状不满（可能是他们的优秀使他们难以觉得不满吧），他们热爱自己的生活，他们相对更不在意外界的影响，他们更专注于做事而心无旁骛，他们身处良性循环之中，当然，他们也因此每时每刻都在进步。</p>
<h3 id="与时间做朋友"><a href="#与时间做朋友" class="headerlink" title="与时间做朋友"></a>与时间做朋友</h3><p>与时间做朋友的方法很简单：用正确的方法做正确的事情。</p>
<p>正确的方法究竟是什么稍后再说，这里先说说什么是正确的事情。最可怕的不是效率不高，而是干脆做错了事。如果做的事情是错误的，效率越高，结果越糟。如果做的事情是正确的，效率低一点也没关系，因为做一点是一点，多收获一点，多进步一点，动力就会更强一点，进而更容易持续地做下去。怎样判断所做的事情是否正确？核心的判断只有一个：看它是否现实。</p>
<p>几乎一切愚蠢的行为都来自否定现实、逃避现实。只有接受现实，才可能脚踏实地，避免心浮气躁、好高骛远。如果我们把成功朴素地定义为“用正确的方法做正确的事情，并在最后期限之前漂亮地完成”的话，那么，大多数所谓的“时间管理技巧”实际上发挥不了多大的作用，只不过是花拳绣腿。真正有用的往往是简单而又朴素的道理，例如“现实只能接受”。 </p>
<p>大量的实践结果与理论分析表明，大多数随机变量均服从或近似服从正态分布，如测量的误差、学生的成绩、人类的身高和体重、产品的质量数据、投资的收益率等。</p>
<p>这种资源分布上自然的“不均匀”，看上去简单易懂，但古今中外都有很多人拒绝理解和接受它。他们甚至拒绝使用“不均匀”这个词，而是用“不公平”取而代之。历史上有无数次战争、无数次掠夺，但从本质上看，不过是因为把“均匀”理解成“公平”造成的。把“不均匀”理解成“不公平”，就可以理直气壮地打着“公平正义”的旗号为所欲为。</p>
<p>平静并理性地接受“资源稀缺”这个现实，其困难程度超乎想象，</p>
<p>尽管现实总是如此难于接受，坚强的你却应该坦然。以上提到的种种现实，包括“速成绝无可能”、“只有付出才有收获”、“完美永不存在”、“未知永远存在”、“现状无法马上摆脱”，都既清楚又简单，你必须要接受——不仅要接受，还要牢记；不仅要牢记，还要坚信，不容半点动摇。最好时常把自己的一些念头记下来，然后与这几条现实对照，看看它们是否与这些现实相符。之后，你会和所有人一样，发现自己常常在不知不觉之间被一些实际上完全不现实的念头所左右。这是正常的。但是，通过不时地记录、思考与反省，你会越来越善于甄别那些不现实的念头，进而摆脱他们的影响。这就是差别。很多人一生都不知道自己究竟有多么不现实。之前提到的“既勤奋又懒惰”的人群，基本上都是把这些现实当作老生常谈的道理——视而不见、听而不闻、从不记录、从不反省，才常常做出荒唐的决定，最终堕落到那分田地。</p>
<p>时间是现实的人的朋友，是不现实的人的敌人。时间不是故意要这样做，只不过事实如此。</p>
<h2 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h2><h3 id="估算时间"><a href="#估算时间" class="headerlink" title="估算时间"></a>估算时间</h3><p>错误估算任务所需时间，是最常见，也是最致命的错误。在时间领域有一个貌似悖论的<code>侯世达法则</code> 值得牢记：</p>
<blockquote>
<p>完成一个任务实际花费的时间总会超过计划花费的时间，就算制定计划的时候考虑到本法则，也不能避免这种情况的发生。</p>
</blockquote>
<p>一旦开始做事，就会发现<code>意外</code>继踵而至。原本做的准备根本不能解决问题，因为“经过准备的就不再是问题”，而真正遇到的问题个个都是之前不曾想象抑或无法想象的，解决一个问题的同时往往会产生新的问题……因此，所谓“渐入佳境”最终只能是少数人的感受，大多数人在此之前早已溃败。</p>
<p>为什么人们总是错误估计完成任务所需要的时间</p>
<ul>
<li>执行任务前，没有分辨任务的属性：它是熟悉的还是陌生的<ul>
<li>熟悉的：由于已经做过一次（或多次），所以，你清楚地了解该任务的每一个环节，知道应该如何拆解任务、应该怎样分配拆解出来的子任务、每一个子任务有多少个步骤、每一个步骤需要耗费多长时间、哪些步骤需要格外小心……在这种情况下，正确估算完成任务需要的时间是很容易的。</li>
<li>陌生的：在执行过程中必然会遭遇各种所谓的“意外”。其实它们根本不是意外，只不过是因为你对任务不熟悉，它们才成为了“意外”。实际上，这些“意外”是任何完成该任务的人都必然会经历的事情。 只有完整地执行一次任务，该任务的属性由“陌生”变为“熟悉”之后，才有可能顺利解决这些“意外”。</li>
</ul>
</li>
</ul>
<p>对学习来说，任务“陌生”的可能性更大，因为学习本身是一个探索未知的过程。完成学习任务常常需要花费比我们想象中多得多的时间。对工作来说，任务“熟悉”的可能性更大。因为工作本身是一个应用已知的过程。当然，不同的工作，情况还是有所不同。例如，有些工作需要更多创新，有些工作可能前所未有……所以，在现实生活中，我们需要完成的任务的真实属性往往是“一部分熟悉，一部分陌生”。这就从根本上解释了为什么前文描述的那个貌似悖论的法则总是应验——我们必须处理未知，而从陌生到熟悉，就需要花费时间去学习，这个过程无法逾越。</p>
<p>要想提高估算时间的能力，就要从现在开始养成习惯：做任何事情之前先判断其熟悉程度（或陌生程度），再据此判断估算完成任务所需要的时间。通常情况下，“反正比一般人想得长多了”倒是一个屡试不爽的假设。</p>
<h3 id="及时行动"><a href="#及时行动" class="headerlink" title="及时行动"></a>及时行动</h3><p>比“越早开始越好”更切实的答案是“现在就开始”。所谓做事拖延，不是拖延着做事，而是拖延着不开始做事。明知自己拖延的人很痛苦，因为他们不是不知道该做什么，而是不知道为什么“无法进入状态”</p>
<p>一个常见的原因是前文所述的“错误估算任务所需时间”， 总以为可以在最后期限之前完成，心里想着“时间还多的是 嘛！”可这并不是本质原因。本质原因在于恐惧——无论是来自内部的，还是来自外部的。</p>
<p>来自内部的恐惧在于：只要开始做事，一个人就要面临做错、做不好的风险。这原本是任何人都逃不掉的事情，但最终患上“拖延症”的人犯了一个简单的认知性错误，即认为那些能够做对、做好的人都是直接做对、做好的。从表面上看也好像确是如此。那些能够做对、做好的人，总是显得从容不迫、轻车熟路。面对这样的人，那些犯了错、做不好的人根本没办法不自卑、不怀疑自己……</p>
<p>所以，很多人做事拖延的原因不过是“不求有功，但求无过”的想法。没有哪一个拖延的人愿意承认自己是这样想的，但当他们扪心自问的时候，他们都知道这描述一针见血。</p>
<p>只要做事，就一定会出问题。这是现实。无论何人，无论何事。如果在做事的过程中没有出现任何问题，那肯定不是在做事，而是在做梦。</p>
<p>认清并接受这个现实很重要。只有这样，才能心平气和地去做事。说一个人不怕困难，那是假话。谁不想一帆风顺、马到成功？可现实就是如此。做事情的时候，肯定会遇到困难，事情越有价值，困难就越具规模。遇到困难的时候，心平气和地面对就好，因为这只不过是生活常态。有时我们花费了很多时间和精力依然没能解决问题，却眼见别人轻松过关，这确实令人气馁。不过，这也是生活常态——在任何一个特定领域，总有一些人比另一些人表现更好、费力更少。然而，在大多数情况下，有4个字颇具道理并且值得相信——勤能补拙。不过，真正相信这4个字的前提是“接受现实”，否则，这4个字发挥不了任何实际作用。</p>
<p>来自外部的恐惧在于过分在意外界的评价。人是一种很有趣的动物，在自己做对、做好之前，通常已经了解做对、做好是什么样子。于是，无论能否做对、做好，人都觉得自己有能力判断别人是否做对、做好。所以，尽管自己不怎么样，却可以振振有词、理直气壮地评价别人做得对不对、好不好。所以，一个人一旦开始认真做事，被嘲弄、被耻笑的几率将远远高于被夸奖、被鼓励的几率——这几乎是肯定的。也正是由于这个原因，使很多人怀有前文提到的“不求有功，但求无过”的微妙心态。 事实上，那些真正能够做对、做好的人，绝不会随意嘲弄、打击别人，因为他们是做对过、做好过的人，他们一路走过来，心里非常清楚做对、做好有多么不易，所以，他们会不吝一切机会去鼓励那些尝试做事情的人。这甚至可以当作一种测试方法：如果一个人经常嘲弄他人，那只能说明他自己不怎么样；否则，他会像那些极少数已经做对、做好的人一样，给予别人真诚的鼓励而非嘲弄。尽管那些能真正做对、做好的人有时也会给出负面评价，但这些评价通常是“建设性的负面评价”，并不是为了获得优越感而发出的嘲弄。</p>
<p>所以，我们没有必要在意来自他人的、非建设性的负面 评价。没有谁从一开始就能做对、做好。所有做对、做好的 人都是一路磕磕绊绊走过来的，这就是生活常态。而动辄给 出非建设性负面评价的人，往往不是正经做事的人，他们和 那些正经做事的人身处不一样的世界，这也是生活常态。</p>
<p>还有一个微妙的现象需要注意。尽管在一般的环境中，时间的运动是匀速的，但实际上，就人的主观感受来说，时间的运动肯定是加速前进的。对“为什么随着年龄的增长每个人都会觉得时间过得越来越快”这个问题，心理学家有一个简单明了的解释：</p>
<p>对一个5岁的孩子来讲，未来的1年相当于他已经度过的人生的¹⁄₅，即20%；而对一个50岁的成年人来讲，未来的1年只相当于他已经度过的人生的¹⁄₅₀，即2%。所以，随着年龄的增加，人们会觉得时间运动得越来越快。</p>
<p>更重要的是，人在小时候没什么事情可做，就愈发感觉时间过得慢；随着年龄增加，要做的事情越来越多，当然就愈发感觉时间过得飞快，稍纵即逝。由此看来，小孩子的感觉自然是“那时候天总是很蓝，日子总过得太慢”，而“人生犹如白驹过隙，瞬间而已”大都是老年人的慨叹，也是他们的切身感受。</p>
<p>如果能将这种认识纳入自己的心智，你就不会再对“最后期限”有那么荒谬的幻觉了。只要接受了必须完成的任务，你就会有真切的紧迫感，因为你知道，时间必然越走越快。而且，你现在就已经明白：“最后期限”不是固定在将来的某一点，而是朝着你加速扑来。有的时候，也许还没开始就发现自己已经晚了。在这样的情况下，唯一的策略依然是“现在就开始”。否则更待何时？在起步晚了的情况下，问题不是“到时候能不能做好”，而是“<strong>到时候能做多好就做多好</strong>，总好过什么都不做”。明白了这个道理，不管遇到什么任务，永远不要再问“什么时候开始才好”，因为答案只有一个：“现在”！</p>
<h3 id="直面困难"><a href="#直面困难" class="headerlink" title="直面困难"></a>直面困难</h3><p>就算没有低估完成任务所需要的时间，就算已经按时开始执行任务，很多人还是没有按时完成任务。为什么有的人好像一直在忙，却总是拿不出成绩、做不出成效？</p>
<p>无疑，他们的效率低下。而效率低下的根本原因是什么？答案是：回避困难。</p>
<p>稍微思考一下就能明白，合理的时间安排应该是这样的：迅速做完简单的部分，把节约出来的时间放在困难部分的处理上。然而，很多人会下意识地回避困难，于是乎，他们的时间安排是这样的：用几乎全部时间处理简单的部分，至于困难的部分，干脆“掩耳盗铃”，视而不见，暗地里希望困难自动消失……</p>
<p>这样的行为与做事的动机有关。人做事的动机往往来自两个截然相反的原因：奖励与惩罚。人都喜欢被奖励，讨厌被惩罚。从最浅的层面上看，尽力做能够获得奖励的事情显然是划算的，回避做可能招致惩罚的事情显然是合理的。然而，从另一个层面上看，接受惩罚往往是积累经验的起点，甚至是唯一的起点。这就是俗话所说的“吃一堑，长一智”。很多时候，为了能够“长一智”，必须先“吃一堑”，西方称之为“挫折教育”。</p>
<p>很多事情并不是一过性的，总会阶段性地有奖有罚。受到奖励之后，原本有两个选项：“再次来过”和“见好就收”。有意思的是，绝大多数人会自动忽视第二个选项 。受到惩罚之后，同样有两个选项：“从此碰都不碰那件事情”和“挣扎着找一个出路”。同样有意思的是，绝大多数人还是会自动忽视第二个选项。</p>
<p>所以，<strong>很多人实际上根本不知道自己所谓的“喜欢做某件事情”很可能只是因为那件事情相对简单、容易获得奖励而已</strong>。拖延的人并非不做事，他们做事，甚至做很多事。拖延的人也并非不努力，他们会花很长时间去做事，但做的只是很多简单的事。他们每次回避困难的时候，都不是故意的，并且往往已经给自己找了恰当的借口。这借口太强大、太有力，以至他们真诚地相信：“我喜欢做有创意的事情，而现在手上的这些事情太枯燥，我确实提不起兴趣……”</p>
<p>如果不能控制这种逃避的倾向，再多、再好的任务管理技巧都是无效的，因为任务中相当重要的一部分（通常因为重要而困难，也因为困难而重要）永远无法完成。所谓效率，是在任务完成之后才能够衡量的。这样看来，对逃避困难的人来讲，因为没有完整地完成任务，所以无论他们花了多长时间，也都没有效率（相当于分子为零）。</p>
<p>现实中，这种现象无处不在。比如学习上，准备托福考试时只做阅读和听力但不练习口语和写作；比如工作上，做项目计划时只讨论做什么却从不提及怎么做；比如生活上，总是把“我爱你”挂在嘴边却从来不花时间想想恋人真正需要的是什么……这些问题都源自同一个习惯：专做简单的，回避困难的。</p>
<p>所有真正踏实做事的人都知道，任何任务的绝大部分都是枯燥而又无趣的，所谓有创意的部分，可能连1%都不到。 </p>
<h3 id="关注步骤"><a href="#关注步骤" class="headerlink" title="关注步骤"></a>关注步骤</h3><p>任何任务都起码具备3个属性：何事（What）、何因（Why）、何法（How）。清楚了解一个任务的这些属性，对最终能否完成该任务起着决定性的作用，所以应该多花一点时间去“三思”。</p>
<p>在大多数情况下，这3个方面中最为关键的实际上不是内容，也不是原因，而是方法。因为任务的内容与原因常常不言自明，而方法却并非唾手可得。</p>
<p>思考方法需要从领悟内容入手，不停地细分、拆解任务，而且越具体越好，直至每个小任务都可以由一个人独立完成。</p>
<p>对任务的每一次“具体化”与“细分拆解”都要反复询问“原因”。</p>
<p>做任何事情，学会思考方式最为重要。</p>
<p>要学着像一个项目管理者那样思考——他们更多地关注“方法”，他们会花费比别人更多（多出许多倍）的时间去落实每一个步骤，在确认无误之后，他们才会有效地分配任务，团队才能够切实可靠地完成任务。 只有学会像项目管理者一样思考，他才能给自己分配具体的任务、制定切实可行的计划，最终高效地完成任务。</p>
<p>在做任何事情之前，通过关注“方法”去反复拆分任务，最终确认每个子任务都是可完成的，这是一个人不可或缺的功课。这样的习惯，会使一个人变得现实、踏实。这是一种习惯，也是一种后天习得的技能。这种技能无比重要，却常常被忽视，因为掌握这种技能的人总是默默地应用它，而忽视这种技能的人从未看到过它的具体实施过程和巨大好处。</p>
<h3 id="并行串行"><a href="#并行串行" class="headerlink" title="并行串行"></a>并行串行</h3><p>在任务管理的过程中，可以运用类似的方式去思考任务与任务之间的关系：这两个任务之间究竟应该是串行关系，还是并行关系？</p>
<blockquote>
<blockquote>
<p>无论学到了什么东西，都可以接着问自己：“那……这个道理还可以运用在什么地方？”反复问自己这种简单问题，能够锻炼自己融会贯通、举一反三的能力。 为什么呢？上过中学的人都应该明白“省功不省力、省力不省功”的物理原理啊！其实，这些人缺乏的就是这种思考能力或者说思考习惯。</p>
</blockquote>
</blockquote>
<p>这个问题非常重要，因为在一般情况下，“提高效率”指的就是“本只能串行完成的两个任务现在可以并行完成”。</p>
<p>最直接的办法是尽量将两个任务并行。比如，在跑步的时候听英语，在写文章的时候听音乐，在等班车的时候看书等。</p>
<p>养成一个习惯——把要做的事情用纸笔写出来，把任务落到纸面上，就可以比较容易地分辨出哪些任务是简单而又机械的，哪些任务是相对复杂而又灵活的（对我个人来讲，需要思考的就是“非机械”的），然后，尝试把一个非机械的任务和一个机械的任务搭配起来完成。</p>
<p>并行两个任务的一个重要前提是执行者足够了解这两个任务，且对自己有足够清楚的认识，即，对执行者来说，这两个任务是“主动并行”的。被动发生的并行任务往往只能使效率变得更为低下。（我在生活中生生剔除的一个被动并行任务就是“接电话”。从好多年前开始，我就把自己的手机设定为“静音”状态，从不主动接电话——而是每隔一两个小时查看一下电话，有必要的就打回去。当我有条件给自己安排一间不受人打搅的“工作室”后，终于再一次大幅消减了“被动并行”造成的时间和精力的浪费。）</p>
<p>当一个任务比较庞大，需要划分为多个步骤或者多个子任务的时候，对这些子任务之间的关系需要仔细甄别。甄别后，可能会因此产生若干个行动方案，而针对这些方案可能还需要反复衡量才能找到最佳方案。</p>
<p>优化的前提是“大任务被划分成足够多又不太多的小任务”。有了这样的前提，你才有能力分辨哪些任务可以并行——所谓的“优化”，其实是很简单的。</p>
<p>让自己拥有“多任务操作系统”的另一个方法就是切分自己的时间。（多任务操作系统把一个长时间段划分成很多短小的时间片，每个时间片只让处理器执行一个进程。循环反复的过程中，有些任务完成了，另一些任务处于尚未完成的状态，如果有新的任务进来，只需要加入循环队列即可。看上去好像是操作系统同时运行着很多进程，而实际上，它靠的是类似视觉暂留现象的机制）</p>
<p>把自己的时间切分成“时间片”是一种很难习得的能力，不过这种能力在大多数时候用不上，只有在任务太多、时间太紧的情况下，我才使用这种能力。应用这种能力时，要先坐下来制定一个工作列表，把任务罗列出来，然后把自己的时间“切片”。我通常把“20分钟工作+5分钟休息”作为一个时间片，然后就开始像处理器一样处理任务。这样做可以<strong>保持相对长时间的高效率工作</strong>。</p>
<p>尽管说起来很简单，但其实需要反复应用才能把这种简单的思考模式变成习惯。一旦养成精细拆分任务的习惯，效率就会在不知不觉间提高了。</p>
<h3 id="感知时间"><a href="#感知时间" class="headerlink" title="感知时间"></a>感知时间</h3><p>李敖每天的“事件日志”：除了自己经历的事件之外，一概不记，而且尽量不记感想，不记感受，只记录事件本身。 </p>
<p> 做这件事其实每天只需要花10分钟左右。后来为了进一步节省时间，我干脆在这个本子上穿了根绳，挂在家里洗手间马桶面对的那面墙上，每天晚上睡觉前坐在马桶上，顺手就写完了。这样简单的日志是有巨大好处的——每年下来，我都知道自己去年都做了些什么，仅仅这一点，就非常宝贵了。到了30岁之后，我才觉得自己做的真正有意义的事情慢慢多了起来。 </p>
<p>柳比歇夫的日志，是“事件―时间日志”（Event-time Log）。他的方法要比李敖的方法更高级。李敖的事件日志，往往只能记录事件的名称，是一种基于结果的记录；而柳比歇夫的“事件―时间日志”是一种基于过程的记录。它们的细微差别在于，基于过程的记录要比基于结果的记录更为详尽。</p>
<p>权摘抄《奇特的一生》中柳比歇夫的日志为例。</p>
<blockquote>
<p>乌里扬诺夫斯克。一九六四年四月七日。分类昆虫学（画两张无名袋蛾的图）——三小时十五分。鉴定袋蛾——二十分（1.0）。</p>
<p>附加工作：给斯拉瓦写信——二小时四十五分（0.5）。</p>
<p>社会工作：植物保护小组开会——二小时二十五分。休息：给伊戈尔写信——十分；《乌里扬诺夫斯克真理报》——十分；列夫·托尔斯泰的《塞瓦斯托波尔纪事》——一小时二十五分。</p>
<hr>
<p>基本工作合计——六小时二十分。</p>
</blockquote>
<p>基于过程的记录，不仅更详尽，还有另外一个巨大的好处——结果不好的时候更容易找到缘由。想明白“基于过程的”与“基于结果的”两种记录之间的区别之后，我开始尝试着在自己记录的每个事件后面加上时间：它会使你对时间的感觉越来越精确。</p>
<p> 通过实践，我发觉这种基于过程的“事件―时间日志”记录可以调整我对时间的感觉，在估算任何任务的工作量的时候，都更容易确定“真正现实可行的目标”。此外，相对准确的估算又使得目标基本上都可以达成，由此可以算是“战胜了焦虑”。</p>
<p>网易的“Mr.Time”——一个用来记录时间开销的应用。Mr.Time用起来很简单：做任何事情之前，拿出手机，打开应用，摇一下，事情做完之后，再摇一下。如此这般确定了时间起点和终点之后，再抽空将具体事务分类、编辑、细化。Mr.Time解决了两个问题：一方面简化记录时间开销的过程，另一方面自动完成记录后的整理、分析、统计工作。有了这个应用，记录时间开销应该不算麻烦了。</p>
<p>既然管理时间是不可能的，那么解决方法就只能是：想尽一切办法真正了解自己、真正了解时间、精确感知时间，而后再想尽一切办法使自己以及自己的行为与时间“合拍”。按我的话说就是——“与时间做朋友”。</p>
<h3 id="制定预算"><a href="#制定预算" class="headerlink" title="制定预算"></a>制定预算</h3><p>除了每天记录时间开销之外，还要养成一个习惯：每天制作时间预算</p>
<p>在开始一天的活动之前，花费15至30分钟仔细制订当天的时间预算绝对是特别值得的，恰如另一段“陈词滥调”——磨刀不误砍柴工。</p>
<p>最直接的方法就是制作一个列表，把今天要做的事情列出来。为了表述方便，后文把这些列表中的事情称为“任务”。</p>
<p>当然，在罗列这些任务的时候，你的大脑就要自动开始估算完成每项任务究竟要花费多少时间了。很快，你就会遇到第一个问题：任务太多，无法全部完成。于是，你只好进行选择。</p>
<p>事实上，生活就是选择。</p>
<p>解决这个问题的方法倒也简单，就是给列表中的每项任务标上权重，例如可以用1～5分进行标注。但是请注意，不要像某些书籍建议的那样使用1～10进行标注，因为大多数情况下，人们很难那样精确地分辨事情的重要程度。实际上，我认为对大多数人来讲，用“1、2、3”已经足够，因为这种设计基本上可以代表：</p>
<blockquote>
<p>▷ 不重要</p>
<p>▷ 一般</p>
<p>▷ 重要</p>
</blockquote>
<p>当然，根据个人喜好，你也可以用“1、0、−1”进行标注。<strong>同样的事情可以通过很多种方法完成，选择自己喜欢的方法往往就是最优策略</strong></p>
<p>一旦开始尝试去给要做的事情标注权重，你会发现，这件事并没有那么容易，即便只用最简单的方法——只用“重要”和“不重要”进行标注，因为我们必须分辨“真的重要”和“显得重要”，以及“真的不重要”和“显得不重要”，可对照下图来看。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220205152814.png" alt="img" style="zoom:50%;" /></p>
<p>判断一项任务是否“真的重要”其实只需要一个标准：这项任务的完成是否确实对目标达成有益。可是，作为一个正常的、健全的、拥有七情六欲的普通人来讲，不挣扎一下，就很难完全专注于这个最关键、最根本的决策标准。</p>
<p>每个人都喜欢做有趣的事情，做的时候往往并不关心这件事到底有没有用。可是，有趣的事不见得有用啊！</p>
<p>如果我们能甩甩头，强迫自己理智一些，就会知道：无用的事情，哪怕非常有趣都不应该去做；而有用的事情，哪怕非常无趣，都应该去做。 </p>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220205153005.png" alt="img"></p>
<p>审视一下自己的生活，你就可能痛苦地发现自己经常仅仅因为非常有趣就去做的那些事其实没什么用。</p>
<p>目标不用向任何人学习，每个人都或多或少、或清楚明了或含混模糊地有自己的目标——不管是什么所谓的“理想”或者“痴心妄想”。现在就开始把自己的那些哪怕不切实际的目标作为标准来判断吧——判断每项任务的真实属性，然后选择“真的重要的”或者“显得不重要的”。</p>
<p>相信我，养成任何一个哪怕很小的习惯都需要挣扎。然而，貌似痛苦的挣扎过程，在将来的某个时刻终将变得其乐无穷。</p>
<h3 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h3><p>很多时候，我们面临的抉择就是“计划还是率性，是个问题”。在大多数情况下，计划总是必要的。在与计划相关的格言中，我最喜欢的是：“我们不是计划着失败，而是失败地计划</p>
<h4 id="计划成功的前提：目标现实可行"><a href="#计划成功的前提：目标现实可行" class="headerlink" title="计划成功的前提：目标现实可行"></a>计划成功的前提：目标现实可行</h4><p>对像我这样的普通人来说，证明我的目标现实可行的方法比较简单：</p>
<ol>
<li>已经有人做到了。</li>
<li>我与那个人没有太大的差距。</li>
</ol>
<p>“已经有人做到了”，并不代表我也能做到。他用多长时间做到的？他通过什么方式做到的？我和他的区别究竟在什么地方？哪些是我确实无法超越的？我的相对优势在哪里？我有没有可能通过一些方式弥补我的相对缺陷？也许还要问更多的问题，才能够确定我们的目标确实是现实并且可行的。</p>
<p>事情往往并不像想象中那么简单。我们更常面临的尴尬是：<strong>如果不开始行动，根本就无从判断目标是不是确实可行</strong>，或者反过来，目标是不是确实不可行。于是，往往只有开始行动之后，才能做出正确的判断。在行动过程中，<strong>如果发现既定的目标确实是不现实、不可行的，那么“半途而废”不仅不意味着失败，反而意味着决策者的无比理智。</strong></p>
<h4 id="长期计划是需要通过实践才能习得的能力"><a href="#长期计划是需要通过实践才能习得的能力" class="headerlink" title="长期计划是需要通过实践才能习得的能力"></a>长期计划是需要通过实践才能习得的能力</h4><p>有人说“计划总是没有变化快”。这话听上去挺现实，却没说到点子上。计划总是被变化打乱的深层次的原因在于：计划过于长远。事实上，无论变化多快，计划总应该是有的，只是在制定计划的时候，应该考虑到变化，应该以自身的情况分析自己究竟适合制定多久的计划。</p>
<p>通过实践发现：如果一个计划的期限只有一个星期，我是很容易坚持下来，并且往往可以出色完成的。这个发现令我非常开心，因为我发现自己还是可以做一些事情的。而随着时间的推移，我发现自己竟然可以慢慢把计划期限延长，两个星期、一个月，后来甚至可以制定一个季度的计划！</p>
<p>在目标现实可行、方向确定的情况下，辅以计划，才能成功。一般来讲，期限越短、内容越清晰，目标就越容易实现。长期目标、人生理想固然要有，但理想这东西往往太遥远，以至我们总是看不清楚。不过，看不清楚也没关系，“千里之行始于足下”，我们实际要做的事情只是一步一步地走，把每一步都走好，走得足够踏实。至于“千里”之外的终点，既然连看都看不清，就不用花时间去想了，因为想了也没用。</p>
<h3 id="有些时候没必要做计划"><a href="#有些时候没必要做计划" class="headerlink" title="有些时候没必要做计划"></a>有些时候没必要做计划</h3><p><strong>计划固然重要，行动更为重要。</strong></p>
<p>计划无论简单还是复杂，缺乏切实的行动就注定会失败或者失效。我的经验是：有些时候故意不做计划反倒是有益的。</p>
<p>综上所述，没必要做计划的原因主要有两个，除了前面提到过的“任务其实非常简单”之外，另一个原因是“初始状态下，我们往往并没有能力去制定合理有效的计划”。做任何事情，都可能经历相同的过程：逐步熟悉，小心摸索，失败、失败、再失败，认真反思，卷土重来，直至成功。而最初，在我们对任务连基本的认知都没有的时候，制定出来的计划十有八九只不过是空谈。</p>
<blockquote>
<p>基于经验： 所有的大额消费活动，乃至其他一切涉及金钱的活动，诸如投资之类，“马上行动”的建议肯定不适用。相反，这种情况下，一定要拖延，拖得越久越好 </p>
</blockquote>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>制作一个列表，往往会使自己做事井井有条，并保证自己不会白白浪费时间。 </p>
<h4 id="最方便的列表工具是纸和笔"><a href="#最方便的列表工具是纸和笔" class="headerlink" title="最方便的列表工具是纸和笔"></a>最方便的列表工具是纸和笔</h4><p>我建议，尽量不要使用安装在台式或便携式计算机上的列表管理软件——尽管那些程序都设计得非常好，但它们却远不如纸和笔来得方便、有效。台式计算机不大可能随身携带，便携式计算机倒是可以随身携带，但远比纸和笔笨重，而且从待机状态恢复到工作状态往往需要等待</p>
<p>纸和笔很难被完全替代的另一个重要原因是：除了它们之外，我们很难再找到可以用来随手写写画画的工具了。很多时候，画比写重要，哪怕可能仅仅是画一个圈或者几个箭头而已。</p>
<h4 id="列表没必要工整"><a href="#列表没必要工整" class="headerlink" title="列表没必要工整"></a>列表没必要工整</h4><p>列表的读者往往只有我们自己，所以列表只要自己能看懂就够了。用最简便的方式制作列表才最合理：大量的缩写、箭头、线条以及各种各样的符号和圈圈框框……</p>
<p>曾经突然发现自己着迷于把各种列表做得工工整整，但这对实现列表的价值而言毫无意义，纯粹是在浪费时间。想明白这一点后，我就开始有意识地控制自己，<strong>让自己不要去做那些没有实际意义的事情</strong></p>
<h4 id="列表一定要随手可及"><a href="#列表一定要随手可及" class="headerlink" title="列表一定要随手可及"></a>列表一定要随手可及</h4><h4 id="最重要的任务永远只有一个"><a href="#最重要的任务永远只有一个" class="headerlink" title="最重要的任务永远只有一个"></a>最重要的任务永远只有一个</h4><p>我见过很多专家讲解任务的重要和紧急与否之间的关系，以及如何分配任务的优先级。道理是很清楚的：先做既重要又紧急的；不重要又不紧急的当然不用理会；紧急却不重要的，亦可不必理会；可若是重要却不紧急的，反倒得优先处理</p>
<p>然而，我通过观察发现，大多数人面临的真正问题并不是弄不清楚这个道理，而是无从分辨“真的重要”和“显得重要”以及“真的紧急”和“显得紧急”。判断一件事情是否真的重要，标准只有一个：<strong>是否对目标（无论是长期还是短期）的实现有益</strong></p>
<p>然而，判断一项任务是否真的紧急，标准却并不好找，因为人总会觉得每一件事都很紧急。事实上，真正紧急的事少之又少，“十万火急”几乎只出现在故事里。</p>
<p>以，评价任务只需要一个判断标准，那就是：它是否真的重要。再往后的道理一目了然：最重要的任务永远只有一个——那个真正对目标的实现有帮助的任务。</p>
<h4 id="制作专门的下一阶段任务列表"><a href="#制作专门的下一阶段任务列表" class="headerlink" title="制作专门的下一阶段任务列表"></a>制作专门的下一阶段任务列表</h4><p>除非万不得已，否则千万不要在整个任务完成之前中途更改列表中的项目。一旦这么做了，那随之而来的就是发现自己“有必要”不停地更改这个列表中的某个或多个项目，最终甚至会导致整个任务永远无法完成。</p>
<p>所以，如果有了什么新鲜的主意，启用另一个列表，标题是“下一阶段务列表”，把它们记下来就好。然后，马上回到当前的任务列表，专注在现在应该完成的任务上。如果你又有了新鲜的主意，如法炮制即可。这样做的好处在于：一方面，不会影响当前任务的进度；另一方面，在当前任务完成之后，那个“下一阶段任务列表”上已经有相当数量、非常具体的待处理项目了</p>
<h3 id="给每个任务制定一个核对列表"><a href="#给每个任务制定一个核对列表" class="headerlink" title="给每个任务制定一个核对列表"></a>给每个任务制定一个核对列表</h3><p>为了万无一失，我们需要提前制作一个可以勾画的核对列表，逐一核对，避免缺漏。</p>
<p>列表一旦开始运作，就一定要执行到底。</p>
<p>事无成的最根本原因就是放弃。放弃的方法有很多种， 最常见的是“换一个更好的方向”。如果确实是一个更好的 方向倒也罢了，但事实上更好的方向并不存在，因为照此下去， “更好的方向”会不断出现。千万不要觉得认为自己能够不停地找到“更好的方向”的人不多，其实大家都会不停地“找到更好的方向”。</p>
<p>走向成功的过程就好比项目的起点是南极，而终点在北极——无论最初往哪走，只要中途不改变方向，早晚会到达终点。但是，如果中途改变过方向，更极端的——经常改变方向，就怎样都无法到达终点，甚至可能返回起点。所以，开始行动之前要先判断列表所代表的任务是否现实。如果确实觉得自己能够也应该完成这个任务，那就着手去做，而且一定要执行到底。</p>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>无论是学习、工作还是生活，我们面临的任务大都是重复性的。要想加快执行重复性任务的速度，只需在遇到重复性任务时先将其做完一次，然后马上总结、整理，搞清流程，再靠进一步的实践把它变成“闭着眼睛也能做好”的事。这是提高效率、减少失误的根本手段。</p>
<p>为常见任务制定流程是一个必须养成的习惯。一个人在梳理流程的过程中，会不由自主地思考个中细节。有些人做事仔细，其实只不过是因为他们很早就养成了这个简单的习惯而已。而另一些人，总感觉自己够聪明，却在实际工作中频繁出错，也只不过是因为他们尚未养成这个简单的习惯而已。这个简单的习惯，日久天长，会让人与人之间产生巨大差异。</p>
<h3 id="预演"><a href="#预演" class="headerlink" title="预演"></a>预演</h3><p>需要执行的任务越重要，这种预演就越关键。只有经过大量的预演或者练习，我们才能够在实际执行任务的过程中有出色的表现。这也是良性循环和恶性循环之间的选择和差异。准备充分的人，常常会有出色的表现，最终能够顺利地完成任务，而这样的经验会使他更加坚信提前准备的重要。准备不充分的人，执行任务时必然表现欠佳，但不管表现多差，他也提前做了一点准备（或者自认为做了一点准备），但这样的经验却会让他觉得准备是没什么用的，至少是没什么大用的，于是下一次他还会采取同样的行动，还会面临相同甚至更为严重的尴尬……</p>
<p>我认为，万事皆可提前准备，万事皆需提前准备。只有前期准备充分，才能在实际执行任务的时候有出色的表现。</p>
<h3 id="验收"><a href="#验收" class="headerlink" title="验收"></a>验收</h3><p>很多人做事半途而废、不了了之的根本原因在于从未想过要给自己执行任务时的表现设计一个验收机制。最基本的验收机制是针对最终结果的，部分有经验的人因为在做事之前总是更关注步骤，并会按照需求将任务拆分成若干个子任务，所以，他们甚至会为每一个步骤设计相应的验收机制。</p>
<p>由此可见，验收机制相当重要。从这个角度讲，我们不管遇到什么任务，都应该对其认真审视，同时向自己提出一个问题并要想办法回答清楚：“怎样才算‘做好’？”如果能把任务拆分成若干个子任务，那么确定“做好”的标准可能更容易一些，因为每个子任务的验收标准可能已经自然存在，起码有这么一条：“如果这个做不好，那么下一个就没法开始……”</p>
<p>为了能将验收机制落到实处，我们应该在做一件事情之前，拿出纸和笔写下每一个预定的验收标准。</p>
<p>从更高的层面上说，<strong>设计验收机制也是任何一个领导者必须拥有的基本能力</strong>。哪怕你领导的只是一个很小的团队，你也都必然要向团队成员指派各种各样的任务。在这种情况下，如果你没有设计验收机制，最终的结果肯定会让你非常失望，因为缺少验收机制会使团队成员对自己的工作质量毫不介意，长此以往，团队的执行力将等于零，作为团队领导者的你也必须承担失败的责任。</p>
<h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><h3 id="效率本质"><a href="#效率本质" class="headerlink" title="效率本质"></a>效率本质</h3><p>学习”最关键的一点是：任何知识的获取，都是不可逆的。在知道它的那一瞬间，它就已经改变了一切，生活因它而变，却无法还原。我们再也不可能对它视而不见、听而不闻、置之不理，它瞬间就能根深蒂固，无法铲除。</p>
<h3 id="摒弃经验-主义-局限"><a href="#摒弃经验-主义-局限" class="headerlink" title="摒弃经验(主义)局限"></a>摒弃经验(主义)局限</h3><p>所有的人获取知识最为基础的手段就是“体验”。“经验”在一定的层面上是适用的，不能否定它的重要价值，但与此同时，必须认清“经验主义”的局限。</p>
<p>在知识正确传播的过程中，语言、文字以及逻辑思维很重要。</p>
<h3 id="自学能力"><a href="#自学能力" class="headerlink" title="自学能力"></a>自学能力</h3><p>本科教育之“本”在于培养学生的自学能力。从理论上讲，一个人本科毕业之后，应该有能力自学他所需要的任何知识。</p>
<h4 id="检索能力建立在相当熟练的阅读理解能力的基础之上"><a href="#检索能力建立在相当熟练的阅读理解能力的基础之上" class="headerlink" title="检索能力建立在相当熟练的阅读理解能力的基础之上"></a>检索能力建立在相当熟练的阅读理解能力的基础之上</h4><h4 id="实践能力是自学能力最终转化为真正价值的根本"><a href="#实践能力是自学能力最终转化为真正价值的根本" class="headerlink" title="实践能力是自学能力最终转化为真正价值的根本"></a>实践能力是自学能力最终转化为真正价值的根本</h4><p>我看到过一句令人非常震撼的话：很多人正是因为没有目标才不停地“学习”。许多人都曾慨叹：工作之后才知道什么真正有用</p>
<p>道自己需要的是什么之后，真正的学习才算开始。比如学英语：很多人天天在学却从来不用。背单词坚决不造句，却去练习什么词根词缀记忆法或联想记忆法；背了那么多单词，却从不读英文文档，从不写英文文章。 其实，掌握2000个基础词汇、了解基本语法规则之后，就应该去“用”英语了。</p>
<h3 id="永远保持开放的心态"><a href="#永远保持开放的心态" class="headerlink" title="永远保持开放的心态"></a>永远保持开放的心态</h3><p>我们的大脑有一个运行机制叫“选择性输入”，其具体表征在很多人身上都有体现：他们只能听到自己喜欢听的，只能看到自己想要看的。</p>
<p>对抗“选择性输入”的最好办法就是借助我们最好的记录工具——纸和笔——有条件的话，最好固定一段时间来把那些目前暂时无法理解的、支持的、反对的、无所谓的论点和观点记录下来。对无法理解的，写下自己当时的疑惑何在；对支持的，记录几个理由或者实例；对反对的，同样记录几个理由或者实例；甚至对那些无所谓的，也记录其原因。一个有着这样良好记录习惯的人会获得他人无法拥有的处理信息和知识的能力——“反刍”。这种“反刍”能力是我们避免成为“选择性输入”受害者的重要保障。</p>
<h3 id="了解学习的进程"><a href="#了解学习的进程" class="headerlink" title="了解学习的进程"></a>了解学习的进程</h3><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><h3 id="勤于思考"><a href="#勤于思考" class="headerlink" title="勤于思考"></a>勤于思考</h3><p>一旦开始尝试独立思考，我们就会发现，陷阱无处不在。这些陷阱直接导致无数人放弃思考——因为在很多时候，思考虽然不费力气，但实在是太麻烦了。为了避免麻烦而把思考推给别人是一种常见的解脱手段，由此，大多数人身上出现了大量“迷信权威”的现象，只不过是程度不同。“迷信权威”本身就是一个典型的陷阱：权威的意见可能更加准确，可是，权威也好、专家也罢，滥竽充数的实在不少。为此我们不得不常常采取“求人不如求己”策略。这也展现了一个无奈的事实——我们生活在一个信任成本极高的社会。</p>
<p>独立思考的一把钥匙是这样的——</p>
<p>首先要了解：权威不一定等于正确。进一步要明白：就算权威正确，也只是权威表达了正确，而非正确属于权威。最后要清楚：准确地说，权威只是权威、正确就是正确，它们俩什么时候都不是一回事。</p>
<p>从另一个角度看，拒绝独立思考、把思考的工作交给别人，不仅不省时间，恰恰相反，非常浪费时间——甚至浪费一生的时间。</p>
<h3 id="思维陷阱"><a href="#思维陷阱" class="headerlink" title="思维陷阱"></a>思维陷阱</h3><h4 id="概念不清"><a href="#概念不清" class="headerlink" title="概念不清"></a>概念不清</h4><p>学习任何知识最重要的一点，就是搞清楚它所有的基础概念。不夸张地讲，任何一个学科的所有知识，都是由这些概念一点一点搭建起来的。</p>
<h3 id="感悟与道理"><a href="#感悟与道理" class="headerlink" title="感悟与道理"></a>感悟与道理</h3><p>“道理”应该是普适的，而“感悟”只来自个体经验。 很多的“感悟”是有局限的，甚至可能是有很大误导性的。</p>
<p>——成功者其实没有必要、没有义务，也往往没有足够的时间去讲述所有的细节。相信我，如果仅仅用财富、权力、地位来衡量成功（即世俗意义上的成功），那么所有的成功背后都有数不尽的磨难，同时，也往往充斥着大量不可告人的细节。比如，国内某大企业的老板肯定不会对所有人说他在受到各个方面的巨大压力后才做出某些决定。追求巨大财富的人是如此，追求巨大权力和至高无上地位的人更是如此。</p>
<p>如果某个人把他们说的当作全部，把他们没说的当作没有，那么这就是掩耳盗铃了。</p>
<p>一定要了解这样一个事实：有些时候，“成功者”的经验没什么用，因为那些经验根本就是错误的，关键在于“成功者”自己可能也并不了解。比如，他们遇到了一个经济飞速增长的时代，无论做什么都赚钱，并且赚得很多，所以从宏观上来看，根本就不是他们自己所认为的宝贵经验在起作用，而是宏观经济给了他们这样的机会。但是，有谁愿意承认自己的成功跟自己的经验没有关系呢？人类普遍拥有的一个认知偏差就是：把成功揽到自己身上，把失败归咎于别人或者坏运气。</p>
<p>最后，要知道有些“宝贵经验”就算正确，放到别人身上也可能并不那么灵验。最可能让一个人误入歧途的，就是他对自己的了解。</p>
<p>比如，成功者们常说，他们并不在意钱，他们知道人格的可贵。但是，大部分听众和他们不一样。大部分听众现在没有足够的钱！相信我，绝大多数人，在没有钱的时候，对“人格可贵”的理解很难非常深刻。人活着是要吃饭的，一个人的家眷是不应该被饿着的，在基本条件都不能保障的时候，“人格有个屁用”就成了很多人的选择。</p>
<p>与其关注成功者，不妨反其道而行之——努力从失败者身上汲取经验。因为失败者的失败往往是显然的、确定的，失败的真正原因也往往很容易查实（尽管失败者会找各种各样的借口）。并且，我们身边失败者的数量，显然要多于成功者的数量。如此，我们也就有了更多的观察机会。</p>
<h2 id="交流"><a href="#交流" class="headerlink" title="交流"></a>交流</h2><h3 id="说与不说"><a href="#说与不说" class="headerlink" title="说与不说"></a>说与不说</h3><p>在我年纪很小的时候，父亲就告诉我：一定要想办法不时做出令人敬佩的事情，这样就会有人主动找你做朋友。我当时并不懂得其中的道理，直到自己过了30岁才意识到一直按他说的去做所带来的巨大好处。“赢得尊重”是最不能急于求成的，也绝对不可能靠临时抱佛脚实现。</p>
<p>“话说出来之后有没有人听”是一个极为有效的自我评估标准。有人听，就说明自己所处的状态；话说了，别人却“听而不闻”，甚至有（对自己来说意外的）异常反应，就说明自己积累得还不够。积累得不够就接着攒罢。我一直觉得“攒人品”的说法不仅是有趣的，还是相当精巧的。</p>
<p>对很多人来说，“知无不言，言无不尽”在大部分情况下是最浪费时间和精力的做法。 </p>
<p>我个人认为，在分享知识的时候，“知无不言，言无不尽”是正确的；而在日常交流中，这个原则的适用性非常差。</p>
<h3 id="共生状态"><a href="#共生状态" class="headerlink" title="共生状态"></a>共生状态</h3><p> 如果我们在任何讨论中发现参与者里面有“自以为是”者存在，那么最好的选择只有一个：退出讨论。因为，只要他们存在，讨论就不再是讨论，也不会得出任何有意义的结果，继续下去只会浪费自己的时间。而我们千万不要自以为是到认为自己有能力、有时间、有责任、有义务教会他们“想明白”的本领，甚至带他们跨越那道难倒大多数人的障碍，这任务几近不可能完成。</p>
<h3 id="正确复述"><a href="#正确复述" class="headerlink" title="正确复述"></a>正确复述</h3><p>如果甲与乙两个人需要沟通，过程是：甲将他的想法用他的语言表达出来（即“编码”），乙用自己的方式去理解甲的语言（即“解码”），然后反过来再次进行。此过程可能重复数次。</p>
<p>但是，不同人的“编码/解码”机制常常也不相同。每个人的“编码/解码”机制都是依靠长期积累获得的，而且深受环境的影响。</p>
<p>况且，发送者生成他的想法——所谓“想明白”——本身就不见得是一件容易的事情，“编码/传递/解码”这3个过程也不一定能够协调无误地实现。再加上即便接收者“解码”正确，他还要把结果与自己的现有知识体系融合，而这也不一定能顺利完成。正确、顺利、有效的沟通到底有多难？ </p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="兴趣"><a href="#兴趣" class="headerlink" title="兴趣"></a>兴趣</h3><p>其实并不是对自己正在做的事情没有兴趣，而是没有能力把目前正在做的事情做好。几乎没有人会喜欢做自己做不好的事情，每个人都会不自觉地尽量回避自己的短处</p>
<p>但不管整体怎样，对一个人来说，一定要问自己这个问题：我不喜欢做某件事情，是不是仅仅因为这件事我没有做好？若是因为自己没有做好而不喜欢，就要考虑另一个问题：做好这件事情究竟对自己有没有意义？如果有，那就要努力做，直到做好为止，没有其他选择。反过来，自己做得挺好，但就是不喜欢，纯粹因为那件事对自己确实没有什么吸引力——事实上这种情况少之又少——那就直接换一件事情做吧。谁能逼你去做一件你确实不喜欢做的事情呢？退一步说，如果你被逼着去做自己能做好的事情，应该也会有些兴趣的。</p>
<p>其次，人们总说他们真正感兴趣的是其他事情。可事实上，出现这种感觉应该仅仅是因为他们还没有开始做那件事，也还没有在那件事上遭受挫折而已。其实，很多人真的放弃原来做的事情，转去做新的“真正感兴趣的”事情的时候，往往会发现，这件事想要做好同样困难重重，挫折不断。没过多久，这些人又会因为做不好这件事情而对其失去兴趣，然后开始幻想做另外的事情，并且将这一行为“合理化”：“我（才知道）自己真正感兴趣的并不是这个……”</p>
<p>综上所述，我觉得兴趣并不是很重要，至少没有我们想象得那么重要。对一个人来说，某件事情只要能做好，并且做到比大多数人好，他就不会对那件事情没兴趣。</p>
<p>说来说去，<strong>是顺序出了问题：往往并不是有兴趣才能做好，而是做好了才有兴趣。</strong></p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>所有学习上的成功，都只依靠两件事——策略和坚持，而坚持本身就是最重要的策略。</p>
<p>很多时候，哪怕说“方法不重要到几乎可以忽略不计的地步”，其实也不是特别过分。更何况，所谓的“好方法”实际上是因人而异的。适合这个人的方法，放到那个人身上，很可能适得其反。换言之，适合所有人的方法很可能根本不存在。所以，有那么多的人将宝贵的时光虚掷在不停地寻找方法上，是一件非常可笑却又不得不令人扼腕叹息的事情。</p>
<p>与其不停地寻找“更好的方法”，还不如马上开始行动。</p>
<h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><p>没有任何机器可以一直用100%的功率运转，人也一样。</p>
<p>记住，任何人都不可能100%地有效率，至少不可能总是100%地有效率。</p>
<p>有些时候，我们会非常有效率，但是，这种情况不可能永远维持。如果一个人强迫自己一定要如此，他必会像那些始终用100%的功率运转的机器一样，由于损耗太大而提前报废。</p>
<blockquote>
<p>纯时间要比毛时间少得多。所谓毛时间，就是你花在这项工作上的时间。</p>
<p>常常有人说，他们一天工作十四五个小时。这样的人可能是有的。可是拿纯时间来说，我一天干不了　那么多。我做学术工作的时间，最高纪录是11小时30分。一般，我能有七八个小时的纯工作时间，我就心满意足了。我最高纪录的一个月是1937年7月，我一个月工作了316小时，每日平均纯工作时间是7小时。如果把纯时间折算成毛时间，应该增加25%到30%；我逐渐改进我的统计，最后形成了我现在使用的方法……</p>
<p>当然，每个人每天都要睡觉，都要吃饭。换句话说，每个人都有一定的时间用在标准活动上。工作经验表明，约有12至13小时毛时间可以用于非标准活动，诸如上班办公、学术工作、社会工作、娱乐，等等。</p>
</blockquote>
<p>从这里就可以看出，在做时间预算的时候，一定要留有空间。一方面，我们必须清楚肯定会有意外事件发生，所以要留出时间处理这些意外事件；另一方面，我们必须使用适当的方法休息、放松，以便恢复精力，在良好的状态下做更多的事情。一个人除了工作、学习之外，一定要保证自己有足够的其他活动。</p>
<h3 id="节奏"><a href="#节奏" class="headerlink" title="节奏"></a>节奏</h3><p>我们应该记住的是：凡是值得做的事情，都值得慢慢去做，做很久很久。</p>
<h3 id="自我证明"><a href="#自我证明" class="headerlink" title="自我证明"></a>自我证明</h3><p>证明自己是大多数人自然的愿望。“证明自己”本身没有任何错误，但是，很多人实际上是挣扎着想“证明自己给别人看”。殊不知，“证明自己给别人看”恰恰是最浪费生命的一种行为。如果某个人本身是出色的，那么不需要他去证明自己是出色的，别人自然会看到。如果某个人本身是平庸的，那么也不需要他去证明自己是平庸的，别人同样会看到。如果某个人出色，却仍然要刻意证明，可能招致不必要的麻烦</p>
<p>实际上，尽管我们总是说“人贵自知”，但是，很多时候，对很多人来讲，“自知”可能是非常残忍的。</p>
<p>如果你想不开，一定要让别人承认自己比他们强，那就听我的劝告，记住一件事：你比别人强一点根本没用，真正有用的是你比别人强很多很多。</p>
]]></content>
      <categories>
        <category>书摘</category>
      </categories>
      <tags>
        <tag>碎碎念</tag>
      </tags>
  </entry>
  <entry>
    <title>matlab学习笔记</title>
    <url>/%E5%BB%BA%E6%A8%A1/Math/matlab%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>注： </p>
<ul>
<li>虽然文档很全面，但是这篇文章主要是为了在一天内速成，所以不足之处请多包涵。</li>
<li>代码基于vscode/py 3.6调用的matlab terminal</li>
</ul>
<h1 id="基本的数学运算与矩阵运算"><a href="#基本的数学运算与矩阵运算" class="headerlink" title="基本的数学运算与矩阵运算"></a>基本的数学运算与矩阵运算</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul>
<li>不需声明</li>
<li>用 = 给变量赋值</li>
</ul>
<h4 id="变量名"><a href="#变量名" class="headerlink" title="变量名"></a>变量名</h4><ul>
<li>变量名大小写敏感（不知道是不是因为在windows的原因</li>
<li>变量名只能由[<code>0~9</code>,<code>a~z</code>,<code>A~z</code>,<code>_</code>]组成,且变量名不能以数字开头.</li>
<li>保留变量不适合做变量名<ul>
<li>使用<code>iskeyword</code>命令可以查看程序关键字,这些关键字不允许被用作变量名.</li>
</ul>
</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th>变量</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td>ans</td>
<td>上一句运算的结果</td>
</tr>
<tr>
<td><strong>i,j</strong></td>
<td>复数算子，（这里需要留意）</td>
</tr>
<tr>
<td>Inf</td>
<td>无穷</td>
</tr>
<tr>
<td>eps</td>
<td>浮点相对精度,即1.0到下一个浮点数之间的距离(值为2.2204e-16)</td>
</tr>
<tr>
<td>NaN</td>
<td>非数字</td>
</tr>
<tr>
<td>pi</td>
<td>圆周率</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li><p>变量名不应当覆盖内置函数名</p>
<ul>
<li><p>在MATLAB中,变量的调用优先级(calling priority)高于函数,因此变量名不应该覆盖内置函数.</p>
<p><img src='https://img-blog.csdnimg.cn/20191112184241114.png'></p>
</li>
<li><p>例如：</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">cos &#x3D; &#39;changqingaas&#39;;
cos(8)
% disp([&#39;ans is &#39;, num2str(ans)])
clear; % 若某函数被变量名所覆盖,则调用clear &lt;变量名&gt;可以取消绑定在该函数名上的变量名
cos(8)
% disp([&#39;ans is &#39;, num2str(ans)])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注：<code>clear</code>是一个比较危险的命令,因为该命令后若不加参数,则表示清除当前工作区内的所有变量.</p>
</li>
</ul>
</li>
</ul>
<pre><code>输出：

<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">ans &#x3D;

    &#39;n&#39;


ans &#x3D;

   -0.1455<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</code></pre><h4 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h4><p><code>logical</code>,<code>char</code>,<code>numeric</code>,<code>cell</code>,<code>struct</code>以及由他们组成的数组或矩阵.</p>
<p><img src="https://img-blog.csdnimg.cn/20191112184307618.png" alt="MATLAB中的变量类型"></p>
<h5 id="数字型变量的显示格式"><a href="#数字型变量的显示格式" class="headerlink" title="数字型变量的显示格式"></a>数字型变量的显示格式</h5><p>数字型变量,默认以<code>double</code>形式存储的.</p>
<p>可以通过<code>format &lt;显示格式&gt;</code>改变数字型变量的显示格式.</p>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203182051.png" alt="image-20220203182051494"></p>
<h3 id="MATLAB命令行"><a href="#MATLAB命令行" class="headerlink" title="MATLAB命令行"></a>MATLAB命令行</h3><ul>
<li><p>使用行尾<code>;</code>抑制输出: </p>
<ul>
<li>在一行命令后使用<code>;</code>抑制输出,否则运算结果将被显示在终端上.</li>
</ul>
</li>
<li><p>| 命令    | 作用                                                         | 运行结果                                                     |<br>| ———- | —————————————————————————————— | —————————————————————————————— |<br>| <code>clc</code>   | 清除终端的输出                                               |                                                              |<br>| <code>clear</code> | 默认清除当前工作区内所有变量                                 |                                                              |<br>| <code>who</code>   | 以简略格式显示工作区内所有变量                               | 您的变量为:<br>ans                                           |<br>| <code>whos</code>  | 以复杂格式显示工作区内所有变量                               | Name      Size            Bytes  Class     Attributes<br/>  ans       1x1                 8  double |<br>| which   | 查看内置函数源代码文件的位置,与<code>edit</code>命令结合可以查看内置函数的源代码. |                                                              |</p>
</li>
</ul>
<h2 id="使用MATLAB进行数字运算"><a href="#使用MATLAB进行数字运算" class="headerlink" title="使用MATLAB进行数字运算"></a>使用MATLAB进行数字运算</h2><h3 id="使用MATLAB计算数学表达式"><a href="#使用MATLAB计算数学表达式" class="headerlink" title="使用MATLAB计算数学表达式"></a>使用MATLAB计算数学表达式</h3><ul>
<li>数学表达式被计算后，其值被存入变量ans</li>
<li>log 表示 ln</li>
<li>exp(x) 表示 e^x</li>
</ul>
<h3 id="MATLAB内置的数学函数"><a href="#MATLAB内置的数学函数" class="headerlink" title="MATLAB内置的数学函数"></a>MATLAB内置的数学函数</h3><ul>
<li><p><a href="https://www.mathworks.com/help/matlab/arithmetic.html">MATLAB内置的算数运算函数</a></p>
<ul>
<li><p>基本运算:</p>
<ul>
<li>加: <code>+</code>,<code>sum</code>,<code>cumsum</code>,<code>movsum</code></li>
<li>减: <code>-</code>,<code>diff</code></li>
<li>乘: <code>.*</code>,<code>*</code>,<code>prod</code>,<code>cumprod</code></li>
<li>除: <code>./</code>,<code>.\</code>,<code>/</code>,<code>\</code></li>
<li>乘方: <code>.^</code>,<code>^</code></li>
</ul>
</li>
<li><p>取模运算: <code>mod</code>,<code>rem</code>,<code>idivide</code>,<code>ceil</code>,<code>fix</code>,<code>floor</code>,<code>round</code></p>
</li>
</ul>
</li>
<li><p><a href="http://www.mathworks.com/help/matlab/trigonometry.html">MATLAB内置的三角运算函数</a></p>
<ul>
<li>正弦: sin,sind,sinpi,asin,asind,sinh,asinh</li>
<li>余弦: cos,cosd,cospi,acos,acosd,cosh,acosh</li>
<li>正切: tan,tand,atan,atand,atan2,atan2d,tanh,atanh</li>
<li>余割: csc,cscd,acsc,acscd,csch,acsch</li>
<li>正割: sec,secd,asec,asecd,sech,asech</li>
<li>余切: cot,cotd,acot,acotd,coth,acoth</li>
<li>斜边: hypot</li>
<li>转换: deg2rad,rad2deg,cart2pol,cart2sph,pol2cart,sph2cart</li>
</ul>
</li>
<li><p><a href="https://ww2.mathworks.cn/help/matlab/exponents-and-logarithms.html">MATLAB内置的指数对数函数: </a></p>
<ul>
<li>exp,expm1,log,log10,log1p,log2,nextpow2,nthroot,pow2,reallog,realpow,realsqrt,sqr</li>
</ul>
</li>
<li><p><a href="https://www.mathworks.com/help/matlab/complex-numbers.html">MATLAB内置的复函数: </a></p>
<ul>
<li>abs,angle,complex,conj,cplxpair,i,imag,isreal,j,real,sign,unwrap</li>
</ul>
</li>
</ul>
<h2 id="使用MATLAB进行矩阵运算"><a href="#使用MATLAB进行矩阵运算" class="headerlink" title="使用MATLAB进行矩阵运算"></a>使用MATLAB进行矩阵运算</h2><h3 id="定义矩阵"><a href="#定义矩阵" class="headerlink" title="定义矩阵"></a>定义矩阵</h3><h4 id="向终端输入矩阵"><a href="#向终端输入矩阵" class="headerlink" title="向终端输入矩阵"></a>向终端输入矩阵</h4><p>在MATLAB中,使用[]将待输入的矩阵内容括起来,使用空格或逗号,分隔行内变量,使用;分隔每一行.</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>MATLAB命令</strong></th>
<th><strong>得到的矩阵</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>[1 2 3 4]</td>
<td>[1 2 3 4]</td>
</tr>
<tr>
<td>[1; 2; 3; 4]</td>
<td>$\begin{bmatrix}1 \ 2 \ 3 \ 4\end{bmatrix}$</td>
</tr>
<tr>
<td>[1 21 6; 5 17 9; 31 2 7]</td>
<td>$\begin{bmatrix} 1 &amp; 21 &amp; 6 \ 5 &amp; 17 &amp; 9 \ 31 &amp; 2 &amp; 7 \end{bmatrix}$</td>
</tr>
</tbody>
</table>
</div>
<h4 id="使用冒号运算符创建向量"><a href="#使用冒号运算符创建向量" class="headerlink" title="使用冒号运算符创建向量"></a>使用冒号运算符创建向量</h4><p>使用冒号运算符:可以创建一个长向量,其语法如下:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>冒号表达式</strong></th>
<th><strong>得到的结果</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>j:k</td>
<td>[j,j+1,j+2,…,k]</td>
</tr>
<tr>
<td>j:i:k</td>
<td>[j,j+i,j+2*i,…,j+m∗i]</td>
</tr>
</tbody>
</table>
</div>
<p> 例如：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th><strong>MATLAB语句</strong></th>
<th><strong>得到的结果</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>1:5</td>
<td>[1 2 3 4 5]</td>
</tr>
<tr>
<td>1:3:5</td>
<td>[1 4]</td>
</tr>
<tr>
<td>[1:3; 2:3:10]</td>
<td>$\begin{bmatrix} 1 &amp; 2 &amp; 3 \ 2 &amp; 5 &amp; 8 \end{bmatrix}$</td>
</tr>
<tr>
<td>‘a’:2:’z’</td>
<td>‘acegikmoqsuwy’</td>
</tr>
</tbody>
</table>
</div>
<h4 id="定义特殊矩阵"><a href="#定义特殊矩阵" class="headerlink" title="定义特殊矩阵"></a>定义特殊矩阵</h4><div class="table-container">
<table>
<thead>
<tr>
<th><strong>命令</strong></th>
<th><strong>得到的结果</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>eye(n)</td>
<td>得到一个n × n 的单位矩阵</td>
</tr>
<tr>
<td>zeros(n1, n2)</td>
<td>得到一个n1 × n2  的全0矩阵</td>
</tr>
<tr>
<td>ones(n1, n2)</td>
<td>得到一个n1 × n2  的全1矩阵</td>
</tr>
<tr>
<td>diag(vector)</td>
<td>得到一个以向量<code>vector</code>中内容为对角线的对角矩阵</td>
</tr>
</tbody>
</table>
</div>
<h3 id="矩阵的索引"><a href="#矩阵的索引" class="headerlink" title="矩阵的索引"></a>矩阵的索引</h3><ul>
<li><p>MATLAB中的矩阵是以<strong>列</strong>序存储的.且索引下标从1开始.</p>
</li>
<li><p>矩阵有两种索引方式: 按一维索引和按二维索引.对于一个一般的矩阵,其索引顺序如下:</p>
<ul>
<li>$\begin{bmatrix} 1或(1,1) &amp; 4或(1,2) &amp; 7或(1,3) \ 2或(2,1) &amp; 5或(2,2) &amp; 8或(2,3) \ 3或(3,1) &amp; 6或(3,2) &amp;9或(3,3)  \end{bmatrix}$</li>
</ul>
</li>
<li><p>矩阵的索引可以使用冒号<code>:</code>,表示选取所有行或所有列.</p>
</li>
<li><p>矩阵的索引可以是一个或两个向量,表示选中向量内的所有行或所有列.</p>
<p>| <strong>原矩阵</strong>                                                   | <strong>索引</strong>        | <strong>得到的结果</strong>                                          |<br>| —————————————————————————————— | ———————- | ———————————————————————————- |<br>| $\begin{bmatrix} 1 &amp; 2 &amp; 3 \ 4 &amp; 5 &amp; 6\ 7 &amp; 8 &amp; 9 \end{bmatrix}$ | A(8)            | 6                                                       |<br>| $\begin{bmatrix} 1 &amp; 2 &amp; 3 \ 4 &amp; 5 &amp; 6\ 7 &amp; 8 &amp; 9 \end{bmatrix}$ | A([1 3 5])      | [1 7 5]                                                 |<br>| $\begin{bmatrix} 1 &amp; 2 &amp; 3 \ 4 &amp; 5 &amp; 6\ 7 &amp; 8 &amp; 9 \end{bmatrix}$ | A([1 2; 3 4])   | $\begin{bmatrix} 1 &amp; 4 \ 7 &amp; 2\end{bmatrix}$           |<br>| $\begin{bmatrix} 1 &amp; 2 &amp; 3 \ 4 &amp; 5 &amp; 6\ 7 &amp; 8 &amp; 9 \end{bmatrix}$ | A(3,2)          | 8                                                       |<br>| $\begin{bmatrix} 1 &amp; 2 &amp; 3 \ 4 &amp; 5 &amp; 6\ 7 &amp; 8 &amp; 9 \end{bmatrix}$ | A([1,2], :)     | $\begin{bmatrix} 1 &amp; 2 &amp; 3 \ 4 &amp;  5 &amp; 6 \end{bmatrix}$ |<br>| $\begin{bmatrix} 1 &amp; 2 &amp; 3 \ 4 &amp; 5 &amp; 6\ 7 &amp; 8 &amp; 9 \end{bmatrix}$ | A([1 3], [1 2]) | $\begin{bmatrix} 1 &amp; 2 \ 7 &amp; 8 \end{bmatrix}$          |</p>
</li>
</ul>
<h3 id="矩阵的操作"><a href="#矩阵的操作" class="headerlink" title="矩阵的操作"></a>矩阵的操作</h3><h4 id="操作矩阵的运算符"><a href="#操作矩阵的运算符" class="headerlink" title="操作矩阵的运算符"></a>操作矩阵的运算符</h4><div class="table-container">
<table>
<thead>
<tr>
<th>运算符</th>
<th>操作</th>
<th>形式</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>+</code></td>
<td>矩阵与向量相加</td>
<td><code>A+b</code></td>
<td><code>[6 3] + 2 = [8 5]</code></td>
</tr>
<tr>
<td><code>-</code></td>
<td>矩阵与向量相减</td>
<td><code>A-b</code></td>
<td><code>[6 3] - 2 = [4 1]</code></td>
</tr>
<tr>
<td><code>+</code></td>
<td>矩阵与矩阵对应位置相加</td>
<td><code>A+B</code></td>
<td><code>[6 3] + [4 8] = [10 11]</code></td>
</tr>
<tr>
<td><code>-</code></td>
<td>矩阵与矩阵对应位置相减</td>
<td><code>A-B</code></td>
<td><code>[6 3] - [4 8] = [2 -5]</code></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>*</code></td>
<td>矩阵与矩阵相乘</td>
<td><code>A*B</code></td>
<td><code>[6 3] * [4 8]&#39; = 48</code></td>
</tr>
<tr>
<td><code>.*</code></td>
<td>矩阵与矩阵对应位置相乘</td>
<td><code>A.*B</code></td>
<td><code>[6 3] * [4 8] = [24 24]</code></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>/</code></td>
<td>矩阵与矩阵右除(等价于<code>A*inv(B)</code>)</td>
<td><code>A/B</code></td>
<td><code>[6 3] / [4 8] = 0.6</code></td>
</tr>
<tr>
<td><code>\</code></td>
<td>矩阵与矩阵左除(等价于<code>inv(A)*B</code>)</td>
<td><code>A\B</code></td>
<td><code>[6 3] / [4 8] = [0.06667 1.3333; 0 0]</code></td>
</tr>
<tr>
<td><code>./</code></td>
<td>矩阵与矩阵对应位置右除</td>
<td><code>A./B</code></td>
<td><code>[6 3] ./ [4 8] = [1.5 0.375]</code></td>
</tr>
<tr>
<td><code>.\</code></td>
<td>矩阵与矩阵对应位置左除</td>
<td><code>A.\B</code></td>
<td><code>[6 3] .\ [4 8] = [0.6667 2.6667]</code></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>^</code></td>
<td>矩阵与向量乘方</td>
<td><code>A^b</code></td>
<td><code>[1 2; 3 4]^3 = [37 54; 81 118]</code></td>
</tr>
<tr>
<td><code>.^</code></td>
<td>矩阵与矩阵对应位置乘方</td>
<td><code>A.^B</code></td>
<td><code>[1 2; 3 4].^[1 2; 3 4] = [1 4; 27 256]</code></td>
</tr>
</tbody>
</table>
</div>
<h4 id="操作矩阵的函数"><a href="#操作矩阵的函数" class="headerlink" title="操作矩阵的函数"></a>操作矩阵的函数</h4><p>对下面的矩阵</p>
<script type="math/tex; mode=display">
A=\begin{bmatrix} 1 & 2 & 3 \\ 0 & 5 & 6 \\ 7 & 0 & 9 \end{bmatrix}</script><p>进行操作以演示操作矩阵的常见函数</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
<th>例子</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>max(A, [], dim)</code></td>
<td>获取矩阵<code>A</code>的<code>dim</code>维度上的最大值</td>
<td><code>max(A, [], 1)</code></td>
<td>$\begin{bmatrix} 7 &amp; 5 &amp; 9 \end{bmatrix}$</td>
</tr>
<tr>
<td><code>min(A, [], dim)</code></td>
<td>获取矩阵<code>A</code>的<code>dim</code>维度上的最小值</td>
<td><code>min(A, [], 2)</code></td>
<td>$\begin{bmatrix} 1 &amp; 0 &amp; 0 \end{bmatrix}$</td>
</tr>
<tr>
<td><code>sum(A, dim)</code></td>
<td>获取矩阵<code>A</code>的<code>dim</code>维度上的和</td>
<td><code>sum(A, 1)</code></td>
<td>$\begin{bmatrix} 8 &amp; 7 &amp; 18 \end{bmatrix}$</td>
</tr>
<tr>
<td><code>mean(A, dim)</code></td>
<td>获取矩阵<code>A</code>的<code>dim</code>维度上的平均值</td>
<td><code>mean(A, 1)</code></td>
<td>[2.66672.33336.0000]</td>
</tr>
<tr>
<td><code>sort(A, dim, direction)</code></td>
<td>获取矩阵<code>A</code>的<code>dim</code>维度上按<code>direction</code>顺序排序结果</td>
<td><code>sort(A, 1, &#39;descend&#39;)</code></td>
<td>$\begin{bmatrix} 7 &amp; 5 &amp; 9 \\ 1 &amp; 2 &amp; 6 \ 0 &amp; 0 &amp; 3 \end{bmatrix}$</td>
</tr>
<tr>
<td><code>sortrows(A, column)</code></td>
<td>获取矩阵<code>A</code>按照每行第<code>column</code>个元素升序排序结果.</td>
<td><code>sortrows(A, 2)</code></td>
<td>$\begin{bmatrix}  7 &amp; 0 &amp; 9\ 1 &amp; 2 &amp; 3\ 0 &amp; 5 &amp; 6\end{bmatrix}$</td>
</tr>
<tr>
<td><code>size(A, dim)</code></td>
<td>获取矩阵<code>A</code>的<code>dim</code>维度上的形状.若不指定<code>dim</code>,则返回整个矩阵的形状.</td>
<td><code>size(A)</code></td>
<td>[3 3]</td>
</tr>
<tr>
<td><code>find(A, n)</code></td>
<td>获取矩阵<code>A</code>前<code>n</code>个非零元素的索引</td>
<td>`find(A,5)</td>
<td>[1 3 4 5 7]</td>
</tr>
</tbody>
</table>
</div>
<p>对于上面这些函数,除第一个参数以外,其它参数都是可选的.</p>
<h1 id="结构化编程和函数定义"><a href="#结构化编程和函数定义" class="headerlink" title="结构化编程和函数定义"></a>结构化编程和函数定义</h1><h2 id="结构化编程"><a href="#结构化编程" class="headerlink" title="结构化编程"></a>结构化编程</h2><h3 id="流程控制语句和逻辑运算符"><a href="#流程控制语句和逻辑运算符" class="headerlink" title="流程控制语句和逻辑运算符"></a>流程控制语句和逻辑运算符</h3><div class="table-container">
<table>
<thead>
<tr>
<th>流程控制语句</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>if, elseif, else</code></td>
<td>若<code>if</code>语句为真,则执行子句</td>
</tr>
<tr>
<td><code>switch, case, otherwise</code></td>
<td>根据<code>switch</code>语句内容判断执行哪个子句</td>
</tr>
<tr>
<td><code>while</code></td>
<td>重复执行子句直到<code>while</code>中的条件为假</td>
</tr>
<tr>
<td><code>for</code></td>
<td>执行子句固定次数</td>
</tr>
<tr>
<td><code>try, catch</code></td>
<td>执行子句并捕获执行过程中的异常</td>
</tr>
<tr>
<td><code>break</code></td>
<td>跳出循环</td>
</tr>
<tr>
<td><code>continue</code></td>
<td>直接进入下一次循环</td>
</tr>
<tr>
<td><code>end</code></td>
<td>结束子句</td>
</tr>
<tr>
<td><code>pause</code></td>
<td>暂停程序</td>
</tr>
<tr>
<td><code>return</code></td>
<td>返回到调用函数处</td>
</tr>
</tbody>
</table>
</div>
<p>上述所有循环和条件语句都要在末尾以<code>end</code>闭合.</p>
<p>MATLAB还有以下逻辑运算符:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>运算符</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>==</code></td>
<td>等于</td>
</tr>
<tr>
<td><code>~=</code></td>
<td>不等于</td>
</tr>
<tr>
<td><code>&amp;&amp;</code></td>
<td>且(支持逻辑短路)</td>
</tr>
<tr>
<td>`</td>
<td></td>
<td>`</td>
<td>或(支持逻辑短路)</td>
</tr>
</tbody>
</table>
</div>
<h4 id="流程控制语句示例"><a href="#流程控制语句示例" class="headerlink" title="流程控制语句示例"></a>流程控制语句示例</h4><h5 id="if-语句："><a href="#if-语句：" class="headerlink" title="if 语句："></a>if 语句：</h5><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">if condition1
	statement1
elseif condition2
	statement2
else 
	statement3
end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h5><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">switch expression
    case value1
        statement1
    case value2
        statement2
    otherwise 
        statement
end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h5><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">while expression
	statement
end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h5><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">for variable &#x3D; start:increment:end
	commands
end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h5><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x &#x3D; 2; k &#x3D; 0; error &#x3D; inf;
error_threshold &#x3D; 1e-32;

while error &gt; error_threshold

    if k &gt; 100
        break
    end

    x &#x3D; x - sin(x) &#x2F; cos(x);
    error &#x3D; abs(x - pi);
    k &#x3D; k + 1;
end
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="使用循环语句应尽量预先分配内存空间"><a href="#使用循环语句应尽量预先分配内存空间" class="headerlink" title="使用循环语句应尽量预先分配内存空间"></a>使用循环语句应尽量预先分配内存空间</h4><h3 id="编写脚本时应注意的问题"><a href="#编写脚本时应注意的问题" class="headerlink" title="编写脚本时应注意的问题"></a>编写脚本时应注意的问题</h3><h4 id="在脚本开头应添加语句清空工作区"><a href="#在脚本开头应添加语句清空工作区" class="headerlink" title="在脚本开头应添加语句清空工作区"></a>在脚本开头应添加语句清空工作区</h4><p>在每个脚本的开头,应添加下述语句,清空工作区缓存以及之前程序运行的痕迹:</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">clear all	% 清空工作区内存中的变量
close all 	% 关闭之前程序绘制的图像
clc			% 清空之前程序在终端的输出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="在运算和赋值语句后应添加分号-抑制输出"><a href="#在运算和赋值语句后应添加分号-抑制输出" class="headerlink" title="在运算和赋值语句后应添加分号;抑制输出"></a>在运算和赋值语句后应添加分号<code>;</code>抑制输出</h4><p>在所有运算和赋值语句都应该添加分号<code>;</code>抑制输出,若需要向终端输出一个变量,应对其调用<code>disp</code>方法.</p>
<h4 id="使用省略号-拼接多行语句"><a href="#使用省略号-拼接多行语句" class="headerlink" title="使用省略号...拼接多行语句"></a>使用省略号<code>...</code>拼接多行语句</h4><p>在MATLAB中,省略号<code>...</code>可以将多行语句拼接为一行,灵活使用该语句可以提高代码可读性.</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>与脚本类似,函数可以被存入<code>函数名.m</code>文件中,也可以以函数句柄的形式定义在内存中.</p>
<h3 id="查看内置函数"><a href="#查看内置函数" class="headerlink" title="查看内置函数"></a>查看内置函数</h3><p>我们可以使用<code>which</code>命令查看内置函数源代码文件的位置,与<code>edit</code>命令结合可以查看内置函数的源代码.</p>
<p>运行下面语句可以打开MATLAB内置的<code>mean</code>函数的源文件:</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">edit(which(&#39;mean.m&#39;))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203200209.png" alt="mean函数源代码"></p>
<h3 id="以函数名-m文件形式定义函数"><a href="#以函数名-m文件形式定义函数" class="headerlink" title="以函数名.m文件形式定义函数"></a>以<code>函数名.m</code>文件形式定义函数</h3><p>在MATLAB文件中定义函数的格式如下:</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">function [输出变量名] &#x3D; 函数名(输入变量名) 
% 函数的文档

函数代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><code>function</code>是一个关键字,声明该文件中保存的是一个函数.</li>
<li><code>输入变量</code>和<code>输出变量</code>是非必须的,函数既可以没有输入变量,也可以没有输出变量.</li>
<li><code>函数名</code>应与<code>.m</code>文件名相同,且不包含特殊字符(最好不要有中文).</li>
</ul>
<h4 id="MATLAB内置的函数参数"><a href="#MATLAB内置的函数参数" class="headerlink" title="MATLAB内置的函数参数"></a>MATLAB内置的函数参数</h4><div class="table-container">
<table>
<thead>
<tr>
<th>函数参数</th>
<th>意义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>imputname</code></td>
<td>输入变量名列表</td>
</tr>
<tr>
<td><code>mfilename</code></td>
<td>函数源代码文件名</td>
</tr>
<tr>
<td><code>nargin</code></td>
<td>输入变量数</td>
</tr>
<tr>
<td><code>nargout</code></td>
<td>输出变量个数</td>
</tr>
<tr>
<td><code>varargin</code></td>
<td>可变长输入参数列表</td>
</tr>
<tr>
<td><code>varargout</code></td>
<td>可变长输出参数列表</td>
</tr>
</tbody>
</table>
</div>
<p>MATLAB不提供其他高级语言的指定默认参数值以及函数重载等语法,但灵活使用上述内置的函数参数,可以在一定程度上实现指定默认参数值以及方法重载:</p>
<h4 id="MATLAB函数定义示例1"><a href="#MATLAB函数定义示例1" class="headerlink" title="MATLAB函数定义示例1"></a>MATLAB函数定义示例1</h4><p>面程序用来计算自由落体运动中位移量:<br>$x = x<em>{0} + v</em>{0}t + \frac{1}{2} g t^2 $</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">function x &#x3D; freebody(x0,v0,t)
% calculation of free falling
% x0: initial displacement in m
% v0: initial velocity in m&#x2F;sec
% t: the elapsed time in sec
% x: the depth of falling in m
x &#x3D; x0 + v0.*t + 1&#x2F;2*9.8*t.*t;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>该函数演示了一个MATLAB编程技巧: 计算乘法时应尽量使用<code>.*</code>而非<code>*</code>,因为前者不仅对参数<code>t</code>为标量的情况可用,也对变量<code>t</code>为向量或矩阵的情况可用.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">freebody(0, 0, 2)			% 得到 19.6000
freebody(0, 0, [0 1 2 3])	% 得到 [0 4.9000 19.6000 44.1000]
freebody(0, 0, [0 1; 2 3])	% 得到 [0 4.9000; 19.6000 44.1000]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="MATLAB函数定义示例2"><a href="#MATLAB函数定义示例2" class="headerlink" title="MATLAB函数定义示例2"></a>MATLAB函数定义示例2</h4><p>下面函数实现了从华氏温度到摄氏温度的转换,该函数可以识别输入的待转换样例的个数,当输入的待转换样例个数为0时,退出函数.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">function F2C()
while 1
    F_degree &#x3D; input(&#39;tempreature in Fahrenheit: &#39;, &#39;s&#39;);
    F_degree &#x3D; str2num(F_degree);
    if isempty(F_degree)
        return
    end
    C_degree &#x3D; (F_degree-32)*5&#x2F;9;
    disp([&#39;tempreature in Celsius: &#39; num2str(C_degree)])
end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203201516.png" alt="F2C函数执行结果"></p>
<h3 id="以函数句柄形式定义函数"><a href="#以函数句柄形式定义函数" class="headerlink" title="以函数句柄形式定义函数"></a>以函数句柄形式定义函数</h3><p>我们也可以使用函数句柄的形式定义函数,这更接近数学上的函数定义,其语法如下:</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">函数句柄 &#x3D; @(输入变量) 输出变量 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>可以直接通过函数句柄调用该方法.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">f &#x3D; @(x) exp(-2*x);
x &#x3D; 0:0.1:2;
plot(x, f(x));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h1 id="数据类型与文件读写"><a href="#数据类型与文件读写" class="headerlink" title="数据类型与文件读写"></a>数据类型与文件读写</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>MATLAB中主要的数据类型如下:</p>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203202237.png" alt="MATLAB中的数据类型"></p>
<h3 id="数值类型-numeric"><a href="#数值类型-numeric" class="headerlink" title="数值类型(numeric)"></a>数值类型(numeric)</h3><p>MATLAB支持的数值类型见下表:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>数值类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>double</code></td>
<td>双精度浮点数</td>
</tr>
<tr>
<td><code>single</code></td>
<td>单精度浮点数</td>
</tr>
<tr>
<td><code>int8</code></td>
<td>8位带符号整数</td>
</tr>
<tr>
<td><code>int16</code></td>
<td>16位带符号整数</td>
</tr>
<tr>
<td><code>int32</code></td>
<td>32位带符号整数</td>
</tr>
<tr>
<td><code>int64</code></td>
<td>64位带符号整数</td>
</tr>
<tr>
<td><code>uint8</code></td>
<td>8位无符号整数</td>
</tr>
<tr>
<td><code>uint16</code></td>
<td>16位无符号整数</td>
</tr>
<tr>
<td><code>uint32</code></td>
<td>32位无符号整数</td>
</tr>
<tr>
<td><code>uint64</code></td>
<td>64位无符号整数</td>
</tr>
</tbody>
</table>
</div>
<p>在MATLAB中,数值类型的变量被默认为<code>double</code>类型的,可以使用类型转换将其转换为其他数值类型.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">n &#x3D; 3;
class(n)	 

n &#x3D; int8(3);
class(n)	 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输出：</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">ans &#x3D;
    &#39;double&#39;
ans &#x3D;
    &#39;int8&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="字符串类型-char"><a href="#字符串类型-char" class="headerlink" title="字符串类型(char)"></a>字符串类型(char)</h3><ul>
<li><p>在MATLAB中,字符串类型由一对单引号<code>&#39;</code>包裹一段文字来定义.标准ASCII字符可以被转换为对应的ASCII码.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">s1 &#x3D; &#39;h&#39;;
uint16(s1)	% 得到 104<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>字符串在内存中是以字符矩阵的形式存储的,可以对其进行矩阵的索引以及赋值操作:</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">str1 &#x3D; &#39;hello&#39;;
str2 &#x3D; &#39;world&#39;;

str3 &#x3D; [str1 str2];
size(str3)		% 得到 [1 10]

str4 &#x3D; [str1; str2];
size(str4)		% 得到 [2 5]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">str &#x3D; &#39;aardvark&#39;;
&#39;a&#39; &#x3D;&#x3D; str				% 得到 [1 1 0 0 0 1 0 0]
str(str &#x3D;&#x3D; &#39;a&#39;) &#x3D; &#39;Z&#39;	% 得到 &#39;ZZrdvZrk&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="结构体-structure"><a href="#结构体-structure" class="headerlink" title="结构体(structure)"></a>结构体(structure)</h3><p>在MATLAB中,结构体是一个键值对</p>
<h4 id="结构体的基本使用"><a href="#结构体的基本使用" class="headerlink" title="结构体的基本使用"></a>结构体的基本使用</h4><ul>
<li>与大多数编程语言类似,MATLAB使用<code>.</code>来访问结构体中的字段:</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203202908.png" alt="结构体"></p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">student.name &#x3D; &#39;John Doe&#39;;
student.id &#x3D; &#39;jdo2@sfu.ca&#39;;
student.number &#x3D; 301073268;
student.grade &#x3D; [100, 75, 73; ...
                 95, 91, 85.5; ...
                 100, 98, 72];
student<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p>对结构体列表使用下标表达式可以扩充或缩减结构体列表.</p>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203203208.png" alt="结构体数组"></p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">student.name &#x3D; &#39;John Doe&#39;;
student.id &#x3D; &#39;jdo2@sfu.ca&#39;;
student.number &#x3D; 301073268;
student.grade &#x3D; [100, 75, 73; 95, 91, 85.5; 100, 98, 72];

student

student(2).name &#x3D; &#39;Ann Lane&#39;;
student(2).id &#x3D; &#39;aln4@sfu.ca&#39;;
student(2).number &#x3D; 301078853;
student(2).grade &#x3D; [95 100 90; 95 82 97; 100 85 100];

student(1) &#x3D; [] % 删除student列表第一项<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>结构体可以级联,即结构体中字段的取值也可以是结构体:</p>
  <pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">A &#x3D; struct(&#39;data&#39;, [3 4 7; 8 0 1], ...
&#39;nest&#39;, struct(&#39;testnum&#39;, &#39;Test 1&#39;, ...
&#39;xdata&#39;, [4 2 8], ...
&#39;ydata&#39;, [7 1 6]));
A(2).data &#x3D; [9 3 2; 7 6 5];
A(2).nest.testnum &#x3D; &#39;Test 2&#39;;
A(2).nest.xdata &#x3D; [3 4 2];
A(2).nest.ydata &#x3D; [5 0 9];

A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h4 id="结构体的常用函数"><a href="#结构体的常用函数" class="headerlink" title="结构体的常用函数"></a>结构体的常用函数</h4><div class="table-container">
<table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>struct</code></td>
<td>创建结构体</td>
</tr>
<tr>
<td><code>struct2cell</code></td>
<td>将结构体转换为元胞数组</td>
</tr>
<tr>
<td><code>cell2struct</code></td>
<td>将元胞数组转换为结构体</td>
</tr>
<tr>
<td><code>isstruct</code></td>
<td>判断某变量是否是结构体</td>
</tr>
<tr>
<td><code>structfun</code></td>
<td>对结构体的每个字段都应用某函数</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><code>fieldnames</code></td>
<td>获取结构体的所有字段名</td>
</tr>
<tr>
<td><code>isfield</code></td>
<td>判断结构体是否包含某字段</td>
</tr>
<tr>
<td><code>getfield</code></td>
<td>获取结构体某字段的值</td>
</tr>
<tr>
<td><code>setfield</code></td>
<td>为结构体中的某字段赋值</td>
</tr>
<tr>
<td><code>rmfield</code></td>
<td>删除结构体中的某字段</td>
</tr>
<tr>
<td><code>orderfields</code></td>
<td>为结构体字段排序</td>
</tr>
</tbody>
</table>
</div>
<h3 id="元胞数组-cell"><a href="#元胞数组-cell" class="headerlink" title="元胞数组(cell)"></a>元胞数组(cell)</h3><p>在MATLAB中,元胞数组是一个可以容纳不同类型元素的数据结构,类似于Python语言中的列表.</p>
<h4 id="元胞数组的基本使用"><a href="#元胞数组的基本使用" class="headerlink" title="元胞数组的基本使用"></a>元胞数组的基本使用</h4><ul>
<li><p>使用<code>&#123;&#125;</code>像定义矩阵一样定义元胞数组:</p>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203205945.png" alt="元胞数组"></p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">A &#x3D; &#123; [1 4 3; 0 5 8; 7 2 9]		&#39;Anne Smith&#39; ;...
3+7i		-pi:pi:pi&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ul>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">A(1,1)&#x3D;&#123;[1 4 3; 0 5 8; 7 2 9]&#125;;
A(1,2)&#x3D;&#123;&#39;Anne Smith&#39;&#125;;
A(2,1)&#x3D;&#123;3+7i&#125;;
A(2,2)&#x3D;&#123;-pi:pi:pi&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">A&#123;1,1&#125;&#x3D;[1 4 3; 0 5 8; 7 2 9];
A&#123;1,2&#125;&#x3D;&#39;Anne Smith&#39;;
A&#123;2,1&#125;&#x3D;3+7i;
A&#123;2,2&#125;&#x3D;-pi:pi:pi;
A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面三种方式是等价的,其中第二种方式使用<strong>单元索引</strong>赋值,而第三种方式使用<strong>内容索引</strong>赋值.</p>
<ul>
<li><p>有两种方式访问元胞数组中的数据,分别是: <strong>单元索引</strong><code>()</code>和<strong>内容索引</strong><code>&#123;&#125;</code></p>
<p>因为元胞数组的子集仍为元胞数组,在索引器内容的使用,我们有必要指明我们要访问的的是一个<strong>子元胞数组</strong>还是<strong>元胞数组对应区域中的内容</strong>.</p>
<ul>
<li><p>使用<strong>单元索引</strong><code>()</code>,我们得到的是一个<strong>子元胞数组</strong>.</p>
<ul>
<li>使用<strong>内容索引</strong><code>&#123;&#125;</code>,我们得到的是<strong>元胞数组对应区域中的内容</strong>.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="元胞数组的常用函数"><a href="#元胞数组的常用函数" class="headerlink" title="元胞数组的常用函数"></a>元胞数组的常用函数</h4><h3 id="元胞数组的常用函数-1"><a href="#元胞数组的常用函数-1" class="headerlink" title="元胞数组的常用函数"></a>元胞数组的常用函数</h3><div class="table-container">
<table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>cell</code></td>
<td>创建一个元胞数组</td>
</tr>
<tr>
<td><code>iscell</code></td>
<td>判断某变量是否为元胞数组</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><code>cell2mat</code></td>
<td>将元胞数组转为矩阵</td>
</tr>
<tr>
<td><code>cell2struct</code></td>
<td>将元胞数组转为结构体</td>
</tr>
<tr>
<td><code>mat2cell</code></td>
<td>将数组转换为指定大小元胞数组</td>
</tr>
<tr>
<td><code>num2cell</code></td>
<td>将数组转换为相同大小的元胞数组</td>
</tr>
<tr>
<td><code>struct2cell</code></td>
<td>将结构体转换为元胞数组</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td><code>celldisp</code></td>
<td>递归显示元胞数组中的内容</td>
</tr>
<tr>
<td><code>cellplot</code></td>
<td>以图像形式绘制元胞数组的结构</td>
</tr>
<tr>
<td><code>cellfun</code></td>
<td>对元胞数组的每个元胞应用某函数</td>
</tr>
</tbody>
</table>
</div>
<p>其中<code>mat2cell</code>函数可以在转换的时候指定元胞数组各元胞的尺寸.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">a &#x3D; magic(3)

b &#x3D; num2cell(a)
% 得到
% [8] [1] [6]
% [3] [5] [7]
% [4] [9] [2]

c &#x3D; mat2cell(a, [1 2], [2, 1])
% 得到
% [1x2 double] [6]
% [2x2 double] [2x1 double]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="高维元胞数组"><a href="#高维元胞数组" class="headerlink" title="高维元胞数组"></a>高维元胞数组</h4><p>一个三维的元胞数组可以有<strong>行</strong>(row),<strong>列</strong>(column),<strong>层</strong>(layer)三个维度.在对元胞数组进行索引时,优先级从高到低的顺序分别是: 行→列→层.</p>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203210656.png" alt="高维元胞数组"></p>
<p>使用<code>cat</code>函数可以在指定维度上对元胞数组进行拼接.</p>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203210809.png" alt="元胞数组的拼接"></p>
<h3 id="判断变量数据类型的函数"><a href="#判断变量数据类型的函数" class="headerlink" title="判断变量数据类型的函数"></a>判断变量数据类型的函数</h3><p>下列函数可以对变量类型进行判断:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>isinteger</code></td>
<td>判断输入参数是否为整型数数组</td>
</tr>
<tr>
<td><code>islogical</code></td>
<td>判断输入参数是否为逻辑量数组</td>
</tr>
<tr>
<td><code>isnumeric</code></td>
<td>判断输入参数是否为数值数组</td>
</tr>
<tr>
<td><code>isreal</code></td>
<td>判断输入参数是否为实数数组</td>
</tr>
<tr>
<td><code>ischar</code></td>
<td>判断输入参数是否为字符数组</td>
</tr>
<tr>
<td><code>iscell</code></td>
<td>判断输入参数是否为元胞数组</td>
</tr>
<tr>
<td><code>isfloat</code></td>
<td>判断输入数组是否为浮点数组</td>
</tr>
<tr>
<td><code>ishandle</code></td>
<td>判断输入数组是否有效的图形句柄</td>
</tr>
<tr>
<td><code>isempty</code></td>
<td>判断输入数组是否为空</td>
</tr>
<tr>
<td><code>isprime</code></td>
<td>确定哪些数组元素为质数</td>
</tr>
<tr>
<td><code>isnan</code></td>
<td>确定哪些数组元素为<code>NaN</code></td>
</tr>
<tr>
<td><code>isinf</code></td>
<td>确定哪些数组元素为<code>Inf</code></td>
</tr>
<tr>
<td><code>isequal</code></td>
<td>判断数组是否相等</td>
</tr>
</tbody>
</table>
</div>
<h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><p>支持的文件类型如下:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>文件内容</th>
<th>扩展名</th>
<th>读取文件的函数</th>
<th>写入文件的函数</th>
</tr>
</thead>
<tbody>
<tr>
<td>MATLAB数据</td>
<td><code>*.mat</code></td>
<td><code>load</code></td>
<td><code>save</code></td>
</tr>
<tr>
<td>Excel表格</td>
<td><code>*.xls</code>,<code>*.xlsx</code></td>
<td><code>xlsread</code></td>
<td><code>xlswrite</code></td>
</tr>
<tr>
<td>空格分隔的数字</td>
<td><code>*.txt</code></td>
<td><code>load</code></td>
<td><code>save</code></td>
</tr>
</tbody>
</table>
</div>
<h3 id="读写MATLAB格式的数据"><a href="#读写MATLAB格式的数据" class="headerlink" title="读写MATLAB格式的数据"></a>读写MATLAB格式的数据</h3><p>MATLAB工作区内的数据可以以<code>*.mat</code>格式保存在文件中.使用<code>save</code>函数将数据存入文件,使用<code>load</code>函数从文件中读取数据.</p>
<ul>
<li><p><code>save</code></p>
<p>函数的语法如下:</p>
<ul>
<li><code>save(filename,variables)</code>将变量<code>variables</code>以二进制形式存入文件中.</li>
<li><code>save(filename,variables,&#39;-ascii&#39;)</code>将变量<code>variables</code>以文本形式存入文件中.</li>
</ul>
</li>
<li><p><code>load</code></p>
<p>函数的语法如下:</p>
<ul>
<li><code>load(filename)</code>从二进制形式文件中读取数据.</li>
<li><code>load(filename,&#39;-ascii&#39;)</code>从文本形式文件中读取数据.</li>
</ul>
</li>
</ul>
<p>其中参数<code>filename</code>和<code>variables</code>都是字符串格式,若不指定<code>variables</code>参数,则将当前工作区内所有变量存入文件中.</p>
<blockquote>
<p>复杂的数据格式,如<code>struct</code>和<code>cell</code>,不支持以二进制格式存储.</p>
</blockquote>
<h3 id="读写Excel表格"><a href="#读写Excel表格" class="headerlink" title="读写Excel表格"></a>读写Excel表格</h3><p>使用<code>xlsread</code>和<code>xlswrite</code>函数可以读写Excel数据,语法如下:</p>
<ul>
<li><p>读取Excel文件的语法:<code>[num,txt,raw] = xlsread(filename,sheet,xlRange)</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203211325.png" alt="在这里插入图片描述"></p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">Score &#x3D; xlsread(&#39;04Score.xlsx&#39;)
Score &#x3D; xlsread(&#39;04Score.xlsx&#39;, &#39;B2:D4&#39;)
[Score Header] &#x3D; xlsread(&#39;04Score.xlsx&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>写入Excel的语法:<code>xlswrite(filename,A,sheet,xlRange)</code></p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">M &#x3D; mean(Score);
xlswrite(&#39;04Score.xlsx&#39;, M, 1, &#39;E2:E4&#39;);
xlswrite(&#39;04Score.xlsx&#39;, &#123;&#39;Mean&#39;&#125;, 1, &#39;E1&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h1 id="基础绘图"><a href="#基础绘图" class="headerlink" title="基础绘图"></a>基础绘图</h1><h2 id="图线的绘制与装饰"><a href="#图线的绘制与装饰" class="headerlink" title="图线的绘制与装饰"></a>图线的绘制与装饰</h2><h3 id="使用plot-函数绘制图线"><a href="#使用plot-函数绘制图线" class="headerlink" title="使用plot()函数绘制图线"></a>使用<code>plot()</code>函数绘制图线</h3><p>在MATLAB中,使用<code>plot()</code>函数绘制图线,其语法为:</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">plot(x,y,LineSpec)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><code>LineSpec</code>: 图线的线条设定,三个指定<strong>线型</strong>,<strong>标记符号</strong>和<strong>颜色</strong>的<strong>设定符</strong>组成一个字符串,设定符不区分先后.具体细节请参考<a href="https://www.mathworks.com/help/matlab/ref/linespec.html">官方文档</a>.</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>线型符号</th>
<th>线型设定符</th>
<th>标记</th>
<th>标记设定符</th>
<th>颜色</th>
<th>颜色设定符</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-</code></td>
<td>实线（默认）</td>
<td><code>o</code></td>
<td>圆圈</td>
<td><code>y</code></td>
<td>黄色</td>
</tr>
<tr>
<td><code>--</code></td>
<td>虚线</td>
<td><code>+</code></td>
<td>加号</td>
<td><code>m</code></td>
<td>品红色</td>
</tr>
<tr>
<td><code>:</code></td>
<td>点线</td>
<td><code>*</code></td>
<td>星号</td>
<td><code>c</code></td>
<td>青蓝色</td>
</tr>
<tr>
<td><code>-.</code></td>
<td>点划线</td>
<td><code>.</code></td>
<td>点</td>
<td><code>r</code></td>
<td>红色</td>
</tr>
<tr>
<td></td>
<td></td>
<td><code>x</code></td>
<td>叉号</td>
<td><code>g</code></td>
<td>绿色</td>
</tr>
<tr>
<td></td>
<td></td>
<td><code>s</code></td>
<td>方形</td>
<td><code>b</code></td>
<td>蓝色</td>
</tr>
<tr>
<td></td>
<td></td>
<td><code>d</code></td>
<td>菱形</td>
<td><code>w</code></td>
<td>白色</td>
</tr>
<tr>
<td></td>
<td></td>
<td><code>^</code></td>
<td>上三角</td>
<td><code>k</code></td>
<td>黑色</td>
</tr>
<tr>
<td></td>
<td></td>
<td><code>v</code></td>
<td>下三角</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td><code>&gt;</code></td>
<td>右三角</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td><code>&lt;</code></td>
<td>左三角</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td><code>p</code></td>
<td>五角形</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td><code>h</code></td>
<td>六角形</td>
<td></td>
</tr>
</tbody>
</table>
</div>
<p>注：Python中的matplotlib的画图方式和这里几乎一样</p>
<h3 id="装饰图线"><a href="#装饰图线" class="headerlink" title="装饰图线"></a>装饰图线</h3><ul>
<li><p>使用<code>legend()</code>函数为图片增加图例</p>
<p>  使用<code>legend(label1, ..., labelN)</code>函数可以为图片添加图例.</p>
  <pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x&#x3D;0:0.5:4*pi;
y&#x3D;sin(x); h&#x3D;cos(x); w&#x3D;1.&#x2F;(1+exp(-x)); g&#x3D;(1&#x2F;(2*pi*2)^0.5).*exp((-1.*(x-2*pi).^2).&#x2F;(2*2^2));
plot(x,y,&#39;bd-&#39; ,x,h,&#39;gp:&#39;,x,w,&#39;ro-&#39; ,x,g,&#39;c^-&#39;);		% 绘制多条图线
legend(&#39;sin(x)&#39;,&#39;cos(x)&#39;,&#39;Sigmoid&#39;,&#39;Gauss function&#39;);	% 添加图例<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>  <img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203213101.jpeg" alt="使用legend增加图例"></p>
</li>
<li><p>使用<code>title()</code>和<code>*label()</code>为图片增加标题和标签</p>
  <pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x &#x3D; 0:0.1:2*pi; y1 &#x3D; sin(x); y2 &#x3D; exp(-x);
plot(x, y1, &#39;--*&#39;, x, y2, &#39;:o&#39;);
xlabel(&#39;t &#x3D; 0 to 2\pi&#39;);
ylabel(&#39;values of sin(t) and e^&#123;-x&#125;&#39;)
title(&#39;Function Plots of sin(t) and e^&#123;-x&#125;&#39;);
legend(&#39;sin(t)&#39;,&#39;e^&#123;-x&#125;&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  <img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203213130.jpeg" alt="使用title()和*label()为图片增加标题和标签"></p>
</li>
</ul>
<ul>
<li><p>使用<code>text()</code>和<code>annotation()</code>为图片增加注解</p>
  <pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x &#x3D; linspace(0,3); y &#x3D; x.^2.*sin(x); plot(x,y);
line([2,2],[0,2^2*sin(2)]);
str &#x3D; &#39;$$ \int_&#123;0&#125;^&#123;2&#125; x^2\sin(x) dx $$&#39;;
text(0.25,2.5,str,&#39;Interpreter&#39;,&#39;latex&#39;);
annotation(&#39;arrow&#39;,&#39;X&#39;,[0.32,0.5],&#39;Y&#39;,[0.6,0.4]); <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  <img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203213259.jpeg" alt="使用text()和annotation()为图片增加注解"></p>
</li>
</ul>
<h3 id="控制坐标轴-边框与网格"><a href="#控制坐标轴-边框与网格" class="headerlink" title="控制坐标轴,边框与网格"></a>控制坐标轴,边框与网格</h3><div class="table-container">
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>grid on/off</code></td>
<td>设置网格可见性</td>
</tr>
<tr>
<td><code>box on/off</code></td>
<td>设置边框可见性</td>
</tr>
<tr>
<td><code>axis on/off</code></td>
<td>设置坐标轴可见性</td>
</tr>
<tr>
<td><code>axis normal</code></td>
<td>还原默认行为,将图框纵横比模式和数据纵横比模式的属性设置为自动</td>
</tr>
<tr>
<td><code>axis square</code></td>
<td>使用相同长度的坐标轴线,相应调整数据单位之间的增量</td>
</tr>
<tr>
<td><code>axis equal</code></td>
<td>沿每个坐标轴使用相同的数据单位长度</td>
</tr>
<tr>
<td><code>axis tight</code></td>
<td>将坐标轴范围设置为等同于数据范围,使轴框紧密围绕数据</td>
</tr>
</tbody>
</table>
</div>
<p>下面的例子演示<code>axis</code>命令的效果:</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">t &#x3D; 0:0.1:2*pi; x &#x3D; 3*cos(t); y &#x3D; sin(t);
subplot(2, 2, 1); plot(x, y); axis normal
subplot(2, 2, 2); plot(x, y); axis square
subplot(2, 2, 3); plot(x, y); axis equal
subplot(2, 2, 4); plot(x, y); axis equal tight<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203213545.png" alt="axis命令的效果"></p>
<h2 id="绘制多条图线"><a href="#绘制多条图线" class="headerlink" title="绘制多条图线"></a>绘制多条图线</h2><h3 id="在一个图像上绘制多条图线"><a href="#在一个图像上绘制多条图线" class="headerlink" title="在一个图像上绘制多条图线"></a>在一个图像上绘制多条图线</h3><p>默认情况下,每次执行<code>plot()</code>函数都会清除上一次绘图的结果,多次执行<code>plot()</code>只会保留最后一次绘制的图形.</p>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203213755.jpeg" alt="多次执行plot只会保留最后一次绘制的图形"></p>
<p>我们可以使用<code>hold on</code>和<code>hold off</code>命令控制绘图区域的刷新,使得多个绘图结果同时保留在绘图区域中.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">hold on		% 提起画笔,开始绘制一组图片			
plot(cos(0:pi&#x2F;20:2*pi));
plot(sin(0:pi&#x2F;20:2*pi));
hold off	% 放下画笔,该组图片绘制完毕<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203213800.jpeg" alt="使用hold命令控制绘图区域的刷新"></p>
<h3 id="在一个窗口内绘制多个图像"><a href="#在一个窗口内绘制多个图像" class="headerlink" title="在一个窗口内绘制多个图像"></a>在一个窗口内绘制多个图像</h3><p>subplot</p>
<h2 id="图形对象的操作"><a href="#图形对象的操作" class="headerlink" title="图形对象的操作"></a>图形对象的操作</h2><p>在MATLAB中,图形都是以对象的形式储存在内存中,通过获取其图形句柄可以对其进行操作.</p>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203214106.png" alt="在MATLAB中图形都是以对象的形式储存的"></p>
<h3 id="获取图形句柄"><a href="#获取图形句柄" class="headerlink" title="获取图形句柄"></a>获取图形句柄</h3><p>图形句柄本质上就是一个浮点数,可以唯一确定一个图形对象.下面几个函数用于获取图形句柄.</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Function</th>
<th>Purpose</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>gca()</code></td>
<td>获取当前坐标轴的句柄</td>
</tr>
<tr>
<td><code>gcf()</code></td>
<td>获取当前图像的句柄</td>
</tr>
<tr>
<td><code>allchild(handle_list)</code></td>
<td>获取该对象的所有子对象的句柄</td>
</tr>
<tr>
<td><code>ancestor(h,type)</code></td>
<td>获取对象最近的<code>type</code>类型的祖先节点</td>
</tr>
<tr>
<td><code>delete(h)</code></td>
<td>删除某对象</td>
</tr>
<tr>
<td><code>findall(handle_list)</code></td>
<td>获取该对象的后代对象</td>
</tr>
</tbody>
</table>
</div>
<p>所有绘图函数也会返回图形对象的句柄.</p>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203214204.png" alt="绘图函数也会返回图形对象的句柄"></p>
<h3 id="通过图形句柄操作图形属性"><a href="#通过图形句柄操作图形属性" class="headerlink" title="通过图形句柄操作图形属性"></a>通过图形句柄操作图形属性</h3><p>使用<code>get()</code>和<code>set()</code>函数可以对图形对象的属性进行访问和修改.访问<a href="http://www.mathworks.com/help/matlab/ref/figure-properties.html">官方文档</a>可以查看所有图形对象的属性.</p>
<ul>
<li><p><code>set(H,Name,Value)</code></p>
</li>
<li><p><code>v = get(h,propertyName)</code></p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203214258.png" alt="图形对象的属性"></p>
<p>下面两个例子演示使用图形句柄操作图形对象:</p>
<ol>
<li><p>改变坐标轴属性:</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">% 第一张图
set(gca, &#39;FontSize&#39;, 25);

% 第二张图
set(gca, &#39;XTick&#39;, 0:pi&#x2F;2:2*pi);
set(gca, &#39;XTickLabel&#39;, 0:90:360);

% 第三张图
set(gca, &#39;FontName&#39;, &#39;symbol&#39;);
set(gca, &#39;XTickLabel&#39;, &#123;&#39;0&#39;, &#39;p&#x2F;2&#39;, &#39;p&#39;, &#39;3p&#x2F;2&#39;, &#39;2p&#39;&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203214348.jpeg" alt="句柄操作实例1"></p>
</li>
<li><p>改变线型</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">h &#x3D; plot(x,y); 
set(h, &#39;LineStyle&#39;,&#39;-.&#39;, ...
	&#39;LineWidth&#39;, 7.0, ...
	&#39;Color&#39;, &#39;g&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203214348.jpeg" alt="句柄操作实例2"></p>
</li>
</ol>
<h3 id="将图形保存到文件"><a href="#将图形保存到文件" class="headerlink" title="将图形保存到文件"></a>将图形保存到文件</h3><p>使用<code>saveas(fig,filename)</code>命令可以将图形对象保存到文件中,其中<code>fig</code>为图形句柄,<code>filname</code>为文件名.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">saveas(gcf, &#39;myfigure.png&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h1 id="绘制高级图表"><a href="#绘制高级图表" class="headerlink" title="绘制高级图表"></a>绘制高级图表</h1><h2 id="二维图表"><a href="#二维图表" class="headerlink" title="二维图表"></a>二维图表</h2><h3 id="折线图"><a href="#折线图" class="headerlink" title="折线图"></a>折线图</h3><div class="table-container">
<table>
<thead>
<tr>
<th>函数</th>
<th>图形描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>loglog()</code></td>
<td>x轴和y轴都取对数坐标</td>
</tr>
<tr>
<td><code>semilogx()</code></td>
<td>x轴取对数坐标,y轴取线性坐标</td>
</tr>
<tr>
<td><code>semilogy()</code></td>
<td>x轴取线性坐标,y轴取对数坐标</td>
</tr>
<tr>
<td><code>plotyy()</code></td>
<td>带有两套y坐标轴的线性坐标系</td>
</tr>
<tr>
<td><code>ploar()</code></td>
<td>极坐标系</td>
</tr>
</tbody>
</table>
</div>
<h4 id="对数坐标系图线"><a href="#对数坐标系图线" class="headerlink" title="对数坐标系图线"></a>对数坐标系图线</h4><p>下面例子演示对数坐标系图线:</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x &#x3D; logspace(-1,1,100); y &#x3D; x.^2;

subplot(2,2,1);
plot(x,y);
title(&#39;Plot&#39;);

subplot(2,2,2);
semilogx(x,y);
title(&#39;Semilogx&#39;);

subplot(2,2,3);
semilogy(x,y);
title(&#39;Semilogy&#39;);

subplot(2,2,4);
loglog(x, y);
title(&#39;Loglog&#39;); <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203215844.jpeg" alt="对数坐标系"></p>
<p>对数坐标系可以加上<strong>网格</strong>,以区分线性坐标系与对数坐标系.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">set(gca, &#39;XGrid&#39;,&#39;on&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203220009.jpeg" alt="对数坐标加网格的重要性"></p>
<h4 id="双y轴图线"><a href="#双y轴图线" class="headerlink" title="双y轴图线"></a>双y轴图线</h4><p><code>plotyy()</code>的返回值为数组<code>[ax,hlines1,hlines2]</code>,其中:</p>
<ul>
<li><code>ax</code>为一个向量,保存两个坐标系对象的句柄.</li>
<li><code>hlines1</code>和<code>hlines2</code>分别为两个图线的句柄.</li>
</ul>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x &#x3D; 0:0.01:20;
y1 &#x3D; 200*exp(-0.05*x).*sin(x);
y2 &#x3D; 0.8*exp(-0.5*x).*sin(10*x);
[AX,H1,H2] &#x3D; plotyy(x,y1,x,y2);
set(get(AX(1),&#39;Ylabel&#39;),&#39;String&#39;,&#39;Left Y-axis&#39;)
set(get(AX(2),&#39;Ylabel&#39;),&#39;String&#39;,&#39;Right Y-axis&#39;)
title(&#39;Labeling plotyy&#39;);
set(H1,&#39;LineStyle&#39;,&#39;--&#39;); set(H2,&#39;LineStyle&#39;,&#39;:&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203220101.jpeg" alt="双y轴图线"></p>
<h3 id="统计图表"><a href="#统计图表" class="headerlink" title="统计图表"></a>统计图表</h3><div class="table-container">
<table>
<thead>
<tr>
<th>函数</th>
<th>图形描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>hist()</code></td>
<td>直方图</td>
</tr>
<tr>
<td><code>bar()</code></td>
<td>二维柱状图</td>
</tr>
<tr>
<td><code>pie()</code></td>
<td>饼图</td>
</tr>
<tr>
<td><code>stairs()</code></td>
<td>阶梯图</td>
</tr>
<tr>
<td><code>stem()</code></td>
<td>针状图</td>
</tr>
</tbody>
</table>
</div>
<h4 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h4><p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203220732.jpeg" alt="直方图"></p>
<h4 id="柱状图"><a href="#柱状图" class="headerlink" title="柱状图"></a>柱状图</h4><ul>
<li><p>使用<code>bar()</code>和<code>bar3()</code>函数分别绘制二维和三维直方图</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x &#x3D; [1 2 5 4 8]; y &#x3D; [x;1:5];
subplot(1,3,1); bar(x); title(&#39;A bargraph of vector x&#39;);
subplot(1,3,2); bar(y); title(&#39;A bargraph of vector y&#39;);
subplot(1,3,3); bar3(y); title(&#39;A 3D bargraph&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/20191116210529183.jpg" alt="在这里插入图片描述"></p>
<blockquote>
<p><code>hist</code>主要用于查看变量的频率分布,而<code>bar</code>主要用于查看分立的量的统计结果.</p>
</blockquote>
</li>
<li><p>使用<code>barh()</code>函数可以绘制纵向排列的柱状图</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x &#x3D; [1 2 5 4 8];
y &#x3D; [x;1:5];
barh(y);
title(&#39;Horizontal&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/20191116212011255.jpg" alt="纵向排列的柱状图"></p>
</li>
<li><p>向<code>bar()</code>传入<code>&#39;stack&#39;</code>参数可以让柱状图以堆栈的形式画出.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x &#x3D; [1 2 5 4 8];
y &#x3D; [x;1:5];
bar(y,&#39;stacked&#39;);
title(&#39;Stacked&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203220924.jpeg" alt="堆栈式柱状图"></p>
</li>
</ul>
<h4 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h4><p>使用<code>pie()</code>和<code>pie3()</code>可以绘制二维和三维的饼图.向其传入一个bool向量表示每一部分扇区是否偏移.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">a &#x3D; [10 5 20 30];
subplot(1,3,1); pie(a);
subplot(1,3,2); pie(a, [0,0,0,1]);
subplot(1,3,3); pie3(a, [0,0,0,1]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203221246.jpeg" alt="饼图"></p>
<h4 id="阶梯图和针状图-绘制离散数字序列"><a href="#阶梯图和针状图-绘制离散数字序列" class="headerlink" title="阶梯图和针状图:绘制离散数字序列"></a>阶梯图和针状图:绘制离散数字序列</h4><p><code>stairs()</code>和<code>stem()</code>函数分别用来绘制阶梯图和针状图,用于表示离散数字序列.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x &#x3D; linspace(0, 4*pi, 40); y &#x3D; sin(x);
subplot(1,2,1); stairs(y);
subplot(1,2,2); stem(y);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203221311.jpeg" alt="在这里插入图片描述"></p>
<h2 id="三维图表"><a href="#三维图表" class="headerlink" title="三维图表"></a>三维图表</h2><h4 id="二维图转为三维图"><a href="#二维图转为三维图" class="headerlink" title="二维图转为三维图"></a>二维图转为三维图</h4><p>在MATLAB中,所有的图都是三维图,二维图只不过是三维图的一个投影.点击图形窗口的<code>Rotate 3D</code>按钮,即可通过鼠标拖拽查看该图形的三维视图.</p>
<h4 id="三维图转换为二维图"><a href="#三维图转换为二维图" class="headerlink" title="三维图转换为二维图"></a>三维图转换为二维图</h4><p>使用<code>imagesc()</code>函数可以将三维图转换为二维俯视图,通过点的颜色指示高度.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">[x, y] &#x3D; meshgrid(-3:.2:3,-3:.2:3); z &#x3D; x.^2 + x.*y + y.^2; 

subplot(1, 2, 1)
surf(x, y, z); 

subplot(1, 2, 2)
imagesc(z);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203221702.jpeg" alt="在这里插入图片描述"></p>
<p>使用<code>colorbar</code>命令可以在生成的二维图上增加颜色与高度间对应关系的图例,使用<code>colormap</code>命令可以改变配色方案.具体细节请参考<a href="https://ww2.mathworks.cn/help/matlab/ref/colormap.html?lang=en">官方文档</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203221742.png" alt="在这里插入图片描述"></p>
<h3 id="三维图的绘制"><a href="#三维图的绘制" class="headerlink" title="三维图的绘制"></a>三维图的绘制</h3><h4 id="绘制三维图前的准备工作"><a href="#绘制三维图前的准备工作" class="headerlink" title="绘制三维图前的准备工作"></a>绘制三维图前的准备工作</h4><ul>
<li>使用<code>meshgrid()</code>生成二维网格</li>
</ul>
<p><code>meshgrid()</code>函数将输入的两个向量进行相应的行扩充和列扩充以得到两个增广矩阵,对该矩阵可应用二元函数.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x &#x3D; -2:1:2;
y &#x3D; -2:1:2;
[X,Y] &#x3D; meshgrid(x,y)
Z &#x3D; X.^2 + Y.^2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="绘制三维线"><a href="#绘制三维线" class="headerlink" title="绘制三维线"></a>绘制三维线</h4><p>使用<code>plot3()</code>函数即可绘制三维面,输入应为三个向量.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x&#x3D;0:0.1:3*pi; z1&#x3D;sin(x); z2&#x3D;sin(2.*x); z3&#x3D;sin(3.*x);
y1&#x3D;zeros(size(x)); y3&#x3D;ones(size(x)); y2&#x3D;y3.&#x2F;2;
plot3(x,y1,z1,&#39;r&#39;,x,y2,z2,&#39;b&#39;,x,y3,z3,&#39;g&#39;); grid on;
xlabel(&#39;x-axis&#39;); ylabel(&#39;y-axis&#39;); zlabel(&#39;z-axis&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203221905.jpeg" alt="三维曲线"></p>
<h4 id="绘制三维面"><a href="#绘制三维面" class="headerlink" title="绘制三维面"></a>绘制三维面</h4><p>使用<code>mesh()</code>和<code>surf()</code>命令可以绘制三维面,前者不会填充网格而后者会.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x &#x3D; -3.5:0.2:3.5; y &#x3D; -3.5:0.2:3.5;
[X,Y] &#x3D; meshgrid(x,y);
Z &#x3D; X.*exp(-X.^2-Y.^2);
subplot(1,2,1); mesh(X,Y,Z);
subplot(1,2,2); surf(X,Y,Z);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203221954.png" alt="在这里插入图片描述"></p>
<h4 id="绘制三维图形的等高线"><a href="#绘制三维图形的等高线" class="headerlink" title="绘制三维图形的等高线"></a>绘制三维图形的等高线</h4><p>使用<code>contour()</code>和<code>contourf()</code>函数可以绘制三维图形的等高线,前者不会填充网格而后者会.</p>
<p>向<code>contour()</code>函数传入参数或操作图形句柄可以改变图像的细节:</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x &#x3D; -3.5:0.2:3.5; y &#x3D; -3.5:0.2:3.5;
[X,Y] &#x3D; meshgrid(x,y); Z &#x3D; X.*exp(-X.^2-Y.^2);

subplot(1,3,1); contour(Z,[-.45:.05:.45]); axis square;
subplot(1,3,2); [C,h] &#x3D; contour(Z); clabel(C,h); axis square;
subplot(1,3,3); contourf(Z); axis square;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203222505.jpeg" alt="在这里插入图片描述"></p>
<p>使用<code>meshc()</code>和<code>surfc()</code>函数可以在绘制三维图形时绘制其等高线.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x &#x3D; -3.5:0.2:3.5; y &#x3D; -3.5:0.2:3.5;
[X,Y] &#x3D; meshgrid(x,y); Z &#x3D; X.*exp(-X.^2-Y.^2);

subplot(1,2,1); meshc(X,Y,Z);
subplot(1,2,2); surfc(X,Y,Z);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203222646.jpeg" alt="在这里插入图片描述"></p>
<h4 id="绘制三维体"><a href="#绘制三维体" class="headerlink" title="绘制三维体"></a>绘制三维体</h4><p>使用<code>patch()</code>函数可以绘制三维体.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">v &#x3D; [0 0 0; 1 0 0 ; 1 1 0; 0 1 0; 0.25 0.25 1; 0.75 0.25 1; 0.75 0.75 1; 0.25 0.75 1];
f &#x3D; [1 2 3 4; 5 6 7 8; 1 2 6 5; 2 3 7 6; 3 4 8 7; 4 1 5 8];

subplot(1,2,1); 
patch(&#39;Vertices&#39;, v, &#39;Faces&#39;, f, &#39;FaceVertexCData&#39;, hsv(6), &#39;FaceColor&#39;, &#39;flat&#39;);
view(3); axis square tight; grid on;

subplot(1,2,2); 
patch(&#39;Vertices&#39;, v, &#39;Faces&#39;, f, &#39;FaceVertexCData&#39;, hsv(8), &#39;FaceColor&#39;,&#39;interp&#39;);
view(3); axis square tight; grid on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203222800.jpeg" alt="在这里插入图片描述"></p>
<h3 id="三维图的视角与打光"><a href="#三维图的视角与打光" class="headerlink" title="三维图的视角与打光"></a>三维图的视角与打光</h3><h4 id="调整视角"><a href="#调整视角" class="headerlink" title="调整视角"></a>调整视角</h4><p>使用<code>view()</code>函数可以调整视角,<code>view()</code>函数接受两个浮点型参数,分别表示两个方位角<code>azimuth</code>和<code>elevation</code>.</p>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203222959.png" alt="在这里插入图片描述"></p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">sphere(50); shading flat;
material shiny;
axis vis3d off;
view(-45,20);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220203223018.png" alt="image-20220203223018744"></p>
<h1 id="符号运算"><a href="#符号运算" class="headerlink" title="符号运算"></a>符号运算</h1><h2 id="创建符号变量"><a href="#创建符号变量" class="headerlink" title="创建符号变量"></a>创建符号变量</h2><h3 id="创建符号数字"><a href="#创建符号数字" class="headerlink" title="创建符号数字"></a>创建符号数字</h3><p>使用<code>sym</code>函数可以创建符号数字.使用符号数字可以精确地保存无理数,不会产生误差.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">sym(1&#x2F;3)	% 得到 1&#x2F;3
1&#x2F;3			% 得到 0.3333<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>将无理数保存为符号数字可以避免将其转换为浮点数的误差:</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">sin(sym(pi))	% 得到 0
sin(pi)			% 得到 1.2246e-16<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="创建符号变量-1"><a href="#创建符号变量-1" class="headerlink" title="创建符号变量"></a>创建符号变量</h3><p>使用<code>sym</code>和<code>syms</code>可以创建符号变量,区别在于:</p>
<ol>
<li><p><code>sym</code>每次只能创建一个符号变量,而<code>syms</code>一次可以创建多个符号变量.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">syms a		% sym命令只能创建一个符号变量
syms b c d	% syms命令可以创建多个符号变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>若所指定的符号变量已存在,<code>sym</code>不会保留其原有的值,而<code>syms</code>会清空其值.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">syms x y
f &#x3D; x+y;	% 隐式创建符号变量f
sym f		% 不清空变量f原有的值,即f &#x3D; x + y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">syms x y
f &#x3D; x+y;	% 隐式创建符号变量f
syms f		% 清空变量f原有的值,即f &#x3D; f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>使用<code>sym</code>可以创建符号变量矩阵.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">A &#x3D; sym(&#39;a&#39;, [2 5])	% 创建一个2*5的符号变量矩阵
whos<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>得到的输出如下:</p>
<pre class="line-numbers language-none"><code class="language-none">A &#x3D;
[ a1_1, a1_2, a1_3, a1_4, a1_5]
[ a2_1, a2_2, a2_3, a2_4, a2_5]
 
 
  Name      Size            Bytes  Class    Attributes
  A         2x5               112  sym      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>联合使用<code>sym</code>和<code>syms</code>可以快速创建一系列带下标的变量</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">clear all
syms(sym(&#39;a&#39;, [1 5]))
whos<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>得到输出如下:</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">Name      Size            Bytes  Class    Attributes
a1        1x1                 8  sym                
a2        1x1                 8  sym                
a3        1x1                 8  sym                
a4        1x1                 8  sym                
a5        1x1                 8  sym                <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h2 id="符号运算-1"><a href="#符号运算-1" class="headerlink" title="符号运算"></a>符号运算</h2><h3 id="符号表达式的化简与代入"><a href="#符号表达式的化简与代入" class="headerlink" title="符号表达式的化简与代入"></a>符号表达式的化简与代入</h3><h4 id="符号表达式的化简"><a href="#符号表达式的化简" class="headerlink" title="符号表达式的化简"></a>符号表达式的化简</h4><p>使用<code>simplify()</code>函数可以化简符号表达式.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">syms x a b c

simplify(sin(x)^2 + cos(x)^2);		% 得到 1
simplify(exp(c*log(sqrt(a+b))));	% 得到 (a + b)^(c&#x2F;2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>表达式化简的标准是不确定的,下面三个函数分别按照不同标准化简表达式:</p>
<ul>
<li><p><code>expand()</code>函数可以展开表达式</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">syms x

f &#x3D; (x ^2- 1)*(x^4 + x^3 + x^2 + x + 1)*(x^4 - x^3 + x^2 - x + 1);
expand(f);		% 得到 x^10 - 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>factor()</code>函数可以分解因式</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">syms x

g &#x3D; x^3 + 6*x^2 + 11*x + 6;
factor(g);		% 得到 (x + 3)*(x + 2)*(x + 1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>horner()</code>函数可以将多项式变为嵌套形式</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">syms x

h &#x3D; x^5 + x^4 + x^3 + x^2 + x;
horner(h);		% 得到 x*(x*(x*(x*(x + 1) + 1) + 1) + 1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h4 id="符号表达式的代入"><a href="#符号表达式的代入" class="headerlink" title="符号表达式的代入"></a>符号表达式的代入</h4><p>使用<code>sub(expr, old, new)</code>函数可以将符号表达式<code>expr</code>中的<code>old</code>替换为<code>new</code>.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">syms x y

f &#x3D; x^2*y + 5*x*sqrt(y);
subs(f, x, 3);	% 得到 9*y + 15*y^(1&#x2F;2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="求方程的解析解"><a href="#求方程的解析解" class="headerlink" title="求方程的解析解"></a>求方程的解析解</h3><p>使用<code>solve(eqn,var)</code>和<code>solve(eqns,vars)</code>可以求取方程式的解析解.</p>
<h4 id="解单变量方程"><a href="#解单变量方程" class="headerlink" title="解单变量方程"></a>解单变量方程</h4><p>使用<code>==</code>定义一个方程,并对其调用<code>solve</code>函数求解.（若不指定<code>==</code>符号右边的值,则默认等式右边为0.）</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">syms x

eqn &#x3D; x^3 - 6*x^2 &#x3D;&#x3D; 6 - 11*x;
solve(eqn);		% 得到 [1 2 3]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="解多变量方程"><a href="#解多变量方程" class="headerlink" title="解多变量方程"></a>解多变量方程</h4><p>对于多变量方程,我们需要指定针对哪个变量进行求解.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">syms x y

eqn &#x3D; [6*x^2 - 6*x^2*y + x*y^2 - x*y + y^3 - y^2 &#x3D;&#x3D; 0];
solve(eqn, y);	% 得到 [1, 2*x, -3*x]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="解方程组"><a href="#解方程组" class="headerlink" title="解方程组"></a>解方程组</h4><p>向<code>solve()</code>函数传入方程组可以解方程.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">syms u v

eqns &#x3D; [2*u + v &#x3D;&#x3D; 0, u - v &#x3D;&#x3D; 1];
S &#x3D; solve(eqns,[u v]);	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以通过变量名索引方程的解,并可以将该解代入其他表达式中.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">S.u;				% 得到 1&#x2F;3
S.v;				% 得到 -2&#x2F;3
subs(3*v + u, S);	% 得到 -3&#x2F;5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h3 id="符号微积分运算"><a href="#符号微积分运算" class="headerlink" title="符号微积分运算"></a>符号微积分运算</h3><h4 id="求极限"><a href="#求极限" class="headerlink" title="求极限"></a>求极限</h4><p>使用<code>limit(expr, var, a)</code>函数可以求取符号表达式<code>expr</code>在变量<code>var</code>趋近于<code>a</code>时的极限,添加参数<code>&#39;left&#39;</code>或<code>&#39;right&#39;</code>可以指定左极限或右极限.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">syms x;
expr &#x3D; 1&#x2F;x;

limit(expr,x,0);			% 得到NaN
limit(expr,x,0,&#39;left&#39;);		% 得到-Inf
limit(expr,x,0,&#39;right&#39;);	% 得到Inf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="微分"><a href="#微分" class="headerlink" title="微分"></a>微分</h4><p>使用<code>diff(expr, var, n)</code>函数可以求取符号表达式<code>expr</code>对变量<code>var</code>的<code>n</code>阶微分.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">syms a b c x;
expr &#x3D; a*x^2 + b*x + c;

diff(expr, a);		% 得到 x^2
diff(expr, b);		% 得到 x
diff(expr, x);		% 得到 b + 2*a*x
diff(expr, x, 2);	% 得到 2*a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="积分"><a href="#积分" class="headerlink" title="积分"></a>积分</h4><p>使用<code>int(expr, var)</code>函数可以求取符号表达式<code>expr</code>对变量<code>var</code>的不定积分.使用<code>int(expr, var, [a, b])</code>函数可以指定上下限求定积分,<code>a</code>和<code>b</code>可以是符号表达式.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">syms x a b
expr &#x3D; -2*x&#x2F;(1+x^2)^2;

int(expr, x);			% 得到 1&#x2F;(x^2 + 1)
int(expr, x, [1, 2]);	% 得到 -0.3
int(expr, x, [1, Inf]);	% 得到 -0.5
int(expr, x, [a, b]);	% 得到 1&#x2F;(b^2 + 1) - 1&#x2F;(a^2 + 1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对于一些函数,MATLAB不能求出其积分,这时MATLAB会返回一个未解析(unsolved)的积分形式.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">syms x
int(sin(sinh(x)));	% 一个无解的积分,MATLAB返回 int(sin(sinh(x)),<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="级数求和"><a href="#级数求和" class="headerlink" title="级数求和"></a>级数求和</h4><p>使用<code>symsum(expr, k, [a b])</code>计算级数<code>expr</code>的索引<code>k</code>从<code>a</code>到<code>b</code>的加和.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">syms k x

symsum(k^2, k)			% 得到 k^3&#x2F;3 - k^2&#x2F;2 + k&#x2F;6
symsum(k^2, k, [0 10])	% 得到 385
symsum(x^k&#x2F;factorial(k),k,1,Inf)	% 得到 exp(x) - 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="泰勒展开"><a href="#泰勒展开" class="headerlink" title="泰勒展开"></a>泰勒展开</h4><p>使用<code>taylor(expr,var,a)</code>计算表达式<code>expr</code>在<code>var=a</code>处的泰勒级数.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">syms x

taylor(exp(x))	% 得到 x^5&#x2F;120 + x^4&#x2F;24 + x^3&#x2F;6 + x^2&#x2F;2 + x + 1
taylor(sin(x))	% 得到 x^5&#x2F;120 - x^3&#x2F;6 + x
taylor(cos(x))	% 得到 x^4&#x2F;24 - x^2&#x2F;2 + 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="绘制图像"><a href="#绘制图像" class="headerlink" title="绘制图像"></a>绘制图像</h2><p>可以对符号表达式绘制图像,常用的绘图函数如下:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>fplot()</code></td>
<td>绘制符号表达式的二维线图像</td>
</tr>
<tr>
<td><code>fplot3()</code></td>
<td>绘制符号表达式的三维线图像</td>
</tr>
<tr>
<td><code>ezpolar()</code></td>
<td>绘制符号表达式的极坐标线图像</td>
</tr>
<tr>
<td><code>fmesh()</code></td>
<td>绘制网状面图像</td>
</tr>
<tr>
<td><code>fsurf()</code></td>
<td>绘制带颜色的面图像</td>
</tr>
<tr>
<td><code>fcontour()</code></td>
<td>绘制轮廓图像</td>
</tr>
<tr>
<td><code>fimplicit()</code></td>
<td>绘制隐含函数关系的图像</td>
</tr>
</tbody>
</table>
</div>
<ol>
<li><p>下面例子展示二维和三维线图像的绘制</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">subplot(1, 2, 1)
syms x
f &#x3D; x^3 - 6*x^2 + 11*x - 6;
fplot(f, x)

subplot(1, 2, 2)
syms t
fplot3(t^2*sin(10*t), t^2*cos(10*t), t)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/20191123174049841.png" alt="在这里插入图片描述"></p>
</li>
<li><p>下面例子演示三维面的绘制</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">syms x y
fsurf(x^2 + y^2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/20191123194055609.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L25jZXB1X0NoZW4=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>下面例子演示隐含函数关系图像的绘制</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">syms x y
eqn &#x3D; (x^2 + y^2)^4 &#x3D;&#x3D; (x^2 - y^2)^2;
fimplicit(eqn, [-1 1])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/20191123174144464.png" alt="在这里插入图片描述"></p>
</li>
</ol>
<h1 id="数值计算"><a href="#数值计算" class="headerlink" title="数值计算"></a>数值计算</h1><h2 id="多项式的数值运算"><a href="#多项式的数值运算" class="headerlink" title="多项式的数值运算"></a>多项式的数值运算</h2><h3 id="使用MATLAB表示多项式"><a href="#使用MATLAB表示多项式" class="headerlink" title="使用MATLAB表示多项式"></a>使用MATLAB表示多项式</h3><h4 id="使用向量表示多项式"><a href="#使用向量表示多项式" class="headerlink" title="使用向量表示多项式"></a>使用向量表示多项式</h4><p>在MATLAB中,多项式可以用向量表示,向量中的元素为多项式的系数(降幂排序):第一位为多项式最高次项系数,最后一位为常数项.</p>
<p>例如多项式:<br>f(x) = x^3 - 2x - 5f(x)=x3−2x−5</p>
<p>可以用向量<code>p = [1 0 -2 -5]</code>表示.</p>
<h4 id="多项式求值-polyval"><a href="#多项式求值-polyval" class="headerlink" title="多项式求值:polyval()"></a>多项式求值:<code>polyval()</code></h4><p>使用<code>polyval(p, x)</code>可以计算多项式<code>p</code>在<code>x</code>的每个点处的值.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">a &#x3D; [9,-5,3,7]; x &#x3D; -2:0.01:5;
f &#x3D; polyval(a,x);
plot(x,f);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220204115820.jpeg" alt="在这里插入图片描述"></p>
<h4 id="多项式的乘法-conv"><a href="#多项式的乘法-conv" class="headerlink" title="多项式的乘法:conv()"></a>多项式的乘法:<code>conv()</code></h4><p>使用<code>conv(p1, p2)</code>函数可以对两个向量<code>p1</code>和<code>p2</code>进行卷积相乘,用于计算多项式的乘法.</p>
<p>例如多项式:<br>f(x) = (x^2+1) (2x+7)f(x)=(x2+1)(2x+7)</p>
<p>可以使用<code>conv()</code>函数得到展开后的多项式:</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">p &#x3D; conv([1 0 1], [2 7])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>得到<code>p = [2 7 2 7]</code>.</p>
<h3 id="多项式的数值运算-1"><a href="#多项式的数值运算-1" class="headerlink" title="多项式的数值运算"></a>多项式的数值运算</h3><h4 id="多项式的因式分解-roots"><a href="#多项式的因式分解-roots" class="headerlink" title="多项式的因式分解:roots()"></a>多项式的因式分解:<code>roots()</code></h4><p>使用<code>roots(p)</code>函数可以对多项式<code>p</code>进行因式分解,即求表达式值为0的根.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">p &#x3D; roots([1 -3.5 2.75 2.125 -3.875 1.25])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>得到<code>p = [2 -1, 1+0.5i, 1-0.5i, 0.5]</code>,表示x^5 -3.5 x^4 +2.75 x^3 + 2.125 x^2 + -3.875 x+1.25 = (x-2)(x+1)(x-1-0.5i)(x-1+0.5i)(x-0.5)x5−3.5x4+2.75x3+2.125x2+−3.875x+1.25=(x−2)(x+1)(x−1−0.5i)(x−1+0.5i)(x−0.5).</p>
<h4 id="多项式的微分-polyder"><a href="#多项式的微分-polyder" class="headerlink" title="多项式的微分:polyder()"></a>多项式的微分:<code>polyder()</code></h4><p>使用<code>polyder(p)</code>函数可以计算多项式的导数.</p>
<p>例如对下面多项式求导:<br>f(x) = 5x^4 - 2x^2 + 1f(x)=5x4−2x2+1</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">p &#x3D; polyder([5 0 -2 0 1]);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>得到<code>p = [20 0 -4 0]</code>,表示计算得到导数f’(x) = 20 x^3 - 4xf′(x)=20x3−4x.</p>
<h4 id="多项式的积分-polyint"><a href="#多项式的积分-polyint" class="headerlink" title="多项式的积分:polyint()"></a>多项式的积分:<code>polyint()</code></h4><p>使用<code>polyint(p, k)</code>函数可以计算多项式<code>p</code>的积分,积分结果的常数项设为<code>k</code>.</p>
<p>例如对下面多项式求导:<br>f(x) = 5x^4 - 2x^2 + 1f(x)=5x4−2x2+1</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">p &#x3D; polyint([5 0 -2 0 1], 3)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>得到<code>p = [1 0 -0.6667 0 1 3]</code>,表示计算得到积分\int f(x) dx = x^5 -0.6667x^3 + x + 3∫f(x)dx=x5−0.6667x3+x+3.</p>
<h2 id="非线性表达式的数值运算"><a href="#非线性表达式的数值运算" class="headerlink" title="非线性表达式的数值运算"></a>非线性表达式的数值运算</h2><h3 id="方程-组-求根fsolve"><a href="#方程-组-求根fsolve" class="headerlink" title="方程(组)求根fsolve()"></a>方程(组)求根<code>fsolve()</code></h3><p>使用<code>fsolve(fun, x0)</code>求非线性方程组的根,<code>fun</code>为待求方程的函数句柄,<code>x0</code>为初值.</p>
<ol>
<li><p>求方程1.2x+x\sin(x)+0.3=01.2x+xsin(x)+0.3=0在x=0x=0附近的解.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">f2 &#x3D; @(x) (1.2*x+x*sin(x)+0.3);
fsolve(f2,0)	% 得到 -0.3500<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>解方程组<br>\begin{aligned} \left{ \begin{aligned} e^{-e^{-(x_1+x_2)}} - x_2(1+x_1^2) = 0 \ x_1 \cos x_2 + x_2 \sin x_1 - \frac{1}{2} = 0 \end{aligned} \right. \end{aligned}⎩⎪⎨⎪⎧​e−e−(x1​+x2​)−x2​(1+x12​)=0x1​cosx2​+x2​sinx1​−21​=0​​</p>
<p>设定初值为[0, 0][0,0]</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">fun &#x3D; @(x) [exp(-exp(-(x(1)+x(2))))-x(2)*(1+x(1)^2)...
    x(1)*cos(x(2)) + x(2)*sin(x(1)) - 0.5]
x0 &#x3D; [0,0];
x &#x3D; fsolve(fun,x0)	% 得到[0.3532 0.6061]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h3 id="数值微分"><a href="#数值微分" class="headerlink" title="数值微分"></a>数值微分</h3><h4 id="求差分-diff"><a href="#求差分-diff" class="headerlink" title="求差分:diff()"></a>求差分:<code>diff()</code></h4><p>使用<code>diff(X, n)</code>计算向量<code>X</code>的<code>n</code>阶差分,<code>n</code>默认为<code>1</code>.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x &#x3D; [1 2 5 2 1];
diff(x);	% 得到 [1 3 -3 -1]
diff(x,1);	% 得到 [1 3 -3 -1]
diff(x,2);	% 得到 [2 -6 2]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="求导数-diff-y-diff-x"><a href="#求导数-diff-y-diff-x" class="headerlink" title="求导数:diff(y)./diff(x)"></a>求导数:<code>diff(y)./diff(x)</code></h4><p>使用导数的定义</p>
<script type="math/tex; mode=display">f'(x_0) = \lim_{h\rarr 0} \frac{f(x_0 + h) - f(x_0)}{h}$</script><p>可以计算函数在某点的近似导数.</p>
<p>下面程序计算f(x) = x^3f(x)=x3的一阶和二阶导数的值.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x &#x3D; -2:0.005:2; y &#x3D; x.^3;
m &#x3D; diff(y).&#x2F;diff(x);			% 计算一阶导数
m2 &#x3D; diff(m).&#x2F;diff(x(1:end-1));	% 计算二阶导数

plot(x,y,x(1:end-1),m,x(1:end-2),m2);
xlabel(&#39;x&#39;); ylabel(&#39;y&#39;);
legend(&#39;f(x) &#x3D;x^3&#39;,&#39;f&#39;&#39;(x)&#39;,&#39;f&#39;&#39;&#39;&#39;(x)&#39;, 4);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220204120807.jpeg" alt="在这里插入图片描述"></p>
<h3 id="数值积分"><a href="#数值积分" class="headerlink" title="数值积分"></a>数值积分</h3><h4 id="数值积分原理"><a href="#数值积分原理" class="headerlink" title="数值积分原理"></a>数值积分原理</h4><p>有三种常见算法用于计算数值积分: <strong>矩形法</strong>,<strong>梯形法</strong>,<strong>抛物线法</strong>,它们分别把微分区间的图形视为矩形,梯形,抛物线以计算面积.</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>算法</th>
<th>图示</th>
<th>表达式</th>
</tr>
</thead>
<tbody>
<tr>
<td>矩形法(Midpoint Rule)</td>
<td><img src="https://img-blog.csdnimg.cn/20191120165104999.png" alt="在这里插入图片描述"></td>
<td><script type="math/tex">\int_a^b f(x) dx = 2h \sum_{i=0}^{(n/2)-1} f(x_{2i+1})</script></td>
</tr>
<tr>
<td>梯形法(Trapezoid Rule)</td>
<td><img src="https://img-blog.csdnimg.cn/20191120165114624.png" alt="在这里插入图片描述"></td>
<td><script type="math/tex">\int_a^b f(x) dx = \frac{h}{2} \left[ f(a) + 2\sum_{i=1}^{n-1} f(x_i) +f(b) \right]</script></td>
</tr>
<tr>
<td>抛物线法(Simpson’s Rule)</td>
<td><img src="https://img-blog.csdnimg.cn/20191120165124685.png" alt="在这里插入图片描述"></td>
<td><script type="math/tex">\int_a^b f(x) dx = \frac{h}{3} \left[ f(a) + 2\sum_{i=1}^{(n/2)-1} f(x_{2i}) + 4\sum_{i=1}^{n/2} f(x_{2i-1}) + f(b) \right]</script></td>
</tr>
</tbody>
</table>
</div>
<p><img src="https://img-blog.csdnimg.cn/20191120180550884.png" alt="在这里插入图片描述"></p>
<p>下面分别使用三种方法计算f(x) = 4x^3f(x)=4x3在区间(0, 2)(0,2)内的积分.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">h &#x3D; 0.05; x &#x3D; 0:h:2;


% 使用矩形法计算近似积分
midpoint &#x3D; (x(1:end-1)+x(2:end)).&#x2F;2;
y &#x3D; 4*midpoint.^3;
s &#x3D; sum(h*y)			% 得到 15.9950

% 使用梯形法计算近似积分
trapezoid &#x3D; (y(1:end-1)+y(2:end))&#x2F;2;
s &#x3D; h*sum(trapezoid)	% 得到 15.2246

% 使用抛物线法计算数值积分
s &#x3D; h&#x2F;3*(y(1)+2*sum(y(3:2:end-2))+4*sum(y(2:2:end))+y(end))	% 得到 15.8240<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="数值积分函数-integral"><a href="#数值积分函数-integral" class="headerlink" title="数值积分函数:integral()"></a>数值积分函数:<code>integral()</code></h4><p><code>integral()</code>,<code>integral2()</code>,<code>integral3()</code>分别对函数在<code>xmin</code>至<code>xmax</code>间进行一重,二重,三重积分.</p>
<p>它们的第一个参数都应该是一个函数句柄,下面例子演示他们的用法:</p>
<ol>
<li><p>计算\int_0^2 \frac{1}{x^3-2x-5}∫02x3−2x−51</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">f &#x3D; @(x) 1.&#x2F;(x.^3-2*x-5);
integral(f,0,2)		% 得到 -0.4605<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>计算\int<em>0^\pi \int</em>\pi^{2\pi} (y\sin(x) + x \cos(y)) dx dy∫0π∫π2π(ysin(x)+xcos(y))dxdy</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">f &#x3D; @(x,y) y.*sin(x)+x.*cos(y);
integral2(f,pi,2*pi,0,pi)	% 得到 -9.8696<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>计算\int_{-1}^1 \int_0^1 \int_0^\pi (y\sin(x) + z \cos(y)) dx dy dz∫−11∫01∫0π(ysin(x)+zcos(y))dxdydz</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">f &#x3D; @(x,y,z) y.*sin(x)+z.*cos(y);
integral3(f,0,pi,0,1,-1,1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
</ol>
<h1 id="统计与拟合"><a href="#统计与拟合" class="headerlink" title="统计与拟合"></a>统计与拟合</h1><h2 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h2><h3 id="描述性统计-Descriptive-Statistics"><a href="#描述性统计-Descriptive-Statistics" class="headerlink" title="描述性统计(Descriptive Statistics)"></a>描述性统计(Descriptive Statistics)</h3><p>描述性统计主要研究数据的<strong>中心趋势</strong>(Central Tendency)和Variation</p>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220204121855.png" alt="在这里插入图片描述"></p>
<h4 id="中心趋势-Central-Tendency"><a href="#中心趋势-Central-Tendency" class="headerlink" title="中心趋势(Central Tendency)"></a>中心趋势(Central Tendency)</h4><div class="table-container">
<table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>mean()</code></td>
<td>计算平均值</td>
</tr>
<tr>
<td><code>median()</code></td>
<td>计算中位数</td>
</tr>
<tr>
<td><code>mode()</code></td>
<td>计算众数</td>
</tr>
<tr>
<td><code>prctile(X,num)</code></td>
<td>数据X的num%分位数为多少</td>
</tr>
<tr>
<td><code>max()</code></td>
<td>计算最大值</td>
</tr>
<tr>
<td><code>min()</code></td>
<td>计算最小值</td>
</tr>
</tbody>
</table>
</div>
<p>下列函数绘制统计图表:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>bar()</code></td>
<td>绘制条形图</td>
</tr>
<tr>
<td><code>stem()</code></td>
<td>绘制针状图</td>
</tr>
<tr>
<td><code>area()</code></td>
<td>绘制填充图</td>
</tr>
<tr>
<td><code>boxplot()</code></td>
<td>绘制箱线图</td>
</tr>
</tbody>
</table>
</div>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x &#x3D; 1:14;
freqy &#x3D; [1 0 1 0 4 0 1 0 3 1 0 0 1 1];
subplot(1,3,1); bar(x,freqy); xlim([0 15]);
subplot(1,3,2); area(x,freqy); xlim([0 15]);
subplot(1,3,3); stem(x,freqy); xlim([0 15]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/20191125180936445.jpg" alt="在这里插入图片描述"></p>
<p>  箱线图可以突出显示数据的四分位点.</p>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220204122616.png" alt="在这里插入图片描述"></p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">marks &#x3D; [80 81 81 84 88 92 92 94 96 97];
boxplot(marks) 
% prctile(marks, [25 50 75])	% 得到 [81 90 94]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/2019112517244367.jpg" alt="在这里插入图片描述"></p>
<h4 id="Variation"><a href="#Variation" class="headerlink" title="Variation"></a>Variation</h4><h5 id="离散程度"><a href="#离散程度" class="headerlink" title="离散程度"></a>离散程度</h5><div class="table-container">
<table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>std()</code></td>
<td>计算数据的标准差</td>
</tr>
<tr>
<td><code>var()</code></td>
<td>计算数据的方差</td>
</tr>
</tbody>
</table>
</div>
<h5 id="偏度-Skewness"><a href="#偏度-Skewness" class="headerlink" title="偏度(Skewness"></a>偏度(Skewness</h5><div class="table-container">
<table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>skewness()</code></td>
<td>计算数据的偏度</td>
</tr>
</tbody>
</table>
</div>
<p><img src="https://img-blog.csdnimg.cn/20191125164908565.png" alt="在这里插入图片描述"></p>
<p>偏度反映数据的对称程度</p>
<ul>
<li>数据左偏时,其偏度小于0.</li>
<li>数据完全对称时,其偏度等于0.</li>
<li>数据右偏时,其偏度大于0.</li>
</ul>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">X &#x3D; randn([10 3]);		% 构造10*3的矩阵
X(X(:,1)&lt;0, 1) &#x3D; 0; 	% 将第一列数据右偏
X(X(:,3)&gt;0, 3) &#x3D; 0;		% 将第二列数据左偏
boxplot(X, &#123;&#39;Right-skewed&#39;, &#39;Symmetric&#39;, &#39;Left-skewed&#39;&#125;);
skewness(X);	% 得到 [0.5162 -0.7539 -1.1234]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://img-blog.csdnimg.cn/20191125172206776.jpg" alt="在这里插入图片描述"></p>
<h5 id="峰度-Kurtosis"><a href="#峰度-Kurtosis" class="headerlink" title="峰度(Kurtosis)"></a>峰度(Kurtosis)</h5><div class="table-container">
<table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>kurtosis()</code></td>
<td>计算数据的峰度</td>
</tr>
</tbody>
</table>
</div>
<p>峰度(Kurtosis)表征概率密度分布曲线在平均值处峰值的高低.直观来看,峰度反映了峰部的尖度.</p>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220204123115.png" alt="在这里插入图片描述"></p>
<h3 id="统计推断-Inferential-Statistics"><a href="#统计推断-Inferential-Statistics" class="headerlink" title="统计推断(Inferential Statistics)"></a>统计推断(Inferential Statistics)</h3><p>推论统计的核心即为假设检验.下列函数用于进行假设检验.</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ttest()</code></td>
<td>进行T检验</td>
</tr>
<tr>
<td><code>ztest()</code></td>
<td>进行Z检验</td>
</tr>
<tr>
<td><code>ranksum()</code></td>
<td>进行秩和检验</td>
</tr>
<tr>
<td><code>signrank()</code></td>
<td>进行符号秩检验</td>
</tr>
</tbody>
</table>
</div>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">load examgrades
x &#x3D; grades(:,1);
y &#x3D; grades(:,2);
[h,p] &#x3D; ttest(x,y);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>执行上述程序,得到<code>[h p] = [0 0.9805]</code>,表示在默认显著性水平(5%)下我们没有理由拒绝<code>x</code>与<code>y</code>同分布.</p>
<h2 id="拟合"><a href="#拟合" class="headerlink" title="拟合"></a>拟合</h2><h3 id="多项式拟合"><a href="#多项式拟合" class="headerlink" title="多项式拟合"></a>多项式拟合</h3><h4 id="一元多项式拟合-polyfit"><a href="#一元多项式拟合-polyfit" class="headerlink" title="一元多项式拟合:polyfit()"></a>一元多项式拟合:<code>polyfit()</code></h4><p>使用<code>polyfit(x, y, n)</code>函数对数据<code>x</code>和<code>y</code>进行<code>n</code>次多项式拟合.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x &#x3D; [-1.2 -0.5 0.3 0.9 1.8 2.6 3.0 3.5];
y &#x3D; [-15.6 -8.5 2.2 4.5 6.6 8.2 8.9 10.0];

for i &#x3D; 1:3 % 分别进行一次,二次,三次拟合
    p &#x3D; polyfit(x, y, i);
    xfit &#x3D; x(1):0.1:x(end); yfit &#x3D; polyval(p, xfit);
    subplot(1, 3, i); plot(x, y, &#39;ro&#39;, xfit, yfit);
    legend(&#39;Data points&#39;, &#39;Fitted curve&#39;, &#39;Location&#39;, &#39;southeast&#39;);
end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> <img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220204123618.png" alt="untitled"></p>
<h4 id="多元线性拟合-regress"><a href="#多元线性拟合-regress" class="headerlink" title="多元线性拟合:regress()"></a>多元线性拟合:<code>regress()</code></h4><p>使用<code>regress(y, X)</code>函数对数据<code>X</code>和<code>y</code>进行多元线性回归.</p>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">load carsmall;
y &#x3D; MPG; x1 &#x3D; Weight; x2 &#x3D; Horsepower;		% 导入数据集
X &#x3D; [ones(length(x1),1) x1 x2];				% 构建增广X矩阵
b &#x3D; regress(y,X);							% 进行线性回归

% 下面是绘图语句
x1fit &#x3D; min(x1):100:max(x1); x2fit &#x3D; min(x2):10:max(x2);
[X1FIT,X2FIT] &#x3D; meshgrid(x1fit,x2fit);
YFIT &#x3D; b(1)+b(2)*X1FIT+b(3)*X2FIT;
scatter3(x1,x2,y,&#39;filled&#39;); hold on;
mesh(X1FIT,X2FIT,YFIT); hold off;
xlabel(&#39;Weight&#39;); ylabel(&#39;Horsepower&#39;); zlabel(&#39;MPG&#39;); view(50,10);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220204123757.png" alt="untitled"></p>
<h3 id="非线性拟合"><a href="#非线性拟合" class="headerlink" title="非线性拟合"></a>非线性拟合</h3><p>对于非线性拟合,需要使用曲线拟合工具箱.在命令窗口输入<code>cftool()</code>打开曲线拟合工具箱.</p>
<h2 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h2><h3 id="一维插值"><a href="#一维插值" class="headerlink" title="一维插值"></a>一维插值</h3><div class="table-container">
<table>
<thead>
<tr>
<th>函数</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>interp1(x,v)</code>或<code>interp1(x,v,xq)</code></td>
<td>线性插值</td>
</tr>
<tr>
<td><code>spline(x,v)</code>或<code>spline(x,v,xq)</code></td>
<td>三次样条插值</td>
</tr>
<tr>
<td><code>pchip(x,v)</code>或<code>pchip(x,v,xq)</code></td>
<td>三次Hermite插值</td>
</tr>
<tr>
<td><code>mkpp(breaks,coefs)</code></td>
<td>生成分段多项式</td>
</tr>
<tr>
<td><code>ppval(pp,xq)</code></td>
<td>计算分段多项式的插值结果</td>
</tr>
</tbody>
</table>
</div>
<p>下面例子演示使用<code>interp1(x, v, xq)</code>进行线性插值和使用<code>spline(x, v, xq)</code>进行三次样条插值.各参数意义如下:</p>
<ul>
<li><code>x</code>,<code>v</code>: 待插值样本点.</li>
<li><code>xq</code>: 查询点,函数返回在这些点处的插值结果.</li>
</ul>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">% 构造数据
x &#x3D; linspace(0, 2*pi, 40); x_m &#x3D; x; x_m([11:13, 28:30]) &#x3D; NaN; 
y_m &#x3D; sin(x_m);
plot(x_m, y_m, &#39;ro&#39;, &#39;MarkerFaceColor&#39;, &#39;r&#39;); hold on; 	

% 对数据进行线性插值
m_i &#x3D; ~isnan(x_m);
y_i &#x3D; interp1(x_m(m_i), y_m(m_i), x);
plot(x,y_i, &#39;-b&#39;); hold on;

% 对数据进行三次样条插值
m_i &#x3D; ~isnan(x_m);
y_i &#x3D; spline(x_m(m_i), y_m(m_i), x);
plot(x,y_i, &#39;-g&#39;); 

legend(&#39;Original&#39;, &#39;Linear&#39;, &#39;Spline&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220204124746.jpeg" alt="在这里插入图片描述"></p>
<h3 id="二维插值"><a href="#二维插值" class="headerlink" title="二维插值"></a>二维插值</h3><p>使用<code>interp2()</code>可以进行二维插值,向其<code>method</code>参数传入字符串可以指定插值算法.</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
<th>连续性</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&#39;linear&#39;</code></td>
<td>(默认)在查询点插入的值基于各维中邻点网格点处数值的线性插值.</td>
<td>C0</td>
</tr>
<tr>
<td><code>&#39;spline&#39;</code></td>
<td>在查询点插入的值基于各维中邻点网格点处数值的三次插值.插值基于使用非结终止条件的三次样条.</td>
<td>C2</td>
</tr>
<tr>
<td><code>&#39;nearest&#39;</code></td>
<td>在查询点插入的值是距样本网格点最近的值.</td>
<td>不连续</td>
</tr>
<tr>
<td><code>&#39;cubic&#39;</code></td>
<td>在查询点插入的值基于各维中邻点网格点处数值的三次插值.插值基于三次卷积.</td>
<td>C1</td>
</tr>
<tr>
<td><code>&#39;makima&#39;</code></td>
<td>修改后的Akima三次Hermite插值.在查询点插入的值基于次数最大为3的多项式的分段函数,使用各维中相邻网格点的值进行计算.为防过冲,已改进 Akima 公式.</td>
<td>C1</td>
</tr>
</tbody>
</table>
</div>
<pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">% 构建样本点
xx &#x3D; -2:.5:2; yy &#x3D; -2:.5:3; [x,y] &#x3D; meshgrid(xx,yy); 
xx_i &#x3D; -2:.1:2; yy_i &#x3D; -2:.1:3; [x_i,y_i] &#x3D; meshgrid(xx_i,yy_i);
z &#x3D; x.*exp(-x.^2-y.^2);

% 线性插值
subplot(1, 2, 1); 
z_i &#x3D; interp2(xx,yy,z,x_i,y_i);
surf(x_i,y_i,z_i); hold on;
plot3(x,y,z+0.01,&#39;ok&#39;,&#39;MarkerFaceColor&#39;,&#39;r&#39;); hold on;

% 三次插值
subplot(1, 2, 2); 
z_ic &#x3D; interp2(xx,yy,z,x_i,y_i, &#39;spline&#39;);
surf(x_i,y_i,z_ic); hold on;
plot3(x,y,z+0.01,&#39;ok&#39;,&#39;MarkerFaceColor&#39;,&#39;r&#39;); hold on;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220204125228.png" alt="untitled"></p>
]]></content>
      <categories>
        <category>建模</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>建模</tag>
      </tags>
  </entry>
  <entry>
    <title>美赛校选培训课笔记</title>
    <url>/others/Math/%E7%BE%8E%E8%B5%9B%E6%A0%A1%E9%80%89%E5%9F%B9%E8%AE%AD%E8%AF%BE%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="多元统计分析"><a href="#多元统计分析" class="headerlink" title="多元统计分析"></a>多元统计分析</h1><h2 id="聚类分析"><a href="#聚类分析" class="headerlink" title="聚类分析"></a>聚类分析</h2><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><ul>
<li>事先不知道类别的个数与结构；</li>
<li>进行分析的数据是对象间的相似性或相异性（距离）；</li>
<li>将距离近的对象归入一类。</li>
</ul>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul>
<li><p>根据分类对象不同分为</p>
<ul>
<li><p>Q型聚类：对样本进行聚类</p>
</li>
<li><p>R型聚类：对变量进行聚类</p>
</li>
</ul>
</li>
<li><p>根据聚类方法主要分为</p>
<ul>
<li>系统聚类法</li>
<li>动态聚类法</li>
</ul>
</li>
</ul>
<h3 id="距离"><a href="#距离" class="headerlink" title="距离"></a>距离</h3><h4 id="Minikowski距离："><a href="#Minikowski距离：" class="headerlink" title="Minikowski距离："></a>Minikowski距离：</h4><script type="math/tex; mode=display">
d(x,y) = [\sum\limits_{k=1}^p|x_{k} - y_{k}|^{m}]^{\frac{1}{m}}，  x,y为p维列向量</script><ul>
<li>m = 1时，为绝对距离</li>
<li>m = 2时，为欧氏距离</li>
<li>m = $\infty$,  为切比雪夫距离，即 $\mathop{max}\limits<em>{1\le k \le p}|x</em>{k} - y_{k}|$</li>
</ul>
<h4 id="Mahalanobis距离-聚类分析中常用"><a href="#Mahalanobis距离-聚类分析中常用" class="headerlink" title="Mahalanobis距离(聚类分析中常用)"></a>Mahalanobis距离(聚类分析中常用)</h4><script type="math/tex; mode=display">
d(x,y) = \sqrt{(x - y)^{T} \sum\nolimits^{-1} (x - y)}</script><p>其中x, y为来自 p 维总体Z的样本观测值，Σ为Z 的协方差矩阵，实际中Σ往往是不知道的，常常需要用样本协方差来估计。马氏距离对一切线性变换是不变的，故不受量纲的影响。 </p>
<h4 id="R语句："><a href="#R语句：" class="headerlink" title="R语句："></a>R语句：</h4><pre class="line-numbers language-R" data-language="R"><code class="language-R">dist(x,method&#x3D;“euclidean”, diag&#x3D;FALSE, upper&#x3D;FALSE, p&#x3D;2)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li><p>method: 计算距离的方法</p>
<ul>
<li><p>“euclidean”: 欧式距离</p>
</li>
<li><p>“maximum”: Chebyshev距离</p>
</li>
<li><p>“manhattan”: 绝对值距离</p>
</li>
<li><p>“minkowski”: Minkowski距离，p是Minkowski距离的阶数</p>
</li>
</ul>
</li>
<li><p>diag=TRUE: 输出对角线上的距离</p>
</li>
<li>upper=TRUE: 输出上三角矩阵的值（默认值仅输出下 三角矩阵的值）</li>
</ul>
<h4 id="python语句："><a href="#python语句：" class="headerlink" title="python语句："></a>python语句：</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">import rpy2.robjects as robjects

x &#x3D; [1, 2, 6, 8, 11]
r &#x3D; robjects.r
res &#x3D; r.dist(x)
print(res)
#    1  2  3  4
# 2  1
# 3  5  4
# 4  7  6  2
# 5 10  9  5  3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">import rpy2
import rpy2.robjects.numpy2ri

R &#x3D; rpy2.robjects.r
r_code &#x3D; &quot;&quot;&quot;
x&lt;-c(1,2,6,8,11)
y&lt;-dist(x)
print(y)
&quot;&quot;&quot;
R(r_code)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>注：我用rpy2来实现这个感觉比较费劲。可能不太能从python 调用R语言，建议直接用R语言吧</li>
</ul>
<h3 id="标准化处理"><a href="#标准化处理" class="headerlink" title="标准化处理"></a>标准化处理</h3><p>当指标的测量值相差悬殊时，应先对数据进行标准化处理，再利用标准化的数据计算距离。</p>
<h4 id="普通标准化变换"><a href="#普通标准化变换" class="headerlink" title="普通标准化变换"></a>普通标准化变换</h4><script type="math/tex; mode=display">
X_{ij}^{*} = \frac{X_{ij} - \overline{X}_{j}}{S_{j}}</script><p>i=1,2,…n表示第i个样本，j=1,2,…p表示样本的第j个指标，每个样本均有p个观测指标.       是第j个指标的样本均值</p>
<h4 id="极差标准化变换"><a href="#极差标准化变换" class="headerlink" title="极差标准化变换"></a>极差标准化变换</h4><script type="math/tex; mode=display">
X_{ij}^{*} = \frac{X_{ij} - \overline{X}_{j}}{R_{j}} \\
其中，R_{j} = \mathop{\max}\limits_{1\le k \le n}X_{kj} - \mathop{\max}\limits_{1 \le k \le n}X_{kj}</script><h4 id="极差正规化变换"><a href="#极差正规化变换" class="headerlink" title="极差正规化变换"></a>极差正规化变换</h4><script type="math/tex; mode=display">
X_{ij}^{*} = \frac{X_{ij} - \mathop{\min}\limits_{1\le k\le n} X_{kj}}{R_{j}}</script><h4 id="程序语句"><a href="#程序语句" class="headerlink" title="程序语句"></a>程序语句</h4><h5 id="数据的中心化和标准化处理"><a href="#数据的中心化和标准化处理" class="headerlink" title="数据的中心化和标准化处理"></a>数据的中心化和标准化处理</h5><h6 id="R语句"><a href="#R语句" class="headerlink" title="R语句"></a>R语句</h6><pre class="line-numbers language-R" data-language="R"><code class="language-R">scale(X,center &#x3D; True, scale &#x3D; True)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>X:样本数据矩阵，center = TURE表示对数据做中心化变换，scale=TRUE表示对数据做标准化变化</p>
<h6 id="python语句"><a href="#python语句" class="headerlink" title="python语句"></a>python语句</h6><pre class="line-numbers language-python" data-language="python"><code class="language-python">import rpy2
import numpy
import rpy2.robjects.numpy2ri

rpy2.robjects.numpy2ri.activate()

R &#x3D; rpy2.robjects.r
x &#x3D; numpy.array([[1.0, 2.0], [3.0, 1.0]])
res &#x3D; R.scale(x, center&#x3D;True, scale&#x3D;True)
print(res)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h5 id="数据做极差标准化处理"><a href="#数据做极差标准化处理" class="headerlink" title="数据做极差标准化处理"></a>数据做极差标准化处理</h5><pre class="line-numbers language-R" data-language="R"><code class="language-R">x &lt;- data.frame(
    points &#x3D; c(99, 97, 104, 79, 84, 88, 91, 99),
    rebounds &#x3D; c(34, 40, 41, 38, 29, 30, 22, 25),
    blocks &#x3D; c(12, 8, 8, 7, 8, 11, 6, 7)
)
# apply（）函数必须应用于dataframe或matrix
center &lt;- sweep(x, 2, apply(x, 2, mean))
R &lt;- apply(x, 2, max) - apply(x, 2, min)
x_star &lt;- sweep(center, 2, R, &quot;&#x2F;&quot;)
# 若x_star&lt;-sweep(center, 2, sd(x), &quot;&#x2F;&quot;), 则得到（普通）标准化变换后的数据；
print(x_star)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220117160257.png" alt="image-20220117160237414"></p>
<p>sweep(x, MARGIN, STATS, FUN=”-“, …)</p>
<ul>
<li><p>x:数组或矩阵；MARGIN:运算区域，对矩阵1表示行，2表示列；</p>
</li>
<li><p>STATS是统计量，apply(x, 2, mean)表示各列的均值；</p>
</li>
<li><p>FUN表示函数的运算，缺省值为减法运算。</p>
</li>
</ul>
<h3 id="相似系数"><a href="#相似系数" class="headerlink" title="相似系数"></a>相似系数</h3><p>计算样本不同指标间的相关系数，适用于对变量进行聚类。</p>
<h3 id="系统聚类法"><a href="#系统聚类法" class="headerlink" title="系统聚类法"></a>系统聚类法</h3><h4 id="聚类分析方法中最常用"><a href="#聚类分析方法中最常用" class="headerlink" title="聚类分析方法中最常用"></a>聚类分析方法中最常用</h4><h4 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h4><ul>
<li>（1）视各样本（或变量）自成一类，规定类与类之间的距离（或相似系数）；</li>
<li>（2）把最相似的样本（或变量）聚为小类，再将已聚合的小类按相似性再聚合；</li>
<li>（3）最后将一切子类都聚合到一个大类，从而得到一个按相似性大小聚集起来的谱系关系</li>
</ul>
<h4 id="3-根据距离定义的不同分为"><a href="#3-根据距离定义的不同分为" class="headerlink" title="3.根据距离定义的不同分为"></a>3.根据距离定义的不同分为</h4><ul>
<li>（1）最短距离法：类与类之间的距离定义为两类中最近样本间的距离；</li>
<li>（2）最长距离法：类与类之间的距离定义为两类中最远样本间的距离；</li>
<li>（3）类平均法：类与类之间的距离定义为两类中两两样本间距离的平均数；</li>
</ul>
<h4 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h4><pre class="line-numbers language-R" data-language="R"><code class="language-R"> x&lt;-c(1,2,6,8,11); 
dim(x)&lt;-c(5,1); 
d&lt;-dist(x) #生成距离结构
hc1&lt;-hclust(d, &quot;single&quot;); hc2&lt;-hclust(d, &quot;complete&quot;)
hc3&lt;-hclust(d, &quot;median&quot;); hc4&lt;-hclust(d, &quot;mcquitty&quot;) #生成系统聚类
opar &lt;- par(mfrow &#x3D; c(2, 2))
plot(hc1,hang&#x3D;-1); plot(hc2,hang&#x3D;-1)
plot(hc3,hang&#x3D;-1); plot(hc4,hang&#x3D;-1)
par(opar)#  画出所有树形结构图，以2*2的形式画在一张图上<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>hclust():进行系统聚类的计算<br>plot():画出系统聚类的树形图<br>hclust(d, method = “complete”)<br>d:dist构成的距离结构，<br>method:系统聚类的方法（默认为最长距离法），其参数有：<br>（1）“single”：最短距离法<br>（2）“complete”：最长距离法<br>（3）“average”：类平均法<br>……<br>plot(x, labels = NULL, hang = 0.1, main = “Cluster<br>Dendrogram”, sb = NULL, xlab = NULL, ylab =”Height”, …)</p>
<p>x: hclust()函数生成的对象<br>hang: 表明树形图中各类的位置，取负值表示树形图中的类从底部画起<br>main: 绘图名称</p>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20220117165301.png" alt="image-20220117165300798"></p>
<h3 id="动态聚类法"><a href="#动态聚类法" class="headerlink" title="动态聚类法"></a>动态聚类法</h3><p>系统聚类：一次形成类后就不再改变；<br>动态聚类：逐步聚类</p>
<h4 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h4><p>首先粗略分类，然后按某种最优原则修改不合理的分类，直至分得比较合理为止，形成最终分类结果。</p>
<h4 id="程序-1"><a href="#程序-1" class="headerlink" title="程序"></a>程序</h4><p>kmeans(x, centers, <em>iter.max</em>=10, <em>nstart</em>=1, algorithm*=c(“Hartigan-Wong”, “Lloyd”, “MacQueen”))</p>
<ul>
<li>x是由数据构成的矩阵或数据框，</li>
<li>centers是聚类的个数或者初始类的中心，</li>
<li>iter.max为最大迭代次数（最大值为10），</li>
<li>nstart是随机集合的个数，</li>
<li>algorithm是动态聚类的算法。</li>
</ul>
<pre class="line-numbers language-R" data-language="R"><code class="language-R">X&lt;-data.frame(
   x1&#x3D;c(2959.19, 2459.77, 1495.63, 1046.33, 1303.97, 1730.84, 1561.86, 1410.11, 3712.31, 2207.58, 2629.16, 1844.78, 2709.46, 1563.78, 1675.75, 1427.65, 1783.43, 1942.23, 3055.17, 2033.87, 2057.86, 2303.29, 1974.28, 1673.82, 2194.25, 2646.61, 1472.95, 1525.57, 1654.69, 1375.46, 1608.82), 
   x2&#x3D;c(730.79, 495.47, 515.90, 477.77, 524.29, 553.90, 492.42, 510.71, 550.74, 449.37, 557.32, 430.29, 428.11, 303.65, 613.32, 431.79, 511.88, 512.27, 353.23, 300.82, 186.44, 589.99, 507.76, 437.75, 537.01, 839.70, 390.89, 472.98, 437.77, 480.99, 536.05),
   x3&#x3D;c(749.41, 697.33, 362.37, 290.15, 254.83, 246.91, 200.49, 211.88, 893.37, 572.40, 689.73, 271.28, 334.12, 233.81, 550.71, 288.55, 282.84, 401.39, 564.56, 338.65, 202.72, 516.21, 344.79, 461.61, 369.07, 204.44, 447.95, 328.90, 258.78, 273.84, 432.46), 
   x4&#x3D;c(513.34, 302.87, 285.32, 208.57, 192.17, 279.81, 218.36, 277.11, 346.93, 211.92, 435.69, 126.33, 160.77, 107.90, 219.79, 208.14, 201.01, 206.06, 356.27, 157.78, 171.79, 236.55, 203.21, 153.32, 249.54, 209.11, 259.51, 219.86, 303.00, 317.32, 235.82),
   x5&#x3D;c(467.87, 284.19, 272.95, 201.50, 249.81, 239.18, 220.69, 224.65, 527.00, 302.09, 514.66, 250.56, 405.14, 209.70,272.59, 217.00, 237.60, 321.29, 811.88, 329.06, 329.65, 403.92, 240.24, 254.66, 290.84, 379.30, 230.61, 206.65, 244.93, 251.08, 250.28),
   x6&#x3D;c(1141.82, 735.97, 540.58, 414.72, 463.09, 445.20, 459.62, 376.82, 1034.98, 585.23, 795.87, 513.18, 461.67, 393.99, 599.43, 337.76, 617.74, 697.22, 873.06, 621.74, 477.17, 730.05, 575.10, 445.59, 561.91, 371.04, 490.90, 449.69, 479.53, 424.75, 541.30),
   x7&#x3D;c(478.42, 570.84, 364.91, 281.84, 287.87, 330.24, 360.48, 317.61, 720.33, 429.77, 575.76, 314.00, 535.13, 509.39, 371.62, 421.31, 523.52, 492.60, 1082.82, 587.02, 312.93,438.41, 430.36, 346.11, 407.70, 269.59, 469.10, 249.66, 288.56, 228.73, 344.85),
   x8&#x3D;c(457.64, 305.08, 188.63, 212.10, 192.96, 163.86, 147.76, 152.85, 462.03, 252.54, 323.36, 151.39, 232.29, 160.12, 211.84, 165.32, 182.52, 226.45, 420.81, 218.27, 279.19, 225.80, 223.46, 191.48, 330.95, 389.33, 191.34, 228.19, 236.51, 195.93, 214.40),
   row.names &#x3D; c(&quot;北京&quot;, &quot;天津&quot;, &quot;河北&quot;, &quot;山西&quot;, &quot;内蒙古&quot;, &quot;辽宁&quot;, &quot;吉林&quot;, &quot;黑龙江&quot;, &quot;上海&quot;, &quot;江苏&quot;, &quot;浙江&quot;, &quot;安徽&quot;, &quot;福建&quot;, &quot;江西&quot;, &quot;山东&quot;,  &quot;河南&quot;, &quot;湖北&quot;, &quot;湖南&quot;, &quot;广东&quot;, &quot;广西&quot;, &quot;海南&quot;, &quot;重庆&quot;, &quot;四川&quot;, &quot;贵州&quot;, &quot;云南&quot;, &quot;西藏&quot;, &quot;陕西&quot;, &quot;甘肃&quot;, &quot;青海&quot;, &quot;宁夏&quot;, &quot;新疆&quot;)
)

kmeans(scale(X),5)


K-means clustering with 5 clusters of sizes 10, 7, 3, 7, 4


Clustering vector:
  北京   天津   河北   山西 内蒙古   辽宁   吉林 黑龙江   上海   江苏 
     5      4      3      3      3      3      3      3      5      4 
  浙江   安徽   福建   江西   山东   河南   湖北   湖南   广东   广西 
     5      1      2      1      4      1      1      4      5      2 
  海南   重庆   四川   贵州   云南   西藏   陕西   甘肃   青海   宁夏 
     2      4      1      1      4      4      1      3      3      3 
  新疆
     3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="主成分分析法"><a href="#主成分分析法" class="headerlink" title="主成分分析法"></a>主成分分析法</h2><h3 id="基本思想-1"><a href="#基本思想-1" class="headerlink" title="基本思想"></a>基本思想</h3><p>实际问题中的变量的重要性有所不同，且众多变量间有一定的相关关系。通过这种相关性对这些变量加以改造，用为数较少的新变量反映原变量提供的大部分信息，简化原问题。即数据降维</p>
<p>主成分分析法就是在这种降维思想下产生的处理高维数据的统计方法。</p>
<h3 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h3><p>通过适当构造原变量的线性组合，产生一列互不相关的新变量，从中选出少数几个新变量并使它们含有尽可能多的原变量带有的信息，从而使用少数几个新变量代替原变量，以分析原问题。</p>
<p>变量中所含“信息”的大小通常用该变量的方差或样本方差来度量。</p>
<p>如常数a,Var(a) = 0 ,我们通过a，只能知道a这个常数，其所含信息少。</p>
<h3 id="主成分的定义"><a href="#主成分的定义" class="headerlink" title="主成分的定义"></a>主成分的定义</h3><p>设$X = (X<em>{1}, X</em>{2},……,X_{p})^{T}$为实际问题涉及的p个随机变量构成的向量，记X的均值为$\mu$，协方差阵为$\sum$.</p>
<p>考虑线性组合</p>
<script type="math/tex; mode=display">
\left\{
\begin{aligned}
Y_{1} &  = & a_{1}^{T}X \\
. \\
. \\
Y_{p} &  = & a_{p}^{T}X \\
\end{aligned}
\right.</script><p>………………………………………………………………………………………………………</p>
<p>warning： 直接写代码了</p>
<h3 id="程序-2"><a href="#程序-2" class="headerlink" title="程序"></a>程序</h3><h4 id="求矩阵的特征值和特征向量"><a href="#求矩阵的特征值和特征向量" class="headerlink" title="求矩阵的特征值和特征向量"></a>求矩阵的特征值和特征向量</h4><pre class="line-numbers language-R" data-language="R"><code class="language-R">a &lt;- c(1, -2, 0, -2, 5, 0, 0, 0, 2)
# 由向量a构造一3列的矩阵， byrow&#x3D;T表示生成矩阵的数据按行放置；
b &lt;- matrix(data &#x3D; a, ncol &#x3D; 3, byrow &#x3D; T)
c &lt;- eigen(b) # 求b的特征值与特征向量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="线性模型"><a href="#线性模型" class="headerlink" title="线性模型"></a>线性模型</h1><p>1.变量之间的关系一般分为两类</p>
<ul>
<li>完全确定的关系，即可表达为函数解析式</li>
<li>非确定的关系，也称相关关系</li>
</ul>
<p>2.回归分析研究的主要内容</p>
<ul>
<li><p>通过观察或实验数据的处理，找出变量间相关系数的定量数学表达式—经验公式，即进行参数估计，并确定经验回归方程的具体形式</p>
</li>
<li><p>检验所建立的经验回归方程是否合理</p>
</li>
<li><p>利用合理的回归方程对随机变量Y进行预测和控制。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>数学</tag>
        <tag>美赛</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL踩坑</title>
    <url>/%E8%B8%A9%E5%9D%91/Pitfalls/wsl%E8%B8%A9%E5%9D%91/</url>
    <content><![CDATA[<h1 id="WSL踩坑"><a href="#WSL踩坑" class="headerlink" title="WSL踩坑"></a>WSL踩坑</h1><p>大二上学期期末，稀里糊涂装了wsl, 一直用到现在。<br>本来是打算，和OS相关，那就装到C盘把。<br>这么一大意，在大三上装东西的时候出了不少问题。（当时没仔细装，而且也不懂）<br>这次为了装temu的交叉编译环境，装了不少东西，直接把C盘干到2G了，这么下去肯定不行。（Ubuntu20。04的主要文件夹就有至少15G了）<br>于是，我就上网搜，发现别人早就整好了vhdx(一个叫虚拟硬盘的东西，我当时没有做，现在做也来不及了），<br>所以别人的限制硬盘占用的方法，转移到别的位置的办法，我都没办法用了。</p>
<p>打算卸载重装到D盘。用这个帖子解决问题了：<a href="https://blog.csdn.net/LaughingMei/article/details/109736965">https://blog.csdn.net/LaughingMei/article/details/109736965</a> </p>
<p>卸载完C盘有16G了。</p>
<p>比较脑瘫，当时看到的有两种方式，第一种要vhdx，第二种不用</p>
]]></content>
      <categories>
        <category>踩坑</category>
      </categories>
      <tags>
        <tag>踩坑</tag>
      </tags>
  </entry>
  <entry>
    <title>GAMES101</title>
    <url>/CG/CG/GAMES101%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="Lecture1-intro"><a href="#Lecture1-intro" class="headerlink" title="Lecture1:  intro"></a>Lecture1:  intro</h2><h3 id="计算机图形学"><a href="#计算机图形学" class="headerlink" title="计算机图形学"></a>计算机图形学</h3><p>使用计算机synthesize(合成)  manipulate（操作) 可视化信息</p>
<h3 id="why-study-computer-graphics"><a href="#why-study-computer-graphics" class="headerlink" title="why study computer graphics?"></a>why study computer graphics?</h3><ul>
<li>Application<ul>
<li>video games 电子游戏</li>
<li>animations 动画</li>
<li>visualization 可视化</li>
<li>virtual reality</li>
<li>augmented reality 增强现实</li>
<li>digital illustration 数码插画</li>
<li>simulation 模拟</li>
<li>graphical user interfaces 图形用户界面</li>
<li>typography  排版</li>
</ul>
</li>
<li>technical chanllenges </li>
</ul>
<h3 id="Course-topics"><a href="#Course-topics" class="headerlink" title="Course topics"></a>Course topics</h3><ul>
<li><p>Rasterization  光栅化</p>
<ul>
<li><p>project geometry primitives (3D triangles / polygons) onto the screen</p>
<p>将几何图形（3D三角形 / 多边形）投射到屏幕上</p>
</li>
<li><p>break projected primitives into fragments (pixels)</p>
<p>将投影图元分解到片段(像素)</p>
</li>
<li><p>gold standard in video games (real-time applications)</p>
</li>
</ul>
</li>
<li><p>curves and meshes 曲线和栅格</p>
<ul>
<li>怎样represent geometry in CG</li>
</ul>
</li>
<li><p>ray tracing 光线追踪</p>
<ul>
<li>shoot rays from camera though each pixel<ul>
<li>calculate intersection and shading 交叉点和阴影</li>
<li>continue to bounce the rays till they hit light sources</li>
</ul>
</li>
<li>gold standard in animations / movies (offline离线 application)</li>
</ul>
</li>
<li><p>animation simulation</p>
<ul>
<li>key frame animation 关键帧动画</li>
<li>mass-spring system 弹簧振子系统</li>
</ul>
</li>
</ul>
<h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><h3 id="differences-between-cg-and-cv"><a href="#differences-between-cg-and-cv" class="headerlink" title="differences between cg and cv"></a>differences between cg and cv</h3><p>No clear boundaries</p>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/image/20210913231736.png" alt="image-20210913210044004"></p>
<h2 id="Lecture2-review-of-linear-algebra"><a href="#Lecture2-review-of-linear-algebra" class="headerlink" title="Lecture2:  review of linear algebra"></a>Lecture2:  review of linear algebra</h2><h3 id="Graphics’-dependcies"><a href="#Graphics’-dependcies" class="headerlink" title="Graphics’ dependcies"></a>Graphics’ dependcies</h3><ul>
<li>basic mathematics<ul>
<li>Linear algebra 线性代数<ul>
<li>mostly dependent on linear algebra</li>
<li>vectors（dot products点乘,cross products叉乘<ul>
<li>An operation like translating or rotating objects  can be matrix-vector multiplication</li>
</ul>
</li>
<li>matrices 矩阵（复数</li>
</ul>
</li>
<li>calculus 微积分</li>
<li>statistics 统计</li>
</ul>
</li>
<li>basic physics <ul>
<li>Optics, 光学的</li>
<li>Mechanics  机械的</li>
</ul>
</li>
<li>misc 杂项<ul>
<li>Numerical analysis  数值分析</li>
<li>signal processing 信号处理</li>
<li>aesthetics 审美</li>
</ul>
</li>
</ul>
<h3 id="vectors"><a href="#vectors" class="headerlink" title="vectors"></a>vectors</h3><p>noting: 只记了part</p>
<ul>
<li><p>unit vector </p>
<ul>
<li>单位向量，</li>
<li>用来代表方向</li>
</ul>
</li>
<li><p>dot  product in graphics</p>
<ul>
<li><p>$\vec{a}\cdot\vec{b} = |\vec{a}|\cdot|\vec{b}|cos\theta$ </p>
</li>
<li><p>Find angle between two vectors  (e.g. cosine of angle between light source 光源 and surface表面)</p>
</li>
<li><p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/image/20210913231823.png" alt="image-20210913215253056"></p>
</li>
<li><p>Finding <strong>projection</strong> of one vector on another</p>
<ul>
<li><p>measure how close two directions are</p>
</li>
<li><p>decompose分解 a vector </p>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/image/20210913231937.png" alt="image-20210913215715680" style="zoom:50%;" /></p>
</li>
<li><p>determine forward or backward</p>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/image/20210913231938.png" alt="image-20210913215758162" style="zoom: 50%;" /></p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>cross product in graphics</p>
<p>​    <img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/image/20210913231939.png" alt="image-20210913220439863" style="zoom: 50%;" /></p>
<ul>
<li>Direction determined by right-hand rule</li>
</ul>
</li>
<li><p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/image/20210913231940.png" alt="image-20210913220739158"></p>
<ul>
<li>Useful in constructing coordinate systems (later)</li>
<li>Determine left / right</li>
<li>Determine inside / outside</li>
</ul>
</li>
<li>Orthonormal bases and coordinate frames  正交基底和坐标系<ul>
<li>Critical issue is transforming between these systems/ bases</li>
</ul>
</li>
</ul>
<h3 id="matrices"><a href="#matrices" class="headerlink" title="matrices"></a>matrices</h3><p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/image/20210913231941.png" alt="image-20210913223344462" style="zoom:50%;" /></p>
<ul>
<li>$(AB)^{T} = B^{T}A^{T}$</li>
<li>$AA^{-1} = A^{-1}A = I$</li>
<li>$(AB)^{-1} = B^{-1}A^{-1}$</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/image/20210913231942.png" alt="image-20210913223854494" style="zoom: 50%;" /></p>
<p>In Graphics, pervasively used to represent transformations</p>
<ul>
<li>translation, rotation,shear剪切,scale缩放</li>
</ul>
<h2 id="Lecture-3-Transformation"><a href="#Lecture-3-Transformation" class="headerlink" title="Lecture 3: Transformation"></a>Lecture 3: Transformation</h2><h3 id="why-study-transformation"><a href="#why-study-transformation" class="headerlink" title="why study transformation"></a>why study transformation</h3><ul>
<li>modeling<ul>
<li>translation</li>
<li>rotation</li>
<li>scaling</li>
</ul>
</li>
<li>viewing<ul>
<li>3D (projection)</li>
<li>2D (projection)</li>
</ul>
</li>
</ul>
<h3 id="2D-transformations"><a href="#2D-transformations" class="headerlink" title="2D transformations:"></a>2D transformations:</h3><ul>
<li><p>representing transformations using matrices</p>
</li>
<li><p>rotation</p>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/image/20210914135044.png" alt="image-20210914135044036" style="zoom:50%;" /></p>
<ul>
<li>$R_{\theta} = \begin{bmatrix} cos\theta &amp; -sin\theta \ sin\theta &amp; cos\theta \end{bmatrix} $</li>
<li>$R<em>{-\theta} = \begin{bmatrix} cos\theta &amp; sin\theta \ -sin\theta &amp; cos\theta \end{bmatrix} = R</em>{\theta}^{T} = R_{\theta}^{-1}(by \quad definition) $</li>
<li>正交矩阵： A·A^T^ = E</li>
<li>默认绕原点旋转</li>
<li>默认逆时针旋转</li>
</ul>
</li>
<li><p>scale matrix</p>
<p>$\begin{bmatrix} x^{‘} \ y^{‘} \end{bmatrix} = \begin{bmatrix} s<em>{x} &amp; 0 \ 0 &amp; s</em>{y} \end{bmatrix}\begin{bmatrix} x \ y \end{bmatrix}$</p>
</li>
<li><p>reflection matrix 反射（镜像）矩阵</p>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/image/20210914124142.png" alt="image-20210914124142211" style="zoom: 50%;" /></p>
<p>$\begin{bmatrix} x^{‘} \ y^{‘} \end{bmatrix} = \begin{bmatrix} -1 &amp; 0 \ 0 &amp; 1\end{bmatrix}\begin{bmatrix} x \ y \end{bmatrix}$</p>
</li>
<li><p>shear matrix</p>
<p>​    <img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/image/20210914134639.png" alt="image-20210914134632720" style="zoom: 50%;" /></p>
<p>$\begin{bmatrix} x^{‘} \ y^{‘} \end{bmatrix} = \begin{bmatrix} -1 &amp; a \ 0 &amp; 1\end{bmatrix}\begin{bmatrix} x \ y \end{bmatrix}$</p>
<ul>
<li>Hints:<ul>
<li>horizontal shift is 0 at y = 0</li>
<li>horizontal shift is a at y = 1</li>
<li>vertical shift is always</li>
</ul>
</li>
</ul>
</li>
<li><p>Linear transforms </p>
<ul>
<li>线性变换：可以用一个矩阵表示的变换</li>
<li>x’ = ax + by</li>
<li>y’ = cx + dy</li>
<li>$\begin{bmatrix} x^{‘} \ y^{‘} \end{bmatrix} = \begin{bmatrix} a &amp; b \ c &amp; d \end{bmatrix}\begin{bmatrix} x \ y \end{bmatrix}$</li>
</ul>
</li>
</ul>
<h3 id="Homogeneous-coordinates-齐次坐标"><a href="#Homogeneous-coordinates-齐次坐标" class="headerlink" title="Homogeneous coordinates 齐次坐标"></a>Homogeneous coordinates 齐次坐标</h3><ul>
<li><p>Why homogeneous coordinates  </p>
<p>for example:  translation</p>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/image/20210914135553.png" alt="image-20210914135548707" style="zoom:50%;" /></p>
<p>$\begin{bmatrix} x^{‘} \ y^{‘} \end{bmatrix} = \begin{bmatrix} a &amp; b \ c &amp; d \end{bmatrix}\begin{bmatrix} x \ y \end{bmatrix} + \begin{bmatrix} t<em>{x} \ t</em>{y} \end{bmatrix} $</p>
<ul>
<li><p>so, translation is not linear transform!</p>
</li>
<li><p>因为平移变换不能直接用一个矩阵表示，必须加一个向量；  </p>
</li>
<li><p>add a third coordinates</p>
<p>引入齐次坐标可以解决问题，让平移也能只用一个矩阵表示</p>
</li>
<li><p>2D point = (x,y,1)^T^</p>
</li>
<li><p>2D vector = (x,y,0)^T^</p>
</li>
<li><p>向量 + 向量，结果齐次项是0，还是向量</p>
</li>
<li><p>点 - 点，得到的是一个向量，齐次项也变成0 </p>
</li>
<li><p>点 + 向量，表示一个点的移动，结果 还是点 ！</p>
</li>
<li><p>点 + 点是什么呢？齐次项变成2。将所有项除以2，齐次项又变为1 。所以点 + 点结果实际上是两个点的中点。</p>
</li>
</ul>
</li>
<li><p>Affine  transformation 仿射变换</p>
<ul>
<li><p>仿射变换：先线性变换再加上一次平移</p>
</li>
<li><p>$\begin{bmatrix} x^{‘} \ y^{‘} \ 1 \end{bmatrix} = \begin{bmatrix} a &amp; b &amp; t<em>{x}\ c &amp; d  &amp; t</em>{y}  \ 0 &amp; 0 &amp; 1 \end{bmatrix} \begin{bmatrix} x \  y \ 1 \end{bmatrix} $</p>
</li>
<li><p>scale </p>
<p>$ S(s<em>{x}, s</em>{y}) = \begin{bmatrix} s<em>{x} &amp; 0 &amp; 0 \ 0 &amp; s</em>{y}  &amp; 0  \ 0 &amp; 0 &amp; 1 \end{bmatrix}$</p>
</li>
<li><p>rotation </p>
<p>$ R(\alpha) = \begin{bmatrix} cos\alpha &amp; -sin\alpha &amp; 0 \ sin\alpha &amp; cos\alpha  &amp; 0  \ 0 &amp; 0 &amp; 1 \end{bmatrix}$</p>
</li>
<li><p>translation</p>
<p>$ T(t<em>{x}, t</em>{y}) = \begin{bmatrix} 1 &amp; 0 &amp; t<em>{x} \ 0 &amp; 1  &amp; t</em>{y} \ 0 &amp; 0 &amp; 1 \end{bmatrix}$</p>
</li>
</ul>
</li>
<li><p>transform ordering matters</p>
<ul>
<li>matrix multiplication is not commutative 可交换的</li>
</ul>
</li>
</ul>
<h3 id="composing-transforms"><a href="#composing-transforms" class="headerlink" title="composing transforms"></a>composing transforms</h3><ul>
<li><p>decomposing complex transforms</p>
<ul>
<li>translate center to origin</li>
<li>rotate</li>
<li>translate back</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/image/20210914142248.png" alt="image-20210914142248083"></p>
<p>which means $T(c) · R(\alpha) · T(-c)$</p>
<ul>
<li><p>分解：变换可以分解，注意先后顺序是从右到左</p>
</li>
<li><p>2D变换矩阵（缩放，旋转，平移变换）</p>
</li>
</ul>
</li>
<li></li>
</ul>
<h2 id="Lecture-4：-Transformation-Cont"><a href="#Lecture-4：-Transformation-Cont" class="headerlink" title="Lecture 4： Transformation Cont"></a>Lecture 4： Transformation Cont</h2><h3 id="3D-transformations"><a href="#3D-transformations" class="headerlink" title="3D transformations"></a>3D transformations</h3><ul>
<li><p>3D point = (x,y,z,1)^T^</p>
</li>
<li><p>3D vector = (x,y,z,0)^T^</p>
</li>
<li><p>$\begin{bmatrix} x^{‘} \ y^{‘} \ z<em>{‘} \ 1 \end{bmatrix} = \begin{bmatrix} a &amp; b &amp; c &amp; t</em>{x}\ d &amp; e &amp; f &amp; t<em>{y}\g &amp; h &amp; i &amp; t</em>{z}  \ 0 &amp; 0 &amp; 0 &amp; 1 \end{bmatrix} \begin{bmatrix} x \ y \z \ 1 \end{bmatrix} $</p>
</li>
<li><p>三维空间中的齐次变换，最后一行和二维变换类似，是0 0 0 1，平移还是在矩阵最后一列</p>
</li>
<li><p>对于仿射变换，是先应用线性变换，再加上平移</p>
</li>
<li><p>what is order?</p>
<ul>
<li><p>linear transform first or translation first?</p>
</li>
<li><p>scale </p>
<p> $S(s<em>{x}, s</em>{y},s<em>{z}) = \begin{bmatrix} s</em>{x} &amp; 0 &amp; 0 &amp; 0\ 0 &amp;  s<em>{y} &amp; 0 &amp; 0\0 &amp; 0 &amp;  s</em>{z} &amp; 0  \ 0 &amp; 0 &amp; 0 &amp; 1 \end{bmatrix}  $</p>
</li>
<li><p>translation</p>
<p> $T(t<em>{x}, t</em>{y}, t<em>{z}) = \begin{bmatrix} 1 &amp; 0 &amp; 0 &amp; t</em>{x}\ 0 &amp;  1 &amp; 0 &amp; t<em>{y} \0 &amp; 0 &amp;  1 &amp; t</em>{z}  \ 0 &amp; 0 &amp; 0 &amp; 1 \end{bmatrix}  $</p>
</li>
<li><p>rolation</p>
<ul>
<li>rolation around x-, y-,or  z-axis</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/image/20210914203113.png" alt="image-20210914203043532" style="zoom:50%;" /></p>
<ul>
<li>绕哪个轴旋转，哪个坐标就不变</li>
<li><p>不过𝑅𝑦矩阵稍微不同，其他两个都是右上角𝑠𝑖𝑛是负的，只有他是左下角𝑠𝑖𝑛是负的 因为𝑥叉乘𝑦得到𝑧，𝑧叉乘𝑦得到𝑥，但是𝑧叉乘𝑥得到𝑦（而不是𝑥叉乘𝑧），所以是反的</p>
</li>
<li><p>$R<em>{xyz}(\alpha, \beta, \gamma) = R</em>{x}(\alpha)R<em>{y}(\beta)R</em>{z}(\gamma)$</p>
</li>
</ul>
</li>
<li><p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/image/20210914220209.png" alt="image-20210914220208915"></p>
</li>
</ul>
</li>
</ul>
<h3 id="Viewing-观测-transformation"><a href="#Viewing-观测-transformation" class="headerlink" title="Viewing (观测) transformation"></a>Viewing (观测) transformation</h3><ul>
<li><p>View (视图) / Camera transformation  </p>
<ul>
<li>Think about how to take a photo <ul>
<li>Find a good place and arrange people (model transformation) </li>
<li>Find a good “angle” to put the camera (view transformation)</li>
<li>Cheese! (projection transformation)<ul>
<li><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/image/20210914224154.png" alt="image-20210914224154439"></li>
<li>定义相机</li>
<li>位置</li>
<li>往哪看</li>
<li>向上方向</li>
<li>现实中是移动相机，变换景物</li>
<li>图形学中，相机不动，永远在原点</li>
<li><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/image/20210914223830.png" alt="image-20210914223829896" style="zoom:50%;" /></li>
<li>经过变换，把相机的位置移动到原点，同时保持看到的景物不变</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/image/20210914225726.png" alt="image-20210914225726865"></p>
</li>
<li><p>这个从“歪”的坐标轴旋转回正的坐标轴，不太好写。 但是这个变换的逆过程，即：从正的坐标轴旋转到“歪”的坐标轴，是好写的， 于是我们先写从“正”坐标轴变换到“歪”坐标轴的变换矩阵，再求其逆矩阵，就可以得到待求的变换矩阵。 又因为旋转矩阵是正交矩阵，所以他的逆矩阵就只需要转置一下就可以得到了！ 注意，不但相机要做这个变换，其他物体也要做这个变换，因为我们想让相机看到的景物相对不变。 （以上部分个人认为非常巧妙和关键！）</p>
</li>
<li><p>Projection (投影) transformation</p>
<ul>
<li><p>3D to 2D</p>
</li>
<li><p>Orthographic (正交) projection  </p>
<p> <img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/image/20210914230822.png" alt="image-20210914230821994"></p>
<ul>
<li><em>没有近大远小</em></li>
<li>平行投影<ul>
<li>首先定义空间中一个立方体，将其translate，使其中心在原点，再scale成标准立方体（边长为2</li>
</ul>
</li>
<li><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/image/20210915120758.png" alt="image-20210915120758604"></li>
<li>再次提醒，注意𝑧轴是近大远小 OpenGL等API是反过来的</li>
</ul>
</li>
<li><p>Perspective (透视) projection</p>
<p> <img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/image/20210914230840.png" alt="image-20210914230840011"></p>
<ul>
<li><p>更像人眼看到的场景</p>
</li>
<li><p>Most common in Computer Graphics, art, visual system </p>
</li>
<li><p>Further objects are smaller </p>
</li>
<li><p>Parallel lines not parallel; converge to single point</p>
</li>
<li>Recall: property of homogeneous coordinates<ul>
<li>(x, y, z, 1), (kx, ky, kz, k != 0), (xz, yz, z2, z != 0) all represent  the same point (x, y, z) in 3D </li>
<li>e.g. (1, 0, 0, 1) and (2, 0, 0, 2) both represent (1, 0, 0)</li>
</ul>
</li>
<li>how to do perspective projection<ul>
<li><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/image/20210915122816.png" alt="image-20210915122816233"></li>
<li>先将frustum远平面，挤压成和近平面一样大（从左图变成右图）</li>
<li>再做正交投影，投影到近平面</li>
<li>上述操作过程中几点假设：<ul>
<li>1）近平面保持不变 </li>
<li>2）z值保持不变，只是向内收缩</li>
</ul>
</li>
</ul>
</li>
<li><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/image/20210915122907.png" alt="image-20210915122907760"></li>
<li><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/image/20210915122956.png" alt="image-20210915122956833"></li>
<li>挤压这一步怎么做？ 上图是从侧面观察frustum 用相似三角形知识可以得到新坐标的表达式，但是第三个分量目前还不知道（这里利用之前讲的那个性质： 齐次坐标，如果我们对点的坐标所有分量同时乘以k，他表示的还是原来那个点！  </li>
<li><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/image/20210915123123.png" alt="image-20210915123123207"></li>
<li><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/image/20210915123140.png" alt="image-20210915123140120"></li>
<li>如何求解第三行<ul>
<li>任何近平面上的点不会改变（也就是对于任意的(𝑥, 𝑦, 𝑛, 1)，经过这个矩阵变换后，点的位置仍然不变）</li>
<li>任何远平面上的点，𝑧值不会改变</li>
<li><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/image/20210915123415.png" alt="image-20210915123415483"></li>
<li>点(𝑥, 𝑦, 𝑧, 1)是可以通过矩阵变换得到(𝑛𝑥, 𝑛𝑦, 𝑢𝑛𝑘𝑛𝑤𝑜𝑛, 𝑧)向量的。 根据上文提到的性质（1），经过这个变换，点实际没有改变 而同时，(𝑥, 𝑦, 𝑧, 1)本身可以写成(𝑥, 𝑦, 𝑛, 1)（为什么把𝑧替换成𝑛？因为近平面的𝑧坐标就是都是𝑛，所以可以做这个替换。）然后同时乘以𝑛， 变成(𝑛𝑥, 𝑛𝑦, 𝑛 ଶ , 𝑛) 经过上面两个推导，可以看出，第三行前两个数一定是0 因为𝑛 ଶ这个分量和𝑥和𝑦都毫无关系，因此前两个数必定是0 这样，我们就解出了第三行前两个数，都是0 接下来求A和B</li>
<li><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/image/20210915123500.png" alt="image-20210915123459854"></li>
<li>远平面上有一个特殊点，(0, 0, 𝑓)经过变换挤压仍然不变 所以(0, 0, 𝑓)经过变换仍然是(0, 0, 𝑓) 根据近平面我们得到$An + B = n^{2}$,根据远平面的中心点我们得到$Af + B = f^{2}</li>
<li><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/image/20210915123625.png" alt="image-20210915123625508"></li>
<li>这样我们就能解出A和B了， 这样终于把从透视投影挤压成正交投影的矩阵，解出来了</li>
<li><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/image/20210915123651.png" alt="image-20210915123651566"></li>
</ul>
</li>
</ul>
</li>
<li><p>思考题</p>
<ul>
<li><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/image/20210915123710.png" alt="image-20210915123709902"></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Lecture05-Rasterization-1-Triangles"><a href="#Lecture05-Rasterization-1-Triangles" class="headerlink" title="Lecture05: Rasterization 1(Triangles)"></a>Lecture05: Rasterization 1(Triangles)</h2><h3 id="Finishing-up-Viewing"><a href="#Finishing-up-Viewing" class="headerlink" title="Finishing up Viewing"></a>Finishing up Viewing</h3><ul>
<li>Viewport(视口) transformation</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20211005190732.png" alt="image-20211005190731847" style="zoom: 50%;" /></p>
<p>上节课把透视投影转化成正交投影 这里引入另外一个概念 Field of View，表示你能看到的角度的范围 注意看上图中红色线的夹角，就是垂直可视角度，他越大，可视角度越大 同理还有水平可视角度</p>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20211005190927.png" alt="image-20211005190926969"></p>
<p>MVP这三个变换之后，所有东西都会停留在一个1，1，1的位于原点的标准立方体中 下一步就要把这立方体画在屏幕上</p>
<h3 id="Rasterization（光栅化，即把东西花在屏幕上"><a href="#Rasterization（光栅化，即把东西花在屏幕上" class="headerlink" title="Rasterization（光栅化，即把东西花在屏幕上"></a>Rasterization（光栅化，即把东西花在屏幕上</h3><h4 id="屏幕"><a href="#屏幕" class="headerlink" title="屏幕"></a>屏幕</h4><ul>
<li><p>像素是最小的屏幕单位</p>
</li>
<li><p>每个像素有不同的颜色</p>
</li>
<li><p>屏幕空间：就是给屏幕定义一个坐标系 比如，可以定义左下角是原点。 </p>
</li>
<li><p>实际上像素的中心是(𝑥 + 0.5, 𝑦 + 0.5)</p>
</li>
<li><p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20211005191523.png" alt="image-20211005191523440"></p>
</li>
<li><p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20211005191557.png" alt="image-20211005191556944"></p>
<p>我们要做的就是把标准立方体空间映射到屏幕这个二维世界中去 𝑧暂时不管 其他两个坐标是[−1, 1] ଶ转换到 [0, 𝑤𝑖𝑑𝑡ℎ] ∗ [0, ℎ𝑒𝑖𝑔ℎ𝑡] 使用上面这个矩阵做变换</p>
</li>
</ul>
<h4 id="Rasterizing-a-triangle"><a href="#Rasterizing-a-triangle" class="headerlink" title="Rasterizing  a triangle"></a>Rasterizing  a triangle</h4><ul>
<li><p>三角形可以拼接在三维空间中的面，或者二维空间中复杂的图形 </p>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20211005191718.png" alt="image-20211005191718242"></p>
</li>
<li><p>三角形内部一定是平面的 </p>
</li>
<li>给三角形顶点定义不同属性，可以在三角形内部进行插值</li>
<li>通过采样的方式，来画出三角形<ul>
<li>采样就是把函数离散化的过程</li>
<li>可以对时间，面积，方向，体积… 进行采样</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20211005191941.png" alt="image-20211005191941468"></p>
<p>定义二值函数：</p>
<script type="math/tex; mode=display">
inside(tri, x,y) = \left\{\begin{array}{rcl}
1  &      & {Point(x,y) \ in  \ triangle \ t}\\
0  &      & {otherwise}\\
\end{array}\right.</script><ul>
<li><p>这里我们要做的就是给定一个三角形，判断像素中心是否在三角形内部。</p>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20211005192820.png" alt="image-20211005192820679"></p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20211005192920.png" alt="image-20211005192920137"></p>
<p>那么，如何判断一个点是否在三角形内？用叉乘！！ 比如对上图，判断Q是否在三角形内部 首先$𝑃1𝑃2 \  X \ 𝑃1𝑄 $，将会得到一个z为正数的向量，也就是结果向量朝向屏幕外的，利 用右手定则，可以得知𝑄在𝑃1𝑃2的左侧（因为如果在右侧，那么结果将会是向量𝑧为负 数，那么结果向量就朝向屏幕内部） 类似的𝑃2𝑃0 𝑋 𝑃2𝑄，得到𝑄在右侧，不对劲！ 𝑃0𝑃1 𝑋 𝑃0𝑄，得到𝑄在左侧</p>
<p>注意，向量按照一定的顺序去判断，比如我们上面是按照P1, P2, P0去判断的</p>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20211005193137.png" alt="image-20211005193137111"></p>
<p>检查屏幕所有的像素太花时间！ 可以只检查蓝色的包围盒（Bounding box）部分</p>
<p><img src="https://cdn.jsdelivr.net/gh/ChangQingAAS/for_picgo/img/20211005193213.png" alt="image-20211005193213667"></p>
<p>也可以每一行设置一个包围盒，进一步减小包围盒 很适用于那种三角形很小，但是包围盒很大的（窄长三角形</p>
]]></content>
      <categories>
        <category>CG</category>
      </categories>
      <tags>
        <tag>CG</tag>
      </tags>
  </entry>
  <entry>
    <title>墨子平台训练教程</title>
    <url>/MARL/MADRL/%E5%A2%A8%E5%AD%90%E5%B9%B3%E5%8F%B0%E8%AE%AD%E7%BB%83%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>下面介绍一下windows版本墨子平台的使用流程：</p>
<ol>
<li><h2 id="进入华戍防务-官网-hs-defense-com-下载软件"><a href="#进入华戍防务-官网-hs-defense-com-下载软件" class="headerlink" title="进入华戍防务 官网(hs-defense.com)下载软件"></a>进入<a href="http://www.hs-defense.com/col.jsp?id=105">华戍防务 官网(hs-defense.com)</a>下载软件</h2></li>
</ol>
<p>我下载的是<code>墨子·联合作战推演系统（个人版）</code> </p>
<p><code>墨子·AI开发包</code>主要是一些开发会用到的代码和文档。代码也可以在gitee.com上找到：<a href="https://gitee.com/hs-defense/moziai">moziai: 墨子AI开发包及“子牙”智能体开源代码  </a></p>
<p><code>竞赛客户端(互联网)</code> 主要是用来军事推演比赛的，与强化学习训练关系不大，可以不下载。</p>
<p><code>墨子·AI版（Linux)</code> 因为一开始没办法下载，后面断断续续也没有弄出什么效果</p>
<p>注：</p>
<ul>
<li><p>文件采用ftp协议下载，下载链接格式为：ftp: ip/port/文件夹s/文件</p>
</li>
<li><p>由于部分浏览器不支持，推荐使用QQ浏览器下载</p>
</li>
<li><p>一般点击下载按钮后，会默认让迅雷接管下载</p>
</li>
</ul>
<ol>
<li><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><p>​    根据安装手册安装该软件，基本上按照手册进行就可以了</p>
</li>
<li><h2 id="启动该软件"><a href="#启动该软件" class="headerlink" title="启动该软件"></a>启动该软件</h2><ol>
<li>进入安装目录下的\MoziData，右键点击<code>mysql.bat</code>，以管理员身份运行它，随后退出</li>
<li>进入安装目录下的\MoziServer，运行MoziServer.exe，尽量关掉杀毒软件，最好以管理员身份运行<ul>
<li>这里大概会遇到一个问题：<code>临时许可码过期，请联系华戍防务重新授权</code>，具体解决方案略</li>
<li>我在数据库方面也出过问题，不过忘了具体细节了</li>
</ul>
</li>
</ol>
</li>
<li><h2 id="运行代码，进行仿真训练"><a href="#运行代码，进行仿真训练" class="headerlink" title="运行代码，进行仿真训练"></a>运行代码，进行仿真训练</h2><ol>
<li><p>获取代码，在IDE打开代码</p>
</li>
<li><p>加载代码所需的scen想定文件</p>
<ul>
<li>进入墨子平台，可以在想定一栏下找到<code>加载想定</code>的选项，想定文件是从<code>安装路径\MoziServer\bin\Scenarios\</code>获取的，因此需要把代码包里的scen文件放到这里。</li>
<li>加载想定文件，选择推演方</li>
<li>随后可以看到墨子平台上有了具体的想定环境</li>
<li>如果要更改想定文件，改完之后，需要保存，再重新加载<ul>
<li>因为训练的每个回合都会刷新环境，如果不保存更改到新scen文件，那么这个更改只能用于一个回合</li>
</ul>
</li>
</ul>
</li>
<li><p>运行main.py代码即可看到效果</p>
<ul>
<li><p>注：</p>
<ul>
<li><p>这里可能需要指定一下 墨子平台的路径，可以执行代码</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">os.environ[&#39;MOZIPATH&#39;] &#x3D; &#39;D:\\MoZiSystem\\Mozi\\MoziServer\\bin&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>也可以在<code>编辑系统环境变量</code>中添加路径</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ol>
<p>注：Linux版本的墨子平台还在折腾，因为虚拟机比较卡，服务器上又没办法弄出显示界面，还折腾了一堆配置，最近还没弄，如果有结果了，会在这里更新的</p>
]]></content>
      <categories>
        <category>MARL</category>
      </categories>
      <tags>
        <tag>MARL</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>SurviveSJTUManual阅读笔记</title>
    <url>/%E4%B9%A6%E6%91%98/Books/%E3%80%8ASurviveSTJUManual%E3%80%8B%E6%91%98%E5%BD%95/</url>
    <content><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>这本书不是《逃课手册》或者《考前突击宝典》。我希望帮助各位读者做到的，绝不是简单的拿高分、或者顺利毕业。我衷心希望这本书能够带给读者一些新鲜的思考，让同学们能看到人生道路上不同的风景。至少在读过本书之后，各位读者应该能够有勇气、有智慧，去发现并挑战那些比上课更为重要的追求。</p>
<h2 id="立志篇"><a href="#立志篇" class="headerlink" title="立志篇"></a>立志篇</h2><h3 id="欢迎来到上海交通大学"><a href="#欢迎来到上海交通大学" class="headerlink" title="欢迎来到上海交通大学"></a>欢迎来到上海交通大学</h3><p>在本书的开始，不得不遗憾地告诉大家一个消息。国内绝大部分大学的本科教学，不是濒临崩溃，而是早已崩溃。我只是看到了无数充满求知欲、激情、与年轻梦想的同学们，将要把自己的四年青春，充满希望与信任地交给大学来塑造。这使我心中非常不安。</p>
<p>在当今流水线式的教育体制下，我们就像廉价的零件一样被生产出来。因为数量巨大，没人会对每一个人的教学质量负责。</p>
<p>领导不会为你负责。对于一个争做世界一流大学的研究型学校，管好科研，管好实验室才是当务之急。相比之下，本科生教学显得无利可图。教授也不会为你负责。拉到足够的经费发表足够的论文，满足学院要求才是生存大计。要说管学生，也肯定先要管好自己实验室的硕士博士，而非那一百多人大课堂里的某个本科生。就算是科研任务不太重的一些任课教师，他们也不会为你负责。</p>
<p>真正在课堂上口传心授的教学，其质量是不会有人过问的。教学评估会考察实验报告格式是否合格，出勤率是否够，但是绝对不会考察上百人的班上到底有几个听懂了的。</p>
<h3 id="你想要什么"><a href="#你想要什么" class="headerlink" title="你想要什么"></a>你想要什么</h3><h4 id="认清自己的技术栈"><a href="#认清自己的技术栈" class="headerlink" title="认清自己的技术栈"></a>认清自己的技术栈</h4><p>随着本科、硕士、博士的扩招下，中国开始享受着“工程师红利”，各行业从业人员受教育程度稳步提升，中国制造产业升级也是国家大计之一，但目前我国存在着新增中高端就业岗位数量跟不上大学、研究生毕业生数量增长的问题，与经济增速下滑相叠加，每年都会看到类似“大学生最难就业季”的新闻，交大的出身足以让你在找工作的时候拿到多份offer，但想要去理想的公司以及职位，你需要对自己的技术栈和目标职位的需求技术栈有足够清醒的认知，及时补足短板。你未来可能会用到的能力包括但不限于：</p>
<ol>
<li><p>本专业的专业知识，这是你安身立命的根本，对本领域有中长期的判断</p>
</li>
<li><p>表达能力，如何去说服你的上司还有顾客理解并接受你的idea和产品</p>
</li>
<li><p>相关信息检索、过滤、总结、可视化等的能力</p>
</li>
<li><p>交际能力，向别人展现自己的价值，在自己需要帮助的时候也能找到最合适的朋友寻求帮助</p>
</li>
<li><p>抗压能力，主要是对逆境的适应力、容忍力、耐力，能较好应对生活工作中的挫折</p>
</li>
<li><p>独立思考，在信息过载的当下尽量避免被错误消息带节奏</p>
</li>
<li><p>时间管理，以后的日子里你会被生活的柴米油盐和很多工作学习以外的杂事消耗精力，再也不是大学以前父母帮你操办大部分事情了，你需要高效管理利用剩余的时间</p>
</li>
</ol>
<h4 id="本科毕业之后你想做什么"><a href="#本科毕业之后你想做什么" class="headerlink" title="本科毕业之后你想做什么"></a>本科毕业之后你想做什么</h4><p>四年很长，四年也很短，大学里会有一部分同学享受着校园的舒适生活，不知不觉间被温水煮了青蛙（尤其是文社科专业的同学），校园相对稳定安逸的生活在已经成为“社畜”的人看来是非常奢侈的。日后在社会上安身立命的技能多还是在校园中培养，你也需要在恰当的时间点跳出这种舒适生活的幻象为以后工业界/学术界的工作打好基础，如若拖延症到本科晚期才发现四顾茫然不知如何在社会上立足，GPA高的同学或许还能靠保研直博暂缓进入社会的进度条（当然很多同学保研直博也是一开始就定下的目标，并未考虑过直接进入社会），学业不佳的同学或许要再像准备高考一样备战考研了，而近些年考研难度也是在肉眼可见地提升。进入社会之后人生的分支要比学校里多得多，在此也不一一举例，在象牙塔里被保护得久了容易跟现实社会脱节，这些东西要留给你自己去摸索。</p>
<h4 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h4><p>“懂得很多道理，却依旧过不好这一生”以后阅读这本小册子的人可能千千万，但大家毕业后的境遇会千差万别，这可能是由于同学们认知能力、运气与机遇、执行能力、家里提供的支持等等不同所导致的。</p>
<h3 id="失败的思维方式"><a href="#失败的思维方式" class="headerlink" title="失败的思维方式"></a>失败的思维方式</h3><h4 id="分数至上"><a href="#分数至上" class="headerlink" title="分数至上"></a>分数至上</h4><p>我们的体制总倾向于用一个量化的分数来概括衡量一个人。</p>
<p>如果一个人把政策评分作为自己的至高追求，那么他就是这个政策的牺牲品。</p>
<p>就算你把课本上的内容搞得再烂熟，绝不代表你真正对这门课能有什么理解（相反，那些真正理解的人，却不一定能针对考点答出高分）。</p>
<p>请务必牢记：大学四年留给你的是你的人生，在你毕业之时，那一串苍白的分数其实就已经作废了。</p>
<h4 id="被动思维"><a href="#被动思维" class="headerlink" title="被动思维"></a>被动思维</h4><p>无论做什么，我们都需要给自己一个理由。每天迫于生活压力，毫无主见地忙碌着，可称得上人生一大悲哀。</p>
<p>在迈进大学校门的时候，我们面临的最大问题是：为什么要上课？ </p>
<p>“怕老师点名”、“为了抄笔记作业”、“记录考试重点” . . . 这些话，充其量只是我们被迫上课的借口，却不能成为我们心悦诚服去上课的理由。</p>
<p>真正能成为我们上课理由的，只有我们对科学文化知识的渴望。</p>
<p>如果是否上课对你的考试成绩影响不大；如果我们感兴趣的知识不在学校的课程表上；如果上课学习的效果足够差，效率足够低，以至于通过自习，能够在更短的时间掌握知识；那么，我想你已经有答案了。</p>
<h3 id="悲壮的学习方式"><a href="#悲壮的学习方式" class="headerlink" title="悲壮的学习方式"></a>悲壮的学习方式</h3><p>挖空心思研究解题技巧的学生们，与同样挖空心思研究出题技巧的老师们，构成了一个完美的圆环。在二者日复一日的机械劳动中，我只看到纸张、电力，以及粮食不断被浪费，却看不到中华之崛起。</p>
<p>我无意全盘否定同学们吃苦耐劳的精神，但这份精神充其量只能称为悲壮。我们耗费了大量的时间和精力掌握的那些考点、技巧，在真正的知识殿堂里根本登不上大雅之堂。哪怕我们特征值求得再熟练，积分积得再复杂，中国的载人飞船也不会因此而顺利上天。</p>
<p>一个真正有志于建造科学大厦的人，是不应抱着一块儿砖头精雕细琢的。</p>
<p>学习最需要的，不是悲壮的毅力，而是对无限未知的渴求。</p>
<p>最终来说，学习知识的目的是为后继的知识铺垫，以及培养创造性的思维。所谓有效率的学习，应当是以最高的效率获取知识，服务这两个目标。从现状来看，我们想要把什么都搞扎实的学习习惯，其效率是极端低下的，而在我们通过大量习题，最终扎实掌握的信息里，有效的“知识”却又是如此的少。</p>
<h3 id="你的身价是多少"><a href="#你的身价是多少" class="headerlink" title="你的身价是多少"></a>你的身价是多少</h3><p>从本质上说，绝大部分同学们之所以选择大学毕业后再参加工作，是看上了更加体面的薪资待遇——大学毕业之后，我们的劳动会变得更有价值。在此，请不要提及所谓“劳动平等”之类的错误观点。劳动所创造的价值从来都不是均等的，而且不同行业的劳动早已明码标价了。</p>
<p>作为一名大学生，我们要对自己的能力和将来的身价有一份清醒而客观的期望。在面对各种兼职的时候，我们必须先说服我们的自尊：</p>
<p>参加这样的工作，我们是不是正在以过于低廉的价格出卖自己的劳动力？</p>
<p>对于生计无虞的同学们，我们更应该做的不是为了蝇头小利在最底层的劳动中苦苦挣扎，而是应当积极地利用这份时间来提高我们的身价，为今后出卖高价值劳动创造机会。</p>
<h3 id="正确地浪费剩下的时间"><a href="#正确地浪费剩下的时间" class="headerlink" title="正确地浪费剩下的时间"></a>正确地浪费剩下的时间</h3><p> 如果说，毕业文凭是一项增值服务，那么大学四年就是一笔投资。</p>
<p>相比宝贵的青春，我们在上学期间所需要的学费和生活开销几乎可以忽略不计。我们真正投下的有价值的筹码，是时间。面对着足以改变你人生轨迹的黄金时间，你是否感到了它的沉重？你又是否想过要如何计划这笔巨额投资？</p>
<p>如果你是一名乖孩子，每天从早晨开始好好上课，好好做作业，好好预习、复习，直到熄灯时间好好睡觉，过着这种积极健康，平稳中庸的生活，但是缺乏有效自我支配的生活（如果按照学校的规划，你会发现你可以自由支配的业余时间少得可怜）。那么，你这样退守下去，无异于把自己的青春放在保险箱里让他随着时间而凋谢。我们必须牢记这样的黄金规则：</p>
<p>平庸的生活方式是麻醉药。他只会束缚你，让你没有作为，甚至没有出息地度过大学的四年。</p>
<p>无论你做的事情是否有意义——哪怕任何事情都不做，时间也会从我们的身边溜走。我们必须一日三省问自己，今天的时间是否过得有价值。</p>
<p>一般来说，一项任务的价值，取决于它在时间尺度上的作用效率。花同样的功夫，我们应该尽量多做那些对整个人生都产生正面影响的事情，少做对中期的未来产生影响的事情，不做那些只对近期产生影响的事情。当然，产生负面影响的事是最应该避免的。从这个意义上说，花适当的时间锻炼身体能让我们终身受益，值得做；但是即便只花同样时间，我们也不应该打游戏，因为那只能获得转瞬即逝的空虚的精神愉悦。</p>
<p>其实，何止是体育锻炼与打游戏。我们上课、学习、考试这些事情是否真的值得去做，也都必须经过理性而批判的思考才能做出正确的决定。</p>
<p>有不少同学是为了 GPA 而上课。这些同学的错误在于，首先他们没有意识到，有许多提升 GPA 的办法比上课更为有效。</p>
<p>同时，这些同学更没有想过 GPA 本身是否是一件重要的事情。我们很遗憾地承认，由于舆论的导向， GPA 几乎成为了我们大学的一切。在短期，它绝对是重要的。除非你要保研或者转专业，其余的情况下 GPA 绝对不是最重要的因素。 </p>
<p>如果把目光放得稍微长远些，哪怕只是毕业后一两年， GPA 就会贬得一文不值。我们是不是应该为了这一块“敲门砖”而折衷了我们的远期目标？</p>
<p>安排时间道理真的很浅显：成功人士往往会津津乐道于他们在校期间锻炼出的专业素养，但几乎没有成熟（甚至不需要成功）的人，喜欢炫耀自己当年高数考了年级第一。</p>
<p>在另外一些时候，我们会给“上课”找一个更加堂而皇之的理由：学习知识。</p>
<p>关于大学课堂的教学质量以及课堂所关注的所谓“解题技巧”，我已经不想再作赘述。简而言之，上课中，我们获得有用知识的效率是如此之低，以至于任何一种有效的自习方式都会轻松地获得更大的回报。打比方说，一个学期的英语课，每周四节共计48小时。在课堂上，我们有一半时间要忍受台上同学支离破碎的英语。然而，花同样的时间，一个智力正常的同学完全可以熟练背诵2000个单词（这个数字是根据广大 GRE 考生的备考状况进行的保守估测）。这2000单词足够让你的英语水平整体上一个台阶。敢问，一个学期的英语课，你又能学到什么呢？最多不过是熟练背诵那本来就已经很寒碜的课文而已。当然，英语课只是例子，你会发现你身边几乎充满了更值得谴责的例子，其中不少比英语课更甚。这些事情经常会包括（但不限于）：</p>
<p>• 学生会议。几乎所有的学生会议，无论是在大礼堂举办的全校大会，还是社团头目临时占用教室举行的小规模会议，都有一个共同点，那就是毫无效率可言。</p>
<p>• 毫无组织的学生活动。通常在无组织的集体活动中，等人、闲谈总要花半个小时的时间。甚至让人怀疑活动的主题就是等人和闲谈。</p>
<p>• 费时费力不讨好，但是碍于面子不好推脱的临时工作。学校很多老师或者学生领导，喜欢把人当壮丁使唤。但是你要时刻清醒，你的身份不是临时工。“帮忙救急”和“工作”这两个概念必须区别对待。</p>
<p>我们应该对计划时间下的工作量有足够认识。小到一小时、一天，大到一个暑假、一个学期，或者是大学四年，制定切实可行的计划，并为不能完成计划自责是最基本的要求。所谓的牛人和大多数庸人的主要差别，一方面在于有没有时间可以利用；再一方面，就是时间的利用率。我们必须时刻保持一种紧迫感，以保证时间不被虚度。只要你能把在校期间的时间正确地加以利用。不需要超人的天分——甚至不需要特别努力，你都有望在你的专业领域里出类拔萃。</p>
<h3 id="总有更值得做的事情"><a href="#总有更值得做的事情" class="headerlink" title="总有更值得做的事情"></a>总有更值得做的事情</h3><p>当我们迫于学校的教学计划，被迫选一些看上去比较没用的课程时，总会听到一些充满善意的劝慰：“这些知识多学一些也没有什么不好，没准哪天就能用得到呢！”这种话乍听起来仿佛很有道理，但实际上却是不折不扣的谎言。</p>
<p>我们之所以拒绝学习那些对自己不是特别有用的知识，是因为这些知识对我们的价值太低。</p>
<p>事务对我们都会有影响，其价值必须定量，而非定性地讨论。出去义务扫马路可以陶冶你的情操，还可以锻炼身体。坐在家里背单词背一天你可以学会数百个新单词，提升英语水平。按照上面提到的“善意的逻辑”，这两者各有好处，仿佛难以取舍。但是我想在实际操作中，不会有人认为前者对你的益处更大。</p>
<p>在打着各种华丽口号的诱惑面前，我们要保持清醒，并且时刻告诫自己</p>
<p>总有更值得做的事。</p>
<h3 id="做研究的兴趣"><a href="#做研究的兴趣" class="headerlink" title="做研究的兴趣"></a>做研究的兴趣</h3><p>当你站在巨人的肩膀上，开始进行独立研究的时候，你最需要的，是兴趣。不要说，“有研究经历好出国”，不要说“没什么其他好出路所以选择做研究”。浩然高科技大楼下的白骨告诉我们，没有兴趣的徒劳坚持通常是很危险的。在科研这条道路上，只有对一门学科的喜爱，才能成为你唯一和全部的动力。</p>
<p>走进一个学科之前，最先应该知道的是该学科的研究对象、研究方法，以及当前研究中的热点难点问题，而不应该被广告一样的花哨演示糊弄住。</p>
<p>开始搞研究，并不必然意味着你要和学校里一个实验室有行政上的关系。真正扎实的认识应当是从阅读和学习中开始的。你可以试着去看这个学科最新的影印版教科书。（顺便说一下，在绝大多数高新技术领域，对于教科书的选择，我们能接受的下限是外文作者的中文翻译。尝试阅读所谓国内专家的专著只会让你的思维变得更为混乱）如果在大致看完这些书籍之后，你还能保持之前的热情，那么我非常鼓励你尝试进入该方向进行更深入的研究。</p>
<p>如果去做研究，那么你从一开始就应该期望着自己能够做出影响到其他科研工作者的原创性工作。绝对不要随便跑到研究小组里给人端茶倒水，指望着通过打杂来获得一段所谓的“研究经历”，或者是一篇文章第N作者的署名权。在研究过程中，相关知识不够没关系，数学不好也没关系；但是无论如何，你需要保持一个独立思考的心态。如果有好一点的工作，可以发牛一点的文章；价值略低的工作也有名气小些的出版物可以发表。但归根结底，发表文章需要的是你的原创性思考。至于那些一年上百篇论文的高产教授和一年数十篇论文的高产学生们。我们只能很遗憾地说，他们的工作是不值一提的垃圾，这种人的存在，简直就是丢中国人的脸。</p>
<h2 id="访谈集"><a href="#访谈集" class="headerlink" title="访谈集"></a>访谈集</h2><h3 id="为了留学而出国"><a href="#为了留学而出国" class="headerlink" title="为了留学而出国"></a>为了留学而出国</h3><h4 id="为什么要出国"><a href="#为什么要出国" class="headerlink" title="为什么要出国?"></a>为什么要出国?</h4><p>我们希望你拥有的是一个“积极”的理由，也就是说，你是为了得到你想要的某样东西而选择出国这条道路，而不是因为你厌倦了当前的生活、想逃避现状而走上这条道路。在出国的问题上，这山看着那山高的心理是极其可怕的。如果在一个对你的血统没有歧视的国度里，在一个竞争并不算激烈、甚至生活上还称得上有保障的社会中，在一个对你来说没有任何语言、文化障碍的环境下，你都算不上一个成功者的话，你有什么资本可以奢望在出国后，自己能够摇身一变，以胜者的姿态生存下来？你又有什么理由不继续失败？你怎么就那么自信地说因为我在国内做不好，所以我出国就能做好？成功的人在不同的地方有不同的成功方式，但是失败的人在不同的地方会有完全相同的失败方法。</p>
<p>海的那边，一样很残酷。</p>
<p>某个环境的条件如何如何之好并不是你去到某个环境中的理由，你能从这个环境中获得什么样的成就，才是你前往某个环境的原因。</p>
<p>对一个人来说，事业上的成功需要很多的要素。那么，你所追求的事业，到底是需要更多知识？更广的人脉？还是实践能力？抑或是其他因素？对于绝大多数人，我们会惊奇地发现，我们并不是那么急迫地需要学术能力来带给自己更好的前途。若真如此，那么国外大学的学术优势对你就是毫无意义。于是，付出大量时间，换取一张文凭就不是一个很合理的选择。用同样的时间，你完全可以积累实践经验，并锻炼更有用的能力。高学历的文凭不是万能的，而青春实却又太过宝贵，是不是真的要下定决心毕业后读书，需要经过每个人的深思熟虑。</p>
<p>那么，什么样的人需要更多知识呢？当然，我们认为，那些希望继续从事学术研究工作的人。我们不仅鼓励这类人出国，而且我们还要更坚定地反对他们留在国内深造。</p>
<p>在国内的学术圈里，一方面大家忙于恶性竞争：导师划山头分派系，人际关系极度复杂，各种包括造假、剽窃等学术不端行为屡见不鲜；而另一方面，政府对科研的支持力度也小得可怜：我们怎么能指望一个博士生每个月工资不到800块钱，一边饿着肚子一边做出惊人的研究呢？这诸多的弊端，使得中国高校成为学术研究领域最差的环境之一。想在这样一个几乎没有高水平学术成果的泥潭中拔足前行，需要你付出的代价实在太大太大！这还只是从客观条件来说，而从对你的前途的影响来说，一个学术工作者，在博士阶段如果没有受到国外一流名校的严格训练的话，那么以后从事科研工作是非常困难的，因为在科研领域，做不到最好，就意味着你没有任何用途，你只有做出全世界最前沿最顶尖，别人没有做出来过的东西，才能算是科研。如果你没有在学生阶段受到良好的训练，那么以后你想靠学术研究作为谋生之计，基本没有可能。</p>
<p>如果你的目标只是出国，读书是代价最高昂，效率最低的下下策（如果你想在美国落地生根，需要的时间往往超过15年）。与外国人或者可以出国的人结婚，或者通过中介办理移民手续，都比读书要容易许多。（尤其是通过与外国人结婚，俗称的“抱白大腿”，可以几乎100%保证你在3年之内成功拿到外国国籍）</p>
<p>回顾一下，如果你属于以下几类中的一类，那么我们相对比较推荐你出国读书：</p>
<p>• 以科学研究作为自己事业目标的人。</p>
<p>• 经过认真考虑的希望通过学习知识来增加自己技术背景的人。</p>
<p>• 经过非常认真的考虑希望通过出国读书来达到定居国外的目的的人。</p>
<p>特别需要提醒的是，现在“海归”变“海待”的情况越来越多。而国内的用人单位也越来越理智，不会因为你在海外留过学，就断定你如何出色并加以重用。如果你自己没有就读 Harvard, Yale, Princeton 那种中国老百姓耳熟能详的名校，也没有在能力上真的比国内的同龄人有长足进步，就不要指望有哪个公司会因为一张海外文凭而重用你。更有可能发生的情况是：你出国镀金，回来之后发现你的同学早就已经变成了真金白银，但是人家一看你就知道你只是表面镀金，但肚子里没东西的水货。</p>
<h4 id="出国读什么学位什么专业"><a href="#出国读什么学位什么专业" class="headerlink" title="出国读什么学位什么专业?"></a>出国读什么学位什么专业?</h4><p>关于读博士，我们一再声明：不想做学术的人请务必不要读博士学位。</p>
<p>一个事实是，设置博士学位的唯一目的是培养顶尖科研人才。这个学位不考虑你的就业前景，不考虑你精神所能承受的压力，它唯一考虑的，是你在某一个领域做出了多大的开创性贡献。很多大学对培养博士生的期望，就是毕业之后成为专业领域的世界级专家。你在攻读博士学位期间所付出的努力，如果换算成金钱，绝对会比你在那几年拿到的奖学金多太多了！钱绝对不是读博士的原因。</p>
<p>我们要注意的第二个事实是，在读博士过程中，被导师压迫几乎是理所当然的事情。经常是学生第一个学期过来，老板就扔过来几篇乃至几十篇文章，要你写综述、或者实现文章中提到的研究方法、甚至被要求在这些论文的基础上做进一步改进。而到了后来，老板要求你每个学期都必须发领域顶级的会议或者期刊论文也是家常便饭。自然，与国内不同的是，这里的老板都很懂这一行，只要你有做不出来的东西去和老板交流，老板一定会帮助你。但是如果你天生就不具备独立的科研能力和科研素养，也没有热情和耐心去做，那么你就会天经地义地被博士项目淘汰了。</p>
<p>关于博士的第三个事实是，当你终于有一天博士生毕业后，你学到的东西往往太过于细化和深入，不能帮助你在工业界找到合适的工作。而去读博士后，继续混迹学术圈，又会是另外一道鬼门关。想继续做教授，那竞争的惨烈程度比博士入学申请更要血腥无数倍。每年有多少博士毕业，但是每个大学又有多少个教职位空缺？所以，如果你不是醉心学术，没有浓厚的兴趣，或者不觉得自己以后会以研究为生，那么读博士之前最好再考虑一下。在美国，很多名校毕业的冷门专业的博士因为在学术界和工业界都不能谋到工作，最后不得不再花上一两年选个护理、会计之类的好就业的专业读硕士然后就业。</p>
<p>那么读硕士呢？对于那些家里有钱，能自费读硕士的人们，虽然你们不如家里有钱，出去读本科的。在国外读一个硕士，你可以见识到很多人体会到更多的文化以及完全不同的生活方式，还有最重要的，一张烫金文凭和不错的前途。而且，对于还没有下定决心要不要读博士的人来说，你也可以通过一个硕士学位，给自己更多的经历来感受是否真的要做科研，同时读硕士的过程还可以对你的博士申请有很大的推动作用。因此读硕士除了花钱多一点以外，真的是有百利而无一害的事情。</p>
<p>我们强烈建议家庭能够负担的同学先去读一个硕士看看。当然，如果是没钱读硕士的同学，你也不要太灰心，人生本来就是如此的不公平，一个人的家庭比你多一点钱可以让他读硕士实在不算什么大不了的事，有太多太多的人根本不需要读硕士，甚至根本不需要读书，就可以坐拥万贯家产，一辈子都比你过得好。所以大家只要尽自己能力去努力，好好规划自己的人生，能够过上自己能达到的最好的生活，也就可以了。</p>
<p>至于专业的选择，这个问题就更简单了。许多盲目性很强的申请者错很容易错误地用“是否容易申请”，“是否好就业”来作为引导他们人生轨迹的风向标。要知道，越好申请的专业，恰好是那些不好就业的专业。相反，那些有光明前途的职业，通常也就意味着惨烈的竞争。比如医学博士 MD (Doctor of Medicine) 和法学博士 JD (Doctor of Jurisprudence) ，这两个专业的学生一毕业就有很高的社会地位和很光明的前途。但是我们几乎没有听说过有大陆应届毕业生被这样的博士项目录取。另外，一些名校的 MBA (Master of Business Administration) 的竞争惨烈度甚至要比博士还要强许多。所以说，不管是申请的难度还是就业的难度，根本不应该 成为左右我们选择专业的理由。</p>
<p>读什么专业，要看你自己的长处和兴趣。你经过深思熟虑后投身的专业，必须要能让你获得最大程度的智力满足。</p>
<h4 id="为了申请出国，大学期间需要准备什么"><a href="#为了申请出国，大学期间需要准备什么" class="headerlink" title="为了申请出国，大学期间需要准备什么"></a>为了申请出国，大学期间需要准备什么</h4><p>其实这个问题本身就有严重的误导性，出国不是你的目的，而是你变得更强的手段。你未来的人生规划是什么，那么你大学期间要做的，自然就是为你的人生目标奋斗而准备</p>
<p>在 GPA 方面我们的建议是，但凡你能做一些比 GPA 更有意义的事情，显然会比死磕 GPA 更有帮助。毕竟不管大家怎么努力，每个专业的第一名永远只有一个人，卷入这种恶性竞争只会让你荒废时间和精力。</p>
<p>我们应该做什么？做研究！而且要做一流的研究！如果你肯努力，那么做出好的研究成果并非不可能。随着海外院校对中国学校 GPA 含金量的重新认识，研究成果在出国申请过程中的权重日渐增加。它甚至可以扭转你的一切劣势，把你送进最顶尖的名校。这直接导致出国申请的竞争从 GPA ，渐渐地转移到论文上来了。国外大学也发现，与其冒险去招一个可能除了考试什么都不会的人，不如招一个可以实实在在做出研究成果的人。一篇优秀的论文压倒众多 GPA 狂人的例子已成了常见的现象。所以如果你要出国留学，那么提前接触研究是极端有必要的。它不仅在申请学校的竞争中能让你脱颖而出，更且能让你自己思考自己是不是适合做研究，甚至在选校、联系教授阶段，都会带给你非常好的先机。</p>
<p>当然，既然是出国念书，那么语言方面的准备自然是必不可少的了。我们不应该把对英语的学习当成一个负担。如果你真的想要做有意义的学问，那么你没有任何理由不看英文的著作和论文，没有任何理由不去了解国外的最新科研进展。而很自然地，你的英语能力会随着你在专业方面的努力而不断提高。多读英文原著，多和国外的优秀研究者交流，尽可能地让自己融入到科研的前沿，那么你的英语能力很快会有质的飞跃。当然为了能够出国，你必须得参加几项英语考试，比如 TOEFL 和 GRE 考试。不过，这些都是你到了大二可以慢慢了解和准备的，而且只要你足够的重视和一定的时间，通常都可以得到不错的分数，所以我们不建议你为了它们过分担心。</p>
<h4 id="警惕出国中介"><a href="#警惕出国中介" class="headerlink" title="警惕出国中介"></a>警惕出国中介</h4><p> 到目前为止，在我接触过的数百申请者中，靠中的“华丽包装”让自身实力得到提升并获得名校认可的案例，一个都没有！如果中介声称，有些人通过他们的服务进入了顶级学校的顶级项目，那我有八成把握认为该事件属于下面两种情况之一：</p>
<ol>
<li>中介在撒谎。出于保护客户利益的考虑，中介没有义务向你证明他们去年那个去 Harvard 的客户到底是谁。也就是说，客户这边根本无法证明是不是真的有人在中介的推荐下去了 Harvard 。</li>
<li>客户是中介聘来的。有的时候，中介宁肯倒贴钱，也会让一些自身条件极为优异的学生成为自己的客户。通常，这些客户的“硬实力”足够强（例如已经发表了世界顶级的论文），不需要什么技巧也有实力冲击全球最顶尖的学校。 </li>
</ol>
<p>中介的骗局还不止这些。哪怕你是一个背景和水准都非常一般的同学，他们也会将一些很著名的学校列在合同中，但要注意的是，最近美国经济情况很差，以至于一些听上去颇为华丽的名字（例如常春藤联盟中的某些学校），每年也会发出数额惊人的 Master Program Admission 来支撑财政。此类项目每年要收取极其高昂的学费，并且不提供任何奖学金机会。对于自费项目，拿到 Admission 并不是什么难事，根本不需要所谓的高人给你指点什么特别的“申请技巧”。</p>
<p>至于“无效退款”的保证，就更是纯粹的噱头了。一个公司每年可能会接待数百客户。就算你的申请一败涂地，连很差的保底学校都没有拿到，到了让他们退款的地步，他们也不过只是损失了百分之一的暴利（中介的边际成本很低，有的完全是在用去年某人的文章，稍作修改就成为你的申请材料，几乎无需额外太多成本。自然，失败也不会有什么损失），但是你失去的却是一年宝贵的时间。</p>
<p>你愿意将希望寄托在中介身上么？如果连将自己推销给目标学校都全盘需要第三方帮忙，留学的意义在哪里呢？</p>
<h3 id="做真正的研究"><a href="#做真正的研究" class="headerlink" title="做真正的研究"></a>做真正的研究</h3><h4 id="合理的研究态度"><a href="#合理的研究态度" class="headerlink" title="合理的研究态度"></a>合理的研究态度</h4><p>我们不应该为了 PhD 学位而含辛茹苦地做研究，正如我们不应该为了特长生加分而痛苦地练钢琴、提琴一样。基础知识、研究灵感、交流能力、吃苦耐劳的精神之类的较高要求暂且不说，要想成为一名研究人员，一个人至少不能讨厌研究（相对他所能从事的其他工作而言，不讨厌研究）。</p>
<p>不少同学之所以进实验室做研究是为了出国。他们甚至明目张胆地说自己不喜欢也不适合做研究。这种为了出国而做研究的想法本末倒置，是非常错误的。出国念书的核心目的，本应是为了争取一个更好的做研究的环境。对于一个不适合做研究的人而言，花五六年甚至更长时间读博士，那就像坐牢一样痛苦！我认识好几名同学，他们在本科的时候信誓旦旦地要投身科学事业，但是真正坐在实验室里，不到一年就坐不住了。最后只拿硕士学位就匆匆走人。我很想告诫这类同学：费尽心思把自己往 PhD 的火坑里推，是一件可悲而且可怕事情</p>
<h4 id="区分上学与研究"><a href="#区分上学与研究" class="headerlink" title="区分上学与研究"></a>区分上学与研究</h4><p>各位平时上课、学习、考试、升学，仿佛是在挤一条独木桥：考点就那么多，题型就那么几种，学生不需要天分，甚至不需要太多技巧，只要投入足够多的时间，闷着头往前冲，总可以高分过关。而对于一名研究者而言，摆在你面前的是一片开阔的汪洋大海，仅靠毅力闭着眼睛向前冲是很难看到新大陆的。研究中没有辅导书，也没有老师告诉你教学大纲，在脑海中勾勒出一个清晰的知识结构是每名研究人员自己的事。新进入研究领域的学生，必须学会如何自己归纳知识结构。如果有人问及你正在做的工作，你应该能像从 Google Earth 中找自己家一样，把自己的工作在一年、五年、十年、甚至整个世纪的时间尺度下，并且清晰、准确、不带偏见地勾勒出你正在做的工作在整个学科中的位置。可以说，清醒的位置感和准确的方向感，是比雄厚的基础知识更为重要的成功要素。</p>
<p>在研究中，知道做什么比知道怎样做更为重要。</p>
<p>没人能保证哥德巴赫猜想一定是对的或是错的，也没人能保证你正在做的研究是否一定会有漂亮的结果。如果知识掌握没什么大问题，做作业通常会带给你一帆风顺但是平淡无奇的感觉，而做研究则是正相反。在绝大部分研究人员的绝大部分时间里，工作经常是没有效果没有方向甚至没有头绪的。但伴随着这长期的压抑，攻克难关所带来的瞬间的欢乐也绝非做出习题可比。</p>
<p><strong>一个成熟的研究人员必须学会习惯失败。</strong></p>
<h4 id="知识积累"><a href="#知识积累" class="headerlink" title="知识积累"></a>知识积累</h4><p>知识积累是一个很有技巧并且很注重效率的工作。刚刚进入研究领域的同学们，最大的障碍往往是要面对浩如烟海的文献资料，不知从何处入手。在这个时候，我们首先应该为自己绘制一张关于知识的地图。在这张地图上，我们要标明自己所在领域的研究对象，主流研究方法，研究分支的结构，以及当前存在的最大问题和最新进展。只有搞明白这些事情之后，我们才能朦胧地知道自己是否适合这个学科，自己最欠缺哪方面的知识，以及最重要的，应当按照什么样的顺序去获取知识。</p>
<p>在进入研究领域的第一步，我不推荐直接读论文，因为论文总是给人一种承前启后的感觉：他们大都是建立在前人理论的基础之上，并且里面所记述的工作通常也并未完结。这些显然不适合一个初学者来阅读。</p>
<p>我们在研究起步阶段，应该仔细阅读该领域的权威教科书。一般来讲，知识会随着时间而沉淀，在一代代人的努力下变得精炼而富有结构性。一本好的教科书则可以很好地总结记录这样的结构。较新的教科书可以涵盖上个世纪末到本个世纪初的绝大部分科学成果，对当今的研究热点一般也会有较好的介绍。负责任的教科书还会提供翔实的参考文献，并推荐进一步的参考读物。</p>
<p>对于教科书的选择容不得半点马虎。对于初学者想在短时间评估书籍质量，首先应该咨询学长，让他从他确实读过的书里给你一个合理的推荐。或者，你可以重点关注教材作者的身份，以及教材的应用范围（被哪些名校选为教材）。一个简单的技巧是多关注国内的影印版书籍。因为各大出版社在引进影印版图书时，肯定会做谨慎的评估。经过这样评估甄选出来的教材，通常是广受好评，多次再版，并被诸多国际顶级学府选定为教材的佳作；并且，引进影印版的目的之一就是为了填补国内相关领域的空白。所以在条件允许的情况下，我们鼓励阅读此类书籍——哪怕是对于英文阅读比较吃力的同学也是如此。如果你因为语言问题，正在考虑选择影印版图书的中文译本，那要请你慎重。由于现在很多专业图书译者的水平低劣，职业道德缺失，我们经常可以碰到读得懂英文原文却搞不明白中文译文的情况。</p>
<p>如果想选择中文书籍进行阅读，那你就要更慎重了。除了极少数专家外，大部分中国学者用中文所撰写的科技类教科书，其质量让人遗憾。而且一般来说，越是前沿的科技，国内教材质量越差。这些书籍摆在身旁查阅尚可容忍。但是他们非常不适合作为初学者的启蒙读物！</p>
<p>一般教科书上每一个章节都是一个相对独立的研究方向。当我们对框架有了一定认识之后，就可以选择其中的一个或者几个分支定为自己中短期的研究课题。继而开始综述（review）类文章的阅读。所谓综述，其最大的看点在于对于过去知识的总结和回顾——他们记录了关于知识的知识。不少学科都有专门的综述类杂志，例如Annual Review, Nature Review。各大学术索引擎诸如 Google 和 Scopus，也都支持对综述类文章的搜索。另外，综述类文章的参考文献列表也极具参考价值。</p>
<p>通过阅读综述，我们很容易找到近年来优秀文章。从这些文章开始学习，我们就可以较为全面地了解一个学科的全貌，因为无论从思维方式，解决问题的方法，还是实验设计、数据处理的细节。能被综述类文章大加赞赏的论文，一定有他独到的地方。</p>
<h4 id="衡量学术价值"><a href="#衡量学术价值" class="headerlink" title="衡量学术价值"></a>衡量学术价值</h4><p>没有老师给你判分，也没有参考答案可以借鉴。在做研究的时候，我们只能靠自己思考来辨别一个理论的学术价值。</p>
<p>真正能断定一个理论是不是垃圾，有多大价值，要看他会不会被后人记住。真正好的理论往往会引发人们广泛而深刻的探讨，甚至是争论。后来的人们会站在该理论的基础之上做出更为充实的科学贡献。如果在一个学术会议上，你的文章能让大家在上厕所时候还在讨论，我敢说这文章一定是个好理论。如果用量化指标做参照，论文的引用数可以从侧面说明一些问题。当今学术界的顶尖科学家基本上都有几篇引用数（ cite index ）达数千的成名之作。而实际上，学术界比较通用的“影响因子”，也是通过引用数计算得到的。</p>
<p>但是即使参考引用数这个指标，也仍然存在特例：有些极端功利的作者在意识到引用数的重要性后，通过不必要的“自引”（在自己后来写的文章中引用自己原来的文章）来提高论文引用率。</p>
<p>除了衡量别人已经发表的文章的学术地位，我们也要学会如何客观地衡量自己未发表理论的价值。下面三条原则可以简单地衡量一个理论的内在价值：</p>
<p>新颖的好理论必须包含足够新颖的思考。那些你看到题目后就能猜到八九不离十的文章一般不是好文章。所谓科技论文，与实验报告的区别在于：文章的目的是宣扬新思想，报告的目的是记录实验过程。</p>
<p>简单。我只听说过某个理论复杂得臭名昭著，但却从来没听说过某个理论因复杂而受到赞扬。而实际上，越复杂的理论越有可能是堆砌着补丁的伪装——其内在思想却是肤浅的。为了避免把一个研究问题进行不必要的复杂化，我们必须攥紧 Occam 的剃刀： Entities must not be multiplied beyond necessity</p>
<p>普适好的理论要有广泛的听众。从这个意义上说，我们不应该把主要研究精力放在某个领域中某个特定子问题的某种特例上  </p>
<h4 id="一些常见误区"><a href="#一些常见误区" class="headerlink" title="一些常见误区"></a>一些常见误区</h4><p>你给思路，我来实现：有些学生，他们具有不错的基本功，实验动手能力也很强。但是却缺乏独立精神。在身边我每每可以看见这些同学日夜辛勤，但是却从事着低级的，缺乏创造性的工作。这些人可以成为很好的工人，但他们绝对不是称职的研究者。</p>
<p>虽说任何一个研究小组都必须有人来承担具体的工作，但我们的态度必须鲜明：我们不应因这些机械性工作而满足，更不可能期望“你说方向，我来实现”这样的工作模式。</p>
<p>如果你真正立志做研究，那么基础知识，尤其是数学方面的知识是非常重要的。但这些知识和上课关系真的不大。哪怕你交大的高数考了100分，充其量证明了你具有很好的应考能力。但是你用应用数学解决科学问题的本领到底有了多少提高呢？不要寄希望于通过上课、做作业就能掌握应用的能力。相比来说，更加直接而且高效的方法是早日进入研究领域，带着问题进行学习和锻炼。</p>
<p>这个课题太难太简单：很多人会为自己的懒惰寻找各种各样的借口，比如“这个理论太难，一定做不出什么东西”，或者“这个理论太简单，做起来没什么意思”。的确存在很难，或者很简单的理论，我们的取舍也是非常有必要的。但如果一个人习惯性地把新方向要么归为太难，要么归为太简单，这就是一个非常差的研究习惯了，会让他的研究根本无从下手。</p>
<p>担心自己理论太简单：不得不说，故弄玄虚是现在学术界一个很坏的风气。很多人喜欢把自己的简单理论包装起来，冠以时髦的数学或者物理名词，以为这样就会显得自己很渊博。实际上，这种做法乍一看也许会显得很花哨，但是在时间的考验下，过不了多久就会原形毕露。没意义的复杂包装只会让理论显得更丑陋和拙劣。</p>
<h3 id="管理者的智慧"><a href="#管理者的智慧" class="headerlink" title="管理者的智慧"></a>管理者的智慧</h3><p>作为管理者，必须要有很强的责任心。这是所有优秀管理行为的出发点。虽然管理者不用（也不应该）事必躬亲，但是管理者承担着比团队其它任何成员都重大的责任。而且我们在学生阶段能接触到的管理工作，基本不存在太多的利益关系。在这种时候，更需要我们用责任心来决定下一步行动。</p>
<h4 id="培养团队"><a href="#培养团队" class="headerlink" title="培养团队"></a>培养团队</h4><p>凭借个人英雄主义式的单打独斗并不是团队精神所倡导的。过分依靠个人能力会使团队变得不稳定，并且效率低下。作为一名管理者，必须思考如何将团队连接成一个整体。这需要靠全体成员的热情和士气作为纽带。为了有效地培养团队成员对于工作的热情，与你达成一致的目标，为了大家共同的理想去奋斗，这需要两个要素：</p>
<ol>
<li>价值观。你们的工作应该是充实而有意义的工作。这需要管理者潜意识中去引导，让团队成员切身感受到肩负重任。别人可以不在乎你们做了什么，但是团队自身应该要有共同的价值观，在工作的过程中体会到团队创造的价值。</li>
<li>来自团队成员的认可。管理者要在人际上组织好团队，让团队成员间相互信任与敬佩，营造良好的工作环境。管理者应多听每一个来自团队的声音，友善地对待每一位成员。不同管理者的管理手段可以不同，并不是说只有塑造具有亲和力的形象才算是管理上的成功。但至少，管理者不能因为担任管理职务就沾沾自喜，对团队的成员指手画脚。无论是在学校的各级组织，还是在外的公司，成功管理者都会以平和的心态对待他们工作上的每一位同事，并且主动地给予能够给予的帮助。</li>
</ol>
<h4 id="重在参与"><a href="#重在参与" class="headerlink" title="重在参与"></a>重在参与</h4><p>校园活动的目的是锻炼我们的能力。自打一开始就不应该期望这种活动能产生什么惊天动地的效果。</p>
<h4 id="认识设计类课程"><a href="#认识设计类课程" class="headerlink" title="认识设计类课程"></a>认识设计类课程</h4><p>对待课程的态度</p>
<p>如果你不是第一次参加设计类课程，那你一定知道，把全部精力放在设计课上是对时间的极大浪费。因为缺乏有效的指导，这种课程通常都会变成一次次无的放矢的演练。它无法有效提高设计能力，无法训练思维，也不会让你的设计类手法有什么提高。对于这类课程，希望同学们能牢记三个字——别当真！</p>
<p>请务必理性分配时间，追求更有效的学习方式，而不要把自己困死在“设计课”的泥沼中！</p>
<p>对待自己的态度</p>
<p>有很多同学在设计课上钻进了完美主义的死胡同。设计是工程，设计课更是工程。如果把课堂作业当成艺术的话，我不知道该说你幼稚还是愚蠢。要知道，方案设计永远没有尽头，但<strong>对一门设计课程作业，你的上限是多少小时？</strong>这在一开始就要规划好。绝对不要不计代价地追求所谓“更合理”的设计。</p>
<p>对待老师的态度</p>
<p>我们也不应对老师的水平和能力产生病态的崇拜。叫他看一眼你的图纸，他不太可能看得出你的设计理念，也不太可能了解你的设计过程，更不太可能给你一个建议让你觉得醍醐灌顶，胜读十年书。老师不可能对每个人的作品做出什么深入而客观的评价。事实上，影响你分数的，通常还是那些肤浅但容易量化的因素——诸如出勤、态度、书面报告。</p>
<h4 id="进度控制"><a href="#进度控制" class="headerlink" title="进度控制"></a>进度控制</h4><p>在老师面前控制好进度是取得高分的关键。我们给老师看图，并不是为了获得什么指导，而是要通过交图告诉老师，我有一个积极的态度。</p>
<p>切忌本着好大喜功，想一鸣惊人的心态，攒很长时间的工作，一次甩给老师。老师会被你那令人眼花缭乱的工作量惊呆么？绝对不会！相反，东西多了看着烦，还容易被挑毛病。老师完全可以轻易地在细枝末节的地方抓二十个莫须有的问题，然后把你的工作贬得一文不值。</p>
<p>在同等工作量的前提下，明智的进度控制应该是把自己的全部工作平均分配在各次课上提交。即便你已经做完了更多，也必须像说评书一样娓娓道来，说一半藏一半，不要一股脑呈现完。</p>
<p>因为不是所有同学都有新东西，所以我们更要保证每次上课都有新的东西给老师看，并注意和老师多加“探讨”。只要混个脸熟，你的印象分就会有很大提升。</p>
<p>在设计的最后阶段，尤其不要进行无谓的修改,不要把时间浪费在徒劳的心理抚慰上。即使老师提出了一些修改要求，你也没必要完全照办。把现有阶段的设计表现清楚，按时交图，这是想拿高分的基本要求。</p>
<h3 id="小心项目的陷阱"><a href="#小心项目的陷阱" class="headerlink" title="小心项目的陷阱"></a>小心项目的陷阱</h3><p>交大部分老师的科研水平很令人失望，他们自己完全没什么像样的研究。跟着这样的老师做项目，我们通常也很难得到研究素养上的锻炼。如果你因为参与一些低层次但是没有任何锻炼价值的项目而耽误了大量时间，打乱了自己计划的进度，将会是一件非常得不偿失的事情。</p>
<p>所谓项目不外乎老师的私活，或学校的 PRP ——传说中的本科生研究项目；再不然就是一些带有政治色彩的竞赛项目。总体上说，带本科生项目的老师的水平和责任心都是让人失望的。如果你已经有了充分的思想准备，但仍然还是对某个老师的某个项目有兴趣，那么你必须在决定参加之前，进一步确定该课题是否属于自己的学术兴趣，或者是否对自己的研究有帮助。而你能做出合理判断的前提，必须是你很清楚自己发展的大方向。作为一名学生，不清楚自己的学术兴趣本该是一件极其不正常的现象。</p>
<p>绝大多数所谓项目，都是极其空泛的。不要寄希望于通过做一些项目“发现”自身的学习兴趣。</p>
<h4 id="辨别项目的质量"><a href="#辨别项目的质量" class="headerlink" title="辨别项目的质量"></a>辨别项目的质量</h4><p>PRP 项目</p>
<p>通过 PRP 项目的题目，我们通常就能看出这个项目的质量。没有针对性的课题通常不会意味着高质量的研究成果。很多 PRP 项目，一看题目就知道是非常空洞且好大喜功的。例如《历年世博会建筑场馆的研究》之类。我们必须放弃脑中残存的对老师的盲目崇拜，用我们的独立思考能力想想，这样的题目，在一个学期到一年的业余时间里，以我的水平到底能研究出多少有意义的东西？具体来说，世博会始于1851年，每届场馆数量上百，性质不一，统统放在一起研究，用一个学期时间，你难道能得到一个不是很肤浅的结论么？</p>
<p>如果题目看不出究竟，我们还可以看研究提纲。一般你在参与一个项目前，可以向导师咨询具体的研究提纲。当然了，因为很多老师本身组织 PRP 就很敷衍，他们自然也拿不出深入思考的提案。最多说两句官腔味道十足的空谈。顺便说一句，如果有老师不断强调这样的观点“因为还没开始研究，于是拿不出一个足够细致足够切实可行的方案”。那么你要特别提高警惕。因为这种话，通常是学术骗子在申请经费想空手套白狼的时候才会说的。</p>
<p>接下来，我们还可以认真阅读项目的研究方式。很多 PRP 的实质不是研究，而是收集整理资料。我们再拿《历年世博会建筑场馆的研究》举例。2010年的上海世博会是第五十一届，前五十届世博会都不是在中国召开的。我们能对那些远在异国的建筑有多少接触——且不说这里面很多建筑在世博会闭幕后不久就都被拆除。显然老师不会组织境外考察，所以，我们所谓“研究”的手段只剩下上网搜索和读书。整理他人的看法和说法最终形成一份报告，这顶多算是文秘的工作，可绝对算不上“研究”。</p>
<p>最后，我们还需要关注项目团队的数量和质量。一个导师，要是想做好研究，他一定会认真选择参与者，并有效控制人数。要知道，做研究不是打群架，人数的堆积不会带来任何优势。面对这样巨大的团队，不要说导师还有其他工作，就算是全职来带这一个项目，也不可能给每个人都提供有意义的指导。当然，实际情况是导师通常更忙，所谓的“辅导”，实际效果也会更糟糕。</p>
<p>老师的“私活”</p>
<p>说到老师的横向项目，或者通俗点说，“私活”，我们就需要更加慎重了。大多数情况下，你是以听话、廉价、高效的劳动力的身份参与到一个横向项目中来的。你的角色只是一个不拿工资的打工仔——或者稍好些，有微薄的工资。无论如何，任何学生都不要妄想成为项目的合作者。因此，问清楚项目周期和工作任务是决定加入的必须前提。我们必须明白自己头上的工作，究竟在哪个层面对自己有帮助。要知道，老师“私活”的商业性质多于学术性质，甚至可以因商业牺牲学术原则。</p>
<p>可以的话，再多询问已经在项目组里的同学，听听他们的经历和经验，你会得到很多内幕消息。</p>
<h4 id="选择导师"><a href="#选择导师" class="headerlink" title="选择导师"></a>选择导师</h4><p>一个可以参考的匿名导师评价网站为<a href="https://mysupervisor.org">导师评价网</a>，不过可惜的是很多老师都缺少评价，想要了解一个老师以下特点，需要跟他手下的在读学生或者已毕业学生联系获取更准确的信息。</p>
<h5 id="导师类型"><a href="#导师类型" class="headerlink" title="导师类型"></a>导师类型</h5><p>可以简单把高校教授们分为四类，但一部分老师可能同时具有两到三类的特征。</p>
<ol>
<li>功成名就的大老板，在国内就是有院士长江杰青千人的title，在国外就是本领域有影响力的学术组织的fellow，在计算机领域即为ACM、IEEE fellow。大老板们往往手下会招聘一些青年教师和博士后帮他管理团队，自己大概率脱离科研一线，主要精力花在与领域内其他大佬social拉经费、项目，维持庞大团队的运转，这样的老师不一定是个好的advisor，但大概率是个好的lab manager。大老板不会亲自带学生尤其是本科生，你会被组内小老板或者博士生指导，如何跟到一个靠谱的小老板需要运气，想要在一个庞大的组里做出吸引大老板的成果也相对难度较高。</li>
<li>青年教师，也被称为青椒，他们刚在学术界独立出来，拥有了自己的实验室，有了招收硕士和博士生的资格，在当下国内高校全面铺开海外tenure-track非升即走的制度下，他们需要在六年的时间中达到系里副教授的门槛，评价指标包括论文发表、拉到经费数额、开设课程数量等。由于中国高校吸引人才归国的能力稳步提升，近些年来国内顶级高校招聘的助理教授往往都是欧美不错的博士毕业生，他们一般比一些八九十年代土博毕业留校的老师视野更广阔，了解本领域下最前沿的科研脉络，研究的品味相对较好。他们不像大老板们有很多科研以外的杂事需要处理，你能得到更多hands-on的指导，他们的学生是否成功也将与他们自己的命运（能否tenure）紧密相连，他们会尽最大努力帮助你，出成果的速度会快一些，相应的导师传导给学生的压力也会更大，但是助理教授们的起步资源相对有限（拿到青年千人title的会好很多）。</li>
<li>养老型教授，不管是国内高校老体制下的教授或者海外tenure-track体制下已经拿到终身教职的教授，他们的职位已经非常稳定，会有一部分比例的教授在40岁之后的阶段进入养老阶段，原因可能包括进一步评职称无望干脆开始享受轻松生活、或者事业发展进入平稳期等，他们对发更多文章已经没有很高的欲望，这种导师一般适合只要一纸文凭的学生，期间比较自由，但自制力不强的学生可能毕业时成长很有限。</li>
<li>创业或者热衷于接工业界横向项目的教授。这类教授有些是想通过接工业界横向项目为自己捞钱，也有一部分是想完成科研成果转化，扩大自己的影响力到工业界扬名立万，他们往往更多精力放在公司上，对学生的指导比较有限。</li>
</ol>
<h5 id="人品与指导学生态度"><a href="#人品与指导学生态度" class="headerlink" title="人品与指导学生态度"></a>人品与指导学生态度</h5><p>参与科研项目虽然跟上课是很不一样的过程，但是除了个人的努力之外，老师愿意花费多少精力指导你，给予你多少科研资源（在计算机领域比如提供服务器，在实验学科则是提供良好的实验设备，还包括一些隐形的资源如当遇到导师不熟悉的问题他是否能为你介绍合适的老师协助你解决问题），给你是否靠谱有前途的课题等等都是你很难控制的因素。科研项目也存在较大不确定性，当项目卡住时，问题可能是多方面的：1）课题本身不靠谱。2）提出的解决办法有问题。3）学生在实现细节上出了问题。一个好的导师应该利用自己过往的经验帮助学生解决问题而不是一味批判学生笨，灌类似“你要相信自己一定可以解决这个问题”的鸡汤同样对解决问题帮助很小，如果该条路的确失败风险较大，导师应该及时调整航向避免更大的沉没成本，保护好学生的科研积极性也是导师应该考虑到的问题。为了保证课题平稳推进，青椒应该跟学生有固定的每周一对一meeting，大老板应该跟学生有相对低频率的meeting或者在学生遇到问题主动寻求帮助的时候给予支持。这一点需要自己多接触不同类型的导师，多感受才能知道自己真正适合什么样的指导风格。</p>
<h5 id="在读和已毕业学生出路"><a href="#在读和已毕业学生出路" class="headerlink" title="在读和已毕业学生出路"></a>在读和已毕业学生出路</h5><p>私以为作为老师，最好的状态是“桃李满天下”，一个老师最大的财富是他培养出来的学生，一个把论文和经费看的比学生更重的老师有较大可能把学生当成他的“学术工具人”。学生毕业后的出路是老师在学界/业界影响力+老师是否用心推荐学生找工作+学生在组内深造期间成长的综合体现，一般不要期望自己能超过组内毕业生出路的上限，多考虑平均值更合理，同时可以观察在读学生平均文章发表情况，第一篇文章发表耗时以及质量等</p>
<h5 id="实验室文化"><a href="#实验室文化" class="headerlink" title="实验室文化"></a>实验室文化</h5><p>这是一个很抽象的概念，你在适应导师的指导风格的前提下，同时也需要考虑是否适应实验室的一些固定文化比如：</p>
<ol>
<li>实验室学生需要打卡吗？每周有固定工作时间限制吗？40小时，60小时还是更多？</li>
<li>组内学生合作氛围如何？还是每个学生有自己独立的项目要完成。</li>
<li>实验室会组织一些集体活动如春游秋游吗？</li>
</ol>
<h4 id="好老师与坏老师"><a href="#好老师与坏老师" class="headerlink" title="好老师与坏老师"></a>好老师与坏老师</h4><p>在此很难为好老师下一个通用的定义，简单来说一个老师人好且在乎你自己的研究兴趣，支持你自主独立的想法，并且在自己能力范围内为你提供研究的软硬件条件——哪怕这些工作和他的项目并没有直接的关系，若还能做到因材施教那便是非常难得的了，一个好老师在你毕业后依然会是你终身的好朋友。这里可以列举一些经常出现在坏老师身上的特征：</p>
<ol>
<li>安排学生为实验室做很多杂活如经费报销、跑项目手续到处找领导盖章签字、取快递、写材料等。</li>
<li>不将精力用在指导学生完成科研项目而用在训斥学生上，试图通过威胁学生让学生害怕，试图通过夸夸其谈（画饼）让学生信服，不尊重学生的个人意愿和研究兴趣。</li>
<li>用不合理要求卡学生毕业，组内学生延毕比例较高。</li>
<li>克扣学生的助研补助到自己腰包。</li>
<li>自身学术水平一般喜欢瞎指导。</li>
<li>不尊重学生的私人时间、身体健康和个人隐私。</li>
<li>把学生当成工具人，压榨学生帮自己完成横向项目赚钱。</li>
<li>抢学生的一作authorship</li>
<li>依靠advisor-advisee的不平衡关系对学生实施精神控制等</li>
</ol>
<h5 id="碎碎念-1"><a href="#碎碎念-1" class="headerlink" title="碎碎念"></a>碎碎念</h5><p>本科期间参与研究是因材施教的体现，并不意味着好学校的本科生都需要如此，切忌随大流卷入本科生科研低龄化的趋势中去，科研不是本科教育中最重要的组成部分，博士毕业后也只有很小一部分人能终身以科研作为一份工作。本科期间加入靠谱的实验室，参与合适的研究课题，能锻炼同学各方面的能力，如果课题进展顺利最后能有高水平论文发表带来的自信心提升也是跟获得高GPA的乐趣是完全不一样的。即使项目进展不如人意，这也是在试错成本可接受范围内的，记得积极定期与导师保持高效沟通，与导师共享一致的目标，在科研的道路上相互成就</p>
<h4 id="团队与合作伙伴"><a href="#团队与合作伙伴" class="headerlink" title="团队与合作伙伴"></a>团队与合作伙伴</h4><p>团队协作精神，应当是各展所长、互为补充的高效率工作。我们不能以“团队合作”的名义，迁就或容忍那些低效率、无责任心的合作者。</p>
<p>我们不能保证每位合作者都和你做项目的初衷一致，我们更不能保证每位合作者都有足够的道德水平。在一个病态的团队中，低效率、抢风头、拈轻怕重的情况会时常出现。这种团队合作变成了勾心斗角的训练。这对正直的人进行严肃的研究来说，是百害而无一利的事情。当然，在这样的团队中，不太可能做出什么成果，反倒甚至会让自己沾染上一些不良的习惯。所以如果你发现你周围的环境就是这样，那么请尽快离开这样的团队。</p>
<h3 id="保研者说"><a href="#保研者说" class="headerlink" title="保研者说"></a>保研者说</h3><p>路没有好坏之分，只有适不适合之别。不是说工作的人一定有闯劲，也不能说出国的人就一定有更光明的前途。</p>
<p>有个问题在一开始就要问自己：读研，是一条什么样的道路？</p>
<h4 id="明确目的"><a href="#明确目的" class="headerlink" title="明确目的"></a>明确目的</h4><p>读研的动机主要有两种：</p>
<ol>
<li>需要一个硕士的文凭提高社会地位，方便就业。</li>
<li>想积累一定的研究经验，为将来出国或者工作做准备。</li>
</ol>
<p>这两方面的动机都有它自己的道理。我认为，只要一个动机能激励你积极向上，那这就是正确的动机。但是根据交大的现状，我们做出“读研”这样的决定，还是需要相当的深思熟虑。</p>
<p>我们先说说“社会需要硕士”这件事。撇开能力不谈，硕士文凭对各专业就业前景的影响可以说是千差万别。所以，抱着这样打算的同学们不要轻信所谓“硕士好就业”这样的谣言。在选择读研之前，一定要真正了解这个行业，认清学历在未来几年的工作中可能起到的作用，比如具体薪金、升职期望等要素。</p>
<p>如果你是从积累研究经验的角度考虑读研，这种想法我比较认同。有的人可能会以为早一点参加工作也可以积累研究经验，为将来出国做准备。但实际上，公司的环境和学校里面还是有很大差异的。虽然劳动法早就规定了八小时工作制，但是一般研发部门是不会给你朝九晚五的机会的——不加班绝对是小概率事件！在高度紧张的工作中，你是一个出卖劳动力的角色。你的工作统统是上级指派下来的，而你不能选择做什么或不做什么。长此以往，你会发现自己在工作之外的积累少之又少。相比来说，交大的研究生生活，不管如何糟糕，至少不会让你为每天的生计发愁。可以说，学校帮你缓冲掉了许多压力。同时，你也可以利用这几年时间做一些自己喜欢的事情。如果你还想继续提升一下自己的价值，读研是一个不错的选择。</p>
<p>这里有一点需要强调，每年我们看到保研后都有无数人后悔，我们也能听到工作的人对读研的无不羡慕。这都是围城心态。一些工作的人怀念读书的生活，觉得读研更好，比做打工仔更有前途；但读研的人又觉得还是工作好，可以赚钱和积累经验，也不用和某个讨厌的导师在一起工作。</p>
<h4 id="硕士之后"><a href="#硕士之后" class="headerlink" title="硕士之后"></a>硕士之后</h4><p>读研，充其量只是一种缓冲——当你不知道做什么好的时候，或者你知道了做什么好但是时间已经不足以让你获得理想的结果的时候，你没有更多的选择，于是才继续读硕士，寄希望于给自己一段可以继续努力的时间。但是，在这段时间里，如果你再不认真思考（很多优秀的人本科时候就做过这些思考了），那么可能你还会浑浑噩噩地留校读个博士。再之后呢？</p>
<h2 id="生存技巧"><a href="#生存技巧" class="headerlink" title="生存技巧"></a>生存技巧</h2><h3 id="选课原则与选课技巧"><a href="#选课原则与选课技巧" class="headerlink" title="选课原则与选课技巧"></a>选课原则与选课技巧</h3><h4 id="选课选什么"><a href="#选课选什么" class="headerlink" title="选课选什么"></a>选课选什么</h4><p>我们选课并非选课程，而是选上课老师。</p>
<p>选择正确的老师，仍然是对整门课程最终成绩影响最大的一个因素——甚至要远大于你前半个学期是否认真上课！</p>
<p>具体来说，我们选一个老师，应该从下面几点情报综合考虑：</p>
<p>• 点名方式：老师上课是否点名？点名是以什么方式进行的？一般来说，签到、喊到、随堂测验，想蒙混的难度逐渐递增。我们关注是否点名，重点应该看的是这个老师面对学生的态度。有的老师睁一只眼闭一只眼，即使不来上课，也不会太为难学生。而另外一些比较自卑的老师却把学生不来上课当成对自己的奇耻大辱，甚至会想出课前课后点两次名外加数人头这样的手段防止学生翘课。其实，如果老师想不计代价查出谁没来上课，这真的是太简单的一件事情。所以我们重点还是看这个老师的态度，而非他上个学期具体采用了哪种点名手段。</p>
<p>• 期末考试成绩的比重：对于一门考试分数普遍不高，大多数人没把握拿到90+ 的课程（诸如 A 类的高数、大物），我们要尽量选那些平时成绩（包括作业成绩、小论文成绩之类）占比重比较大的老师。因为经验上说，只要稍微动动脑筋，勤快一点，最多再留意下和研究生助教交流的谈话技巧，平时成绩拿满分绝对要比考试拿满分轻松很多。所以，对于考试难度大的课程，我们的基本策略就是通过选课减小期末考试成绩所占的比重。但是对于一些非常简单的课程，情况就正好相反了。</p>
<p>• 关于考前透题的误解：关于这一点大家可能存在一些误解。一般情况下，是否透题并不是一个可靠的选老师指标。越是出题的老师，就越会避嫌而对考点三缄其口。相反，没有出题的老师也许会凭经验押题或者是看到考卷后间接地把考点告诉大家。</p>
<h3 id="突击备考"><a href="#突击备考" class="headerlink" title="突击备考"></a>突击备考</h3><p>从学习知识而言，上课是一件奢侈的事情。对突击复习考试而言，所谓的“慢工出细活”也是奢侈的。如果你认为这门课不重要，请不要在两个星期以前开始复习，因为两个星期足够让你忘掉其中一大半的知识。通常，有效的复习是在3天之内开始的，因人略有差异。我不否认个人之间的IQ存在差异，但是这种差异是如此之小，以至于甚至不能成为左右考试成绩的主导因素。充其量，有些同学可以以笨鸟先飞的名义，把一门课程需要的复习时间从3天延长到5天，不会更多。当然，我们这里说的是针对大多数靠突击有可能能拿高分的课程。</p>
<h4 id="注意复习范围"><a href="#注意复习范围" class="headerlink" title="注意复习范围"></a>注意复习范围</h4><p>通常老师在复习课上都会把考点和考试范围告诉大家。对考点的正确解读可以让你事半功倍。比如，有一些脸皮比较薄的老师在划考点的时候，不喜欢明目张胆地说“这章不考”，而是会换一种更加委婉的说法，比如“这章的内容主要是介绍性的，有兴趣的同学们可以进一步拓展”。我相信大部分同学对于这样的话都能有正确的理解。至于考点的准确性，我认为我们不应该心中有任何疑问。虽然的确存在过老师说不考的地方真的考了，但是那种事情出现几率非常低。</p>
<p>我们在考前最后一节课上，一定要毫无保留地相信老师、相信考点，并且，还要相信不同老师考点的交集。</p>
<h4 id="三天冲刺"><a href="#三天冲刺" class="headerlink" title="三天冲刺"></a>三天冲刺</h4><p>3天之内，你需要准备的：</p>
<p>• 课本（没错，就是这门课的教材）</p>
<p>• 上课 PPT ，如果你的老师的PPT只是把教材原样照搬的话</p>
<p>• 一位懂得这门课程的朋友</p>
<p>• 平时作业列表</p>
<p>• 全书考点（或者不考的点）的列表</p>
<p>首先，请懂得这门课程的朋友吃饭，让他用半小时的时间，用通俗语言，按章节给你介绍这门课是做什么的，每一部分的考点是什么。吃饭结束之后，和他约考试前一天下一次见面的时间。然后翻开教材，看目录，将不需要考的内容划掉。回忆那位朋友的话，想象每一章的标题所代表的内容。以3倍速的速度将书翻一遍，无论看懂不看懂，进一步领会朋友所说的话，如果是理工类课程，争取每章自己总结一个能够说服自己的理论。</p>
<p>找出平时作业列表，当然了，通常来说你肯定是一道题目也不会做。这很正常，你不必为此感到紧张或绝望，不上课直接做作业本这本身就是让人绝望的。你需要做的是，把作业和答案放在一起，开始扫荡，用半天的时间保证你知道答案的那些数是怎么算出来的。注意：你没有时间一道一道题目去做，把你高中老师告诉你的要扎扎实实的说法抛到脑后吧，扎扎实实你应该好好上课去。</p>
<p>如果顺利搞明白了作业，你现在大约可以考40分了。你会遇到一些情况，比如作业题目你看不懂，你不知道答案上面那些鬼东西是在说什么。勾上相关的章节。将刚刚勾过的章节逐一以两倍速浏览，注意看公式和黑体字。你会发现你小学套公式，中学套公式，到了大学，还是在套公式。接下来你只需要把你不会的题代到相关章节的相关公式下，做好字母和中文的对应翻译工作。</p>
<p>现在你不会的题目应该很少了。这会儿开始看 PPT 。注意，不要一开始就看 PPT ，当然，更不要一边看 PPT 一边看 Comic 。知识是书上来的， PPT 是演讲稿，不要因为懒不去翻书。</p>
<p>有些关键点，看课本看不懂，就去看 PPT （因为教课书在关键点上总喜欢使用脑残体），看 PPT 看不懂（部分 PPT 写的和书一样脑残，而且还有错），就去看课本；再不行还有 Google 。如果在非常关键的知识点遇到了无论如何都不明白的情况，那就赶紧抄起电话，找到你的那个朋友求助。</p>
<p>在考试之前前一天之内，把所有的公式或者解题步骤都写在一张纸上，用剩下除睡觉之外的时间去熟悉这张纸，根据例题的形式在脑中按照这个套路演练。但是不要试图拿着这张纸作弊——风险太大回报太低不合算；把上面的内容抄到桌子上也不可取——在考试时，你根本不会有机会去把桌面当图书馆查来查去，这样做只会让你心虚，一边惦记这个事儿一边浪费大量时间。考试的时候，尽量不要抄周围同学的，因为你周围的人复习的不一定比你好。</p>
<p>如果你前面工作做的足够好，那你一定要有信心。题目要么你都会做，要么大家都不会做。关于选择题，请尽量用你的大脑，不要胡猜。</p>
<h4 id="考试结束后"><a href="#考试结束后" class="headerlink" title="考试结束后"></a>考试结束后</h4><p>一哭二闹三上吊是下下策，只有当其他的手段都无效时，再考虑这样的办法。对于某些老师，你唯一的选择就是考到80+。对于另外一些比较好说话的老师，你可以跟他们谈谈你对课程的理解，以及对这门学科的看法。在谈话中，最佳的切入点是学术。你要尽可能地讨论学术方面的问题，而不是去强调你要出国，你要保研。每个人都有各种各样的私人借口来要求一个好的成绩，但是这些借口并不一定都能成为让老师帮你一把的理由。</p>
<h4 id="复习箴言"><a href="#复习箴言" class="headerlink" title="复习箴言"></a>复习箴言</h4><p> 有一些课程没有习题，或者说老师布置的作业没有代表性，那你必须需要去购买一本习题集，或者看别人的上课笔记</p>
<p>做题一定要找有答案的，你没有时间去自己确定你做的每一个答案是否正确。</p>
<h3 id="旁门左道"><a href="#旁门左道" class="headerlink" title="旁门左道"></a>旁门左道</h3><h4 id="学术灌水"><a href="#学术灌水" class="headerlink" title="学术灌水"></a>学术灌水</h4><p>介绍如何在垃圾学术期刊上灌水的技巧并非我们所鼓励的。在学校里，我们愤怒地发现有同学以为做研究就是灌水。本段的主旨就是要通过消除信息不对称，纠正这种错误思想。我们有必要指出，不论质量地发表论文，并不是什么神秘的事情。只要知道了相关的流程，你能，我能，甚至连机器都能。</p>
<p>首先，我们要明白，水刊、水会和正经学术期刊会议的差别在于，前者靠发表别人的文章盈利——通常还都是暴利。所谓“核心期刊”的版面费，收你每篇两千块钱就已经是很客气的了。这没什么好奇怪的。学生毕业要靠论文，老师评职称也要靠论文。对于那些没有任何学术水平的混子们，自然也就只能靠“买论文”这种手段确保生存。而我们的现状是，中国的科研队伍中，有相当数量的人都是混子，这一大群人的生存需求促进了水期刊、水会议如雨后的狗尿苔（实在无法用春笋形容它们）般滋生出来。如果你愿意交钱，自然有人愿意接受你的文章——不管你的文章写得多烂。 </p>
<p>期刊</p>
<p>在万方数据库上查找相关方向关键词，多找一些期刊，看每个期刊每月能刊登多少篇文章。如果一个月有100篇以上或更多，那想也不要想，这期刊一定是水刊。随便写两笔，直接投就可以了。进一步地，可以通过查找每篇文章作者的信息确认该刊物是否是水刊。有的时候你会发现一些xx学报上的作者都是些没名气小学校的老师/学生，那就更可以放心大胆地投了。要注意，国内有不少“核心期刊”的目录，找到这些目录的差别，可以方便你的投稿。比如：交通大学的核心期刊目录和北大核心期刊目录不同，这时，你可以投不在“北大目录”却在“交大目录”里面的期刊，这样的期刊</p>
<p>一般稿件相对数量略少。另外是一些小细节：</p>
<p>• 在致谢里写上牛人，可以给自己撑腰。</p>
<p>• 有些期刊有页数限制，超过页数就需要加钱，这时读者可以先投稿，中稿后，然后再将文章压缩到最便宜的长度。</p>
<p>• 能写大老板的名字就加上去，因为一般的期刊都不是盲审。</p>
<p>• 文章投出去后，不要死等。记得经常和编辑电话交流感情（仅限于那些水刊，正常刊物或者牛刊物的话，编辑都很忙，通常没功夫理你）。要让糟糕杂志的编辑觉得自己很受重视，很有成就感。</p>
<p>• 参考文献多引用你要投的期刊上的论文。</p>
<p>会议</p>
<p>近年来，由于供求关系的压力，很多杂牌会议也不断在国内涌现。举办学术会议，通常比办杂志，更加有利可图。除了拿注册费赚钱之外，更有人觉得通过组织会议能够提升自己的“声望”。有人图名，有人图利，还不怎么费事（会议组织期间，真正跑腿的还是主办教授手下的研究生们），何乐而不为！甚至我认识某个会议的组织者还说过这样的话：“其实我们不会怎么审文章，就是在审稿截止日前随便看看，没什么大问题就直接接收了。”</p>
<p>对于这些会议，你只要老老实实地按照规定格式提交，别说内容烂，甚至没有内容也一样能中。毫不夸张地说，读者只要使用前文介绍过的 SCI Generator ，投稿到上述的会议，您的论文大抵会被接收。</p>
<p>只要你想灌水，把你写的中文课程设计的报告提炼一下，翻译出主要内容，再根会议指定的论文模板排排版。一定可以被某些IEEE XXXX 国际会议接收。</p>
]]></content>
      <categories>
        <category>书摘</category>
      </categories>
      <tags>
        <tag>碎碎念</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是node.js</title>
    <url>/js/JS/%E4%BB%80%E4%B9%88%E6%98%AFnode.js/</url>
    <content><![CDATA[<h1 id="node-js简介"><a href="#node-js简介" class="headerlink" title="node.js简介"></a>node.js简介</h1><ul>
<li><p>node.js是运行在服务端的JavaScript,是一个事件驱动I\O服务端JavaScript环境</p>
</li>
<li><p>查看版本</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">node -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>node版本管理工具nvm</p>
</li>
</ul>
<h1 id="Node-js应用"><a href="#Node-js应用" class="headerlink" title="Node.js应用"></a>Node.js应用</h1><ul>
<li>Node.js应用的构成：<ul>
<li>引入required模块</li>
<li>创建服务器</li>
<li>接收请求与相应请求</li>
</ul>
</li>
</ul>
<h2 id="创建Node-js应用"><a href="#创建Node-js应用" class="headerlink" title="创建Node.js应用"></a>创建Node.js应用</h2><ul>
<li><p>步骤一：引入required模块</p>
<ul>
<li>使用require指令来载入http模块，并将实例化的HTTP复制给变量http，实例如下：  <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
</li>
<li><p>步骤二： 创建服务器</p>
<ul>
<li>创建一个server.js的文件：<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

http<span class="token punctuation">,</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span>response</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// 发送http头部</span>
    <span class="token comment">//HTTP状态值：200：OK</span>
    <span class="token comment">//内容类型：text/plain</span>
    response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string-property property">'Content-Type'</span><span class="token operator">:</span>'text<span class="token operator">/</span>plain<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//发送响应数据 “Hello World"</span>
    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'Hello World\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token comment">//终端打印如下信息</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Server running at http://127.0.0.1:8888/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>使用node命令执行以上代码</p>
  <pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">node server.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>访问<a href="http://127.0.0.1:8888">http://127.0.0.1:8888</a></p>
</li>
</ul>
</li>
</ul>
<h2 id="npm使用介绍"><a href="#npm使用介绍" class="headerlink" title="npm使用介绍"></a>npm使用介绍</h2><ul>
<li><p>查看npm版本</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">npm -v <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>升级版本</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">npm install npm -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>安装包</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">npm install &lt;Module Name&gt; # 本地安装
npm install &lt;Module Name&gt; -g # 全局安装<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>查看安装信息</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">npm list -g 			# 查看全局安装的模块
npm ist &lt;Module Name&gt;	# 查看某个模块的版本号
npm ls					# 查看当前目录下的包信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>卸载模块</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">npm un &lt;Module Name&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>更新模块</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">npm update &lt;Module Name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>搜索模块</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">npm search &lt;Module Name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>创建模块</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">$npm init			# 会自动生成package.json

$npm adduser 		# 在npm资源库中注册用户
Username:XXXX
Password:XXXX
Email:XXXX

$npm publish		# 发布模块
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h2 id="Node-js-REPL-交互式解释器"><a href="#Node-js-REPL-交互式解释器" class="headerlink" title="Node.js REPL(交互式解释器)"></a>Node.js REPL(交互式解释器)</h2><ul>
<li><p>REPL(Read Eval Print Loop:交互式解释器)，Node自带交互式解释器，可以执行读取,执行,打印,循环等任务</p>
</li>
<li><p>在Node的REPL中可以执行：</p>
<ul>
<li>简单的表达式计算</li>
</ul>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">$node
&gt;1 + 4
5
&gt; 5 &#x2F; 2
2.5
&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>使用变量</li>
</ul>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">$ node
&gt; 1+4
5
&gt; 5&#x2F;2
2.5
&gt; x&#x3D;10
10
&gt; var y&#x3D;10
undefined
&gt; x+y
20
&gt; console.log(&quot;Hello World!&quot;)
Hello World!
undefined
&gt;  
 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>多行表达式</li>
</ul>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">$ node
&gt; do &#123;
... x++;
... console.log(&quot;x:&quot;+x);
... &#125;while(x&lt;5);
x:1
x:2
x:3
x:4
x:5
undefined
&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p>下划线变量<strong>[使用下划线(_)获取上一个表达式的运算结果]</strong></p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">$ node
&gt; var x&#x3D;10;
undefined
&gt; y&#x3D;10;
10
&gt; x+y
20
&gt; var sum&#x3D;_
undefined
&gt; console.log(sum)
20
undefined
&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
<li><p>两次ctrl+c停止REPL</p>
<h2 id="Node-js的回调函数"><a href="#Node-js的回调函数" class="headerlink" title="Node.js的回调函数"></a>Node.js的回调函数</h2><ul>
<li><p>Node.js异步编程的直接体现就是回调</p>
</li>
<li><p>阻塞代码实例</p>
<ul>
<li><p>创建一个文件 input.txt ，内容如下：</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">Hello world!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>创建 main.js 文件, 代码如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> data <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'input.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"程序执行结束!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>以上代码执行结果如下：</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">$ node main.js
Hello World！

程序执行结束!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
<li><p>非阻塞代码实例</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'input.txt'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"程序执行结束!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>以上代码执行结果如下：</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">$ node main.js
程序执行结束!
Hello World!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>第一个实例在文件读取完后才执行完程序。 第二个实例我们不需要等待文件读取完，这样就可以在读取文件时同时执行接下来的代码，大大提高了程序的性能。</p>
</li>
<li><p>因此，阻塞是按顺序执行的，而非阻塞是不需要按顺序的，所以如果需要处理回调函数的参数，我们就需要写在回调函数内。</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
  </entry>
  <entry>
    <title>How-to-be-a-good-programmer</title>
    <url>/%E7%A2%8E%E7%A2%8E%E5%BF%B5/Programmer/To-be-a-good-programmer/</url>
    <content><![CDATA[<h2 id="实例驱动学习"><a href="#实例驱动学习" class="headerlink" title="实例驱动学习"></a>实例驱动学习</h2><p>在知识爆炸的年代, 想成为一个好的程序员, 要具备这样一个精神:</p>
<p><strong>开发者精神</strong></p>
<blockquote>
<p>开发者精神是指, 从学习编程第一天起, 你的目标, 你所做的事, 永远不是以<code>要学会XX</code>为目标, 而是以<code>开发出XX</code>为目标, 深刻意识到你学习的一切, 最终是为了你的开发而服务的。</p>
</blockquote>
<p>而开发者精神的反面则是<code>学生气</code>:</p>
<p><strong>学生气</strong></p>
<blockquote>
<p>从学习编程的第一天起, 就把自己当学生, 上课听讲记笔记为第一位, 记忆知识点为第一位, 买教材读教材为第一位, 追求<code>学会XX</code>, 而不是<code>用它开发出XX</code>。</p>
</blockquote>
<p>我们举个例子， 假如你要学习Java，<code>学生气</code>的学生行为模式:</p>
<pre><code>读教材, 听课, 记笔记, 追求把这个语言的每个知识点都记得很清楚, 追求一种&quot;内功&quot;的修炼, 在这个过程中, 从来不想着用它去&quot;创造&quot;什么. 在学习的第一天起, 他给自己定下了一个目标:

&quot;我这个学期一定要把这个语言的基础打牢, 最后在考试中取得高分, 并且为以后的学习提供更坚实的基础.&quot;
</code></pre><p>那么具有<code>开发者精神</code>的人会这样做:</p>
<pre><code>先大体了解一下Java语言在哪些领域比较强势, 做一个简单的调研, 得出了Java在Web领域很强势这一个信号, 于是在学习Java的第一天起, 他就给自己定下了一个目标: 

&quot;我要在半年内通过学习Java, 运用Java做出一个中小型的, 基于Web的企业管理后台&quot;
</code></pre><p>这两种人, 起点都一样, 都是<code>完全不会Java</code>, 但是最后的结果往往是, 后者无论是知识熟练度还是实用性都会超过前者, 而且整个学习过程会有源源不断地动力.</p>
<p><code>夯实基础</code>这个目标, 其实是空洞的, 什么叫做夯实? 什么叫做基础? 而且就算你真的夯实了基础, 你也极有可能陷入一种<code>虚无感</code>中, 因为你的所有知识, 都会遗忘.</p>
<p>这就是为什么很多计算机专业学生很爱问的一个问题:</p>
<pre><code>&quot;学了这么多知识, 忘了怎么办?&quot;
</code></pre><p>如果你具备<code>开发者精神</code>, 那么你根本不会理会这个问题, 因为, 你开发出的东西, 你做出的产品, 它就是永久存在在这个世界上的, 你的成就感来源于真实的, 具体的, 可持久延续的项目中, 而不是来源于”我学会了什么”.</p>
<p>我们一定要明白:</p>
<pre><code>一切不谈成就感, 不谈反馈的学习劝导, 都是在耍流氓
</code></pre><p>既然我们想获得反馈, 那么一个很现实的建议就是, 在Github上创建你的第一个开源代码仓库, 长期地, 稳定地commit, 当然, 至于这个仓库到底是干啥的, 这个因人而异, 有可能是你自己开发的一个VScode插件, 有可能是你自己写的读书笔记, 在这个不断地commit的过程中, 感受你的代码仓库不断增长不断完善的过程中, 你会获得一个比较持久的反馈和成就感, 一旦有了反馈和成就感, 那么你的学习动力就会一直保持, 也可以从学习中获得快乐.</p>
<p><strong>记住, 你不是学生, 你是开发者.</strong></p>
<h2 id="知识输入与输出"><a href="#知识输入与输出" class="headerlink" title="知识输入与输出"></a>知识输入与输出</h2><p>当你学习一个东西的时候, 如果学完马上用语言讲给别人听, 你会学的更好, 而且会发现新问题.</p>
<p>很多学习理论都指出, 知识的学习, 输入固然重要, 输出更为重要.</p>
<p>输入就是学习别人的知识, 输出就是把自己学会的知识用文字, 语言的形式表达出来, 很多人的学习, 只有输入, 没有输出, 这样的学习肯定是不行的.</p>
<p>几乎所有优秀的程序员, 都有撰写技术文章的习惯, 很多时候, 并不是他们什么都懂, 而是他们刚学会了什么, 然后就围绕着这个刚学会的东西, 用自己的语言讲出来, 久而久之, 就会被别人觉得是大牛, 但是他和你的区别, 有可能仅仅是是否输出的区别.</p>
<p>建议所有计算机学习者, 都要有写技术文章/读书笔记的习惯, 可以发表在自己的个人主页, 其他平台上, 攥写技术文章也可以很好地增加面试官对你的好感.</p>
<p>写技术文章的时候, 最好用<code>MarkDown</code>哦, 程序员是不需要用<code>Word</code>这种东西的, 我们的内容是要方便发表在网站上, <code>Word</code>不能直接在网站里显示, 而<code>MarkDown</code>可以轻易地转换成<code>html</code>格式文件, 在浏览器中显示.</p>
<h2 id="代码风格篇"><a href="#代码风格篇" class="headerlink" title="代码风格篇"></a>代码风格篇</h2><p>现在几乎所有主流语言都有相应的代码风格检查工具, 一般已IDE或Editor的插件或扩展形式给出</p>
<h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p>设计模式并不是针对任何一种语言, 而是一种用编程语言描述现实世界问题广泛采用的各种模式, 比如, 观察者模式, 工厂模式, 依赖注入模式等.</p>
<p>好的设计模式, 是好代码的保证, 只有先学会了设计模式, 才能在软件设计中游刃有余, 而且更现实的问题是, 现在很多框架, 比如Spring, Angular等, 都充斥了大量的设计模式, 比如<code>Factory Pattern</code>, <code>Dependency Injection Pattern</code>, 你必须理解这些设计模式, 你才能理解这个框架.</p>
<p>个人认为设计模式没有必要买本教材, 结合视频和技术文章, 就足以理解和运用.</p>
<h3 id="小习惯"><a href="#小习惯" class="headerlink" title="小习惯"></a>小习惯</h3><ol>
<li>不要嫌变量名长, 最好可以直接通过变量名推测变量的作用.</li>
<li>重复出现的代码, 封装成独立的类或函数.</li>
<li>提前降低代码的耦合度, 不同作用, 不同类别的代码, 不要混在一起, 最好分成独立的文件</li>
<li>将代码进行业务分层, 比如在Web开发中, 有数据层, 服务层, DTO层, Controller层, 渲染层等, 只有将层次分开了, 才能获得足够的可拓展性, 不然代码多了你就全乱了.</li>
<li>用良好的设计模式去”设计”软件, 在执行一些算法的时候, 可以想一想它的时空复杂度, 想一想怎么可以让它执行地更快.</li>
</ol>
<h2 id="如何管理自己的电脑"><a href="#如何管理自己的电脑" class="headerlink" title="如何管理自己的电脑"></a>如何管理自己的电脑</h2><h3 id="包管理工具"><a href="#包管理工具" class="headerlink" title="包管理工具"></a>包管理工具</h3><p>为了更好的管理我们的各种应用包，最好使用包管理工具来进行各种包，软件的安装和使用, 方便进行卸载, 更新, 安装, 无需打开浏览器即可完成一系列操作.</p>
<blockquote>
<p>linux : apt-get (ubuntu distro)<br>    osx : brew<br>    windows: Chocolatey</p>
</blockquote>
<p>另外, windows平台上的包管理工具, 在国内的网络环境下经常慢的感人, 所以<code>Chocolatey</code>可能使用体验并不好.  推荐使用今年微软新发布的 <code>WSL2</code>, 这个东西不是那种传统的虚拟机, 有了它你可以像操作linux系统那样操作windows系统, 而且支持 <code>docker</code>, 甚至我推荐以后大家所有命令都可以在<code>WSL2</code>里执行.</p>
<h3 id="容器-Docker"><a href="#容器-Docker" class="headerlink" title="容器 - Docker"></a>容器 - Docker</h3><p>为了更方便的进行开发环境配置，我推荐所有计算机学生尽早了解和使用Docker。</p>
<p>Docker 就是为了解决复杂的环境配置问题而生的。</p>
<p>它将你的软件和软件所依赖的所有环境打包成一个镜像(Image), 该镜像可以在任何一台装有docker 的电脑上运行, 和操作系统无关, 也就是docker 把运行环境和你的操作系统隔离开来了，中间隔了一层docker engine 。</p>
<p>写过不少代码的你一定见过这种现象：你的代码在自己电脑上能运行，但是在别人电脑上就会报错，无法运行，原因很简单，任何软件的运行都需要环境。</p>
<p>比如，jar包的运行需要jre ，python脚本的运行需要python 解释器安装在电脑上，以后你可能还需要运行一些服务，比如数据库mysql server , redis , rabbitmq , 随着软件运行环境复杂度的增加, 你的软件运行条件也变得苛刻，如果你想把本地的应用部署到服务器上，那事更多，需要的环境得一个个地装到你的linux服务器上，如何彻底解决这个问题？</p>
<p>只需在你的电脑中安装docker , 你就可以毫无后顾之忧。</p>
<p>所有的环境，服务，软件都是以Image 的形式打包的，Image 中包含了运行你软件的所有东西，比如你的软件是个python 脚本, 并且使用了第三方库flask，那这个Image 中就包含了python ,也就是它的base image , 也同时包含了flask, 这样的话任何一个装有docker的电脑都可以运行你的image。</p>
]]></content>
      <categories>
        <category>碎碎念</category>
      </categories>
      <tags>
        <tag>Advice</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫</title>
    <url>/%E7%88%AC%E8%99%AB/Python/Python%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<h1 id="爬虫概念"><a href="#爬虫概念" class="headerlink" title="爬虫概念"></a>爬虫概念</h1><h2 id="1-robots协议"><a href="#1-robots协议" class="headerlink" title="1.robots协议"></a>1.robots协议</h2><p>也叫robots.txt，是存放在网站根目录下的文本文件，用来告诉搜索引擎该网站哪些内容是不应该被抓取的，哪些是可以抓取的。</p>
<p>如<a href="https://www.csdn.net/robots.txt">https://www.csdn.net/robots.txt</a></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">User-agent: *
Disallow: &#x2F;scripts
Disallow: &#x2F;public
Disallow: &#x2F;css&#x2F;
Disallow: &#x2F;images&#x2F;
Disallow: &#x2F;content&#x2F;
Disallow: &#x2F;ui&#x2F;
Disallow: &#x2F;js&#x2F;
Disallow: &#x2F;scripts&#x2F;
Disallow: &#x2F;article_preview.html*
Disallow: &#x2F;tag&#x2F;
Disallow: &#x2F;*?*
Disallow: &#x2F;link&#x2F;

Sitemap: https:&#x2F;&#x2F;www.csdn.net&#x2F;sitemap-aggpage-index.xml
Sitemap: https:&#x2F;&#x2F;www.csdn.net&#x2F;article&#x2F;sitemap.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="2-常见的反爬虫措施"><a href="#2-常见的反爬虫措施" class="headerlink" title="2.常见的反爬虫措施"></a>2.常见的反爬虫措施</h2><h4 id="1-请求头校验"><a href="#1-请求头校验" class="headerlink" title="1.请求头校验"></a>1.请求头校验</h4><p>一般网站会对请求头进行校验，比如Host，UA，Content-Type字段等，模拟请求的时候，这些常见的请求头最好是带上。</p>
<h4 id="2-IP访问次数控制"><a href="#2-IP访问次数控制" class="headerlink" title="2.IP访问次数控制"></a>2.IP访问次数控制</h4><p>同一个IP地址短时间内大量发起请求，会引起IP限制，解决方法是用代理IP，或者构建自己的代理IP池。</p>
<h4 id="3-接口请求频率限制"><a href="#3-接口请求频率限制" class="headerlink" title="3.接口请求频率限制"></a>3.接口请求频率限制</h4><p>有的网站会控制接口访问的频率，比如有些查询接口，控制两三秒访问一次。</p>
<h4 id="4-接口访问次数限制"><a href="#4-接口访问次数限制" class="headerlink" title="4.接口访问次数限制"></a>4.接口访问次数限制</h4><p>每天限制某个IP或账号访问接口的次数，达到上限后出现二次验证或者直接封账号/IP.比如登录接口</p>
<h4 id="5-行为认证"><a href="#5-行为认证" class="headerlink" title="5.行为认证"></a>5.行为认证</h4><p>请求次数过多会出现人工认证，如图片验证码，滑动认证，点击认证等，可以对接打码平台。</p>
<h4 id="6，自动化环境检测"><a href="#6，自动化环境检测" class="headerlink" title="6，自动化环境检测"></a>6，自动化环境检测</h4><p>selenium自动化工具有的网站会检测出来，大部分可以通过下面两种方式跳过检测,下面两种方式无法处理的话，还可以尝试把页面改为移动端页面(手机模式)，最后还有一种方法就是代理服务器拦截修改js代码，把检测selenium的js修改掉。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">options &#x3D; webdriver.ChromeOptions()
# 躲避部分网站selenium检测
options.add_experimental_option(&#39;excludeSwitches&#39;, [&#39;enable-automation&#39;])
options.add_experimental_option(&quot;useAutomationExtension&quot;, False)

driver &#x3D; webdriver.Chrome(executable_path&#x3D;chromedriver_path, options&#x3D;options)

# 躲避部分网站selenium检测
script &#x3D; &quot;Object.defineProperty(navigator, &#39;webdriver&#39;, &#123;get: () &#x3D;&gt; undefined&#125;);&quot;
driver.execute_cdp_cmd(&quot;Page.addScriptToEvaluateOnNewDocument&quot;, &#123;&quot;source&quot;: script&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对于移动端appium的检测，可以尝试替换为uiautomator2实现自动化</p>
<h4 id="7-数据动态加载"><a href="#7-数据动态加载" class="headerlink" title="7.数据动态加载"></a>7.数据动态加载</h4><p>有的数据不是通过html页面的接口请求返回的，抓包分析请求，找到正确的数据接口。</p>
<h4 id="8-请求参数加密"><a href="#8-请求参数加密" class="headerlink" title="8.请求参数加密"></a>8.请求参数加密</h4><p>网易云音乐的post请求的请求体就是前端经过js加密后计算得到的，需要逆向js代码</p>
<h4 id="9-返回数据加密"><a href="#9-返回数据加密" class="headerlink" title="9.返回数据加密"></a>9.返回数据加密</h4><p>需要逆向js代码，分析如何解密。还有一种像大众点评的评论，需要通过定位去找到文本。</p>
<h4 id="10-动态更新cookies"><a href="#10-动态更新cookies" class="headerlink" title="10.动态更新cookies"></a>10.动态更新cookies</h4><p>华为手机云服务，每次请求接口都会重新设置cookies，并且请求头参数也需要跟着cookies一起变化</p>
<h1 id="Python爬虫之requests库"><a href="#Python爬虫之requests库" class="headerlink" title="Python爬虫之requests库"></a>Python爬虫之requests库</h1><h2 id="一-发送请求"><a href="#一-发送请求" class="headerlink" title="一.发送请求"></a>一.发送请求</h2><p>requests提供了http的所有基本请求方式：<br><pre class="line-numbers language-python" data-language="python"><code class="language-python">import requests
r &#x3D; requests.post(&quot;http:&#x2F;&#x2F;httpbin.org&#x2F;post&quot;)
r &#x3D; requests.put(&quot;http:&#x2F;&#x2F;httpbin.org&#x2F;put&quot;)
r &#x3D; requests.delete(&quot;http:&#x2F;&#x2F;httpbin.org&#x2F;delete&quot;)
r &#x3D; requests.head(&quot;http:&#x2F;&#x2F;httpbin.org&#x2F;get&quot;)
r &#x3D; requests.options(&quot;http:&#x2F;&#x2F;httpbin.org&#x2F;get&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>基本get请求中参数的传递：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"># requests允许使用params关键字参数，以字典的形式来提供get请求url中的参数。
payload &#x3D; &#123;&#39;key1&#39;: &#39;value1&#39;, &#39;key2&#39;: &#39;value2&#39;&#125;
r &#x3D; requests.get(&quot;http:&#x2F;&#x2F;httpbin.org&#x2F;get&quot;, params&#x3D;payload)
print(r.url)  # http:&#x2F;&#x2F;httpbin.org&#x2F;get?key2&#x3D;value2&amp;key1&#x3D;value1

# 字典中的value还可以以列表的形式传入
payload &#x3D; &#123;&#39;key1&#39;: &#39;value1&#39;, &#39;key2&#39;: [&#39;value2&#39;, &#39;value3&#39;]&#125;

r &#x3D; requests.get(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;get&#39;, params&#x3D;payload)
print(r.url)
http:&#x2F;&#x2F;httpbin.org&#x2F;get?key1&#x3D;value1&amp;key2&#x3D;value2&amp;key2&#x3D;value3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>添加请求头headers<br><pre class="line-numbers language-python" data-language="python"><code class="language-python">url &#x3D; &#39;https:&#x2F;&#x2F;api.github.com&#x2F;some&#x2F;endpoint&#39;
headers &#x3D; &#123;&#39;user-agent&#39;: &#39;my-app&#x2F;0.0.1&#39;&#125;
r &#x3D; requests.get(url, headers&#x3D;headers)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p>
<p>Post请求<br><pre class="line-numbers language-python" data-language="python"><code class="language-python">payload &#x3D; &#123;&#39;key1&#39;: &#39;value1&#39;, &#39;key2&#39;: &#39;value2&#39;&#125;
r &#x3D; requests.post(&quot;http:&#x2F;&#x2F;httpbin.org&#x2F;post&quot;, data&#x3D;payload)
print(r.text)
# 可以为 data 参数传入一个元组列表
# 在表单中多个元素使用同一 key 的时候，这种方式尤其有效：
payload &#x3D; ((&#39;key1&#39;, &#39;value1&#39;), (&#39;key1&#39;, &#39;value2&#39;))
r &#x3D; requests.post(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;post&#39;, data&#x3D;payload)
print(r.text)
&#123;
  ...
  &quot;form&quot;: &#123;
    &quot;key1&quot;: [
      &quot;value1&quot;,
      &quot;value2&quot;
    ]
  &#125;,
  ...
&#125;
# post的为json对象
url &#x3D; &#39;https:&#x2F;&#x2F;api.github.com&#x2F;some&#x2F;endpoint&#39;
payload &#x3D; &#123;&#39;some&#39;: &#39;data&#39;&#125;
r &#x3D; requests.post(url, json&#x3D;payload)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>超时设置：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">requests.get(&#39;http:&#x2F;&#x2F;github.com&#39;, timeout&#x3D;0.001)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="二-响应内容"><a href="#二-响应内容" class="headerlink" title="二.响应内容"></a>二.响应内容</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">import requests
r &#x3D; requests.get(&#39;https:&#x2F;&#x2F;github.com&#x2F;timeline.json&#39;)
r.encoding&#x3D;&#39;utf-8&#39;
r.text
# [&#123;&quot;repository&quot;:&#123;&quot;open_issues&quot;:0,&quot;url&quot;:&quot;https:&#x2F;&#x2F;github.com&#x2F;...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>网页乱码问题:<br><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 查看网页编码
print(res.apparent_encoding)
# 设置编码
res.encoding &#x3D; &#39;GB2312&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>二进制响应内容(r.content)<br><pre class="line-numbers language-python" data-language="python"><code class="language-python">from PIL import Image
from io import BytesIO
#BytesIO用于操作内存中的二进制数据
img&#x3D;Image.open(BytesIO(r.content))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>JSON响应内容（r.json()）<br><pre class="line-numbers language-python" data-language="python"><code class="language-python">import requests
r &#x3D; requests.get(&#39;https:&#x2F;&#x2F;github.com&#x2F;timeline.json&#39;)
r.json()
# [&#123;u&#39;repository&#39;: &#123;u&#39;open_issues&#39;: 0, u&#39;url&#39;: &#39;https:&#x2F;&#x2F;github.com&#x2F;...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>响应状态码（r.status_code）<br><pre class="line-numbers language-python" data-language="python"><code class="language-python">r &#x3D; requests.get(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;get&#39;)
r.status_code
200<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p>
<p>响应头(r.headers)<br><pre class="line-numbers language-python" data-language="python"><code class="language-python">r.headers
&#123;
    &#39;content-encoding&#39;: &#39;gzip&#39;,
    &#39;transfer-encoding&#39;: &#39;chunked&#39;,
    &#39;connection&#39;: &#39;close&#39;,
    &#39;server&#39;: &#39;nginx&#x2F;1.0.4&#39;,
    &#39;x-runtime&#39;: &#39;148ms&#39;,
    &#39;etag&#39;: &#39;&quot;e1ca502697e5c9317743dc078f67693f&quot;&#39;,
    &#39;content-type&#39;: &#39;application&#x2F;json&#39;
&#125;
r.headers[&#39;Content-Type&#39;]
&#39;application&#x2F;json&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<h2 id="三-Cookies"><a href="#三-Cookies" class="headerlink" title="三.Cookies"></a>三.Cookies</h2><p>如果某个响应中包含一些 cookie，你可以快速访问它们：<br><pre class="line-numbers language-python" data-language="python"><code class="language-python">url &#x3D; &#39;http:&#x2F;&#x2F;example.com&#x2F;some&#x2F;cookie&#x2F;setting&#x2F;url&#39;
r &#x3D; requests.get(url)

r.cookies[&#39;example_cookie_name&#39;]
# &#39;example_cookie_value&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>要想发送你的cookies到服务器，可以使用 cookies 参数：<br><pre class="line-numbers language-python" data-language="python"><code class="language-python">url &#x3D; &#39;http:&#x2F;&#x2F;httpbin.org&#x2F;cookies&#39;
cookies &#x3D; dict(cookies_are&#x3D;&#39;working&#39;)

r &#x3D; requests.get(url, cookies&#x3D;cookies)
r.text
# &#39;&#123;&quot;cookies&quot;: &#123;&quot;cookies_are&quot;: &quot;working&quot;&#125;&#125;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<h2 id="四-会话"><a href="#四-会话" class="headerlink" title="四.会话"></a>四.会话</h2><p>requests.Session()这样可以在会话中保留状态，保持cookie等<br><pre class="line-numbers language-python" data-language="python"><code class="language-python">import requests
s &#x3D; requests.Session()
s.headers.update(&#123;&#39;x-test&#39;: &#39;true&#39;&#125;)
r &#x3D; s.get(&#39;http:&#x2F;&#x2F;httpbin.org&#x2F;headers&#39;, headers&#x3D;&#123;&#39;x-test2&#39;: &#39;true&#39;&#125;)
print(r.text)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<h2 id="五-代理"><a href="#五-代理" class="headerlink" title="五.代理"></a>五.代理</h2><p>如果需要使用代理，你可以通过为任意请求方法提供 proxies 参数来配置单个请求<br><pre class="line-numbers language-python" data-language="python"><code class="language-python"># http代理
import requests
proxies &#x3D; &#123;
  &quot;https&quot;: &quot;http:&#x2F;&#x2F;41.118.132.69:4433&quot;
&#125;
r &#x3D; requests.post(&quot;http:&#x2F;&#x2F;httpbin.org&#x2F;post&quot;, proxies&#x3D;proxies)
# socks代理
proxies &#x3D; &#123;
    &#39;http&#39;: &#39;socks5:&#x2F;&#x2F;user:pass@host:port&#39;,
    &#39;https&#39;: &#39;socks5:&#x2F;&#x2F;user:pass@host:port&#39;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<h2 id="六-Prepared-Request"><a href="#六-Prepared-Request" class="headerlink" title="六.Prepared Request"></a>六.Prepared Request</h2><p>构造requests.Request对象，将Request对象作为参数传入requests.Session()对象的prepare_request()方法中，最后通过Session对象的send()方法发送请求。<br><pre class="line-numbers language-python" data-language="python"><code class="language-python">import requests
from requests import Request
url &#x3D; &#39;http:&#x2F;&#x2F;httpbin.org&#x2F;get&#39;
# 创建Session对象
s &#x3D; requests.Session()
# 构造Request对象
req &#x3D; Request(&#39;GET&#39;,url)
# 将Request对象转换成 PreparedRequest对象
prepped &#x3D; s.prepare_request(req)
# 利用Session对象的send()方法，发送PreparedRequest对象
res &#x3D; s.send(prepped)
print(res.text)
print(type(prepped))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<h1 id="Python爬虫之BeautifulSoup"><a href="#Python爬虫之BeautifulSoup" class="headerlink" title="Python爬虫之BeautifulSoup"></a>Python爬虫之BeautifulSoup</h1><h4 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">html_doc &#x3D; &quot;&quot;&quot;
&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#39;s story&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;
&lt;body&gt;
&lt;p class&#x3D;&quot;title&quot;&gt;&lt;b&gt;The Dormouse&#39;s story&lt;&#x2F;b&gt;&lt;&#x2F;p&gt;

&lt;p class&#x3D;&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were
&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;example.com&#x2F;elsie&quot; class&#x3D;&quot;sister&quot; id&#x3D;&quot;link1&quot;&gt;Elsie&lt;&#x2F;a&gt;,
&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;example.com&#x2F;lacie&quot; class&#x3D;&quot;sister&quot; id&#x3D;&quot;link2&quot;&gt;Lacie&lt;&#x2F;a&gt; and
&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;example.com&#x2F;tillie&quot; class&#x3D;&quot;sister bro&quot; id&#x3D;&quot;link3&quot;&gt;Tillie&lt;&#x2F;a&gt;;
and they lived at the bottom of a well.&lt;&#x2F;p&gt;

&lt;p class&#x3D;&quot;story&quot;&gt;...&lt;&#x2F;p&gt;
&quot;&quot;&quot;
soup &#x3D; BeautifulSoup(html_doc, &#39;html.parser&#39;)
print(soup.prettify())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="find-all-name-attrs-recursive-string-kwargs"><a href="#find-all-name-attrs-recursive-string-kwargs" class="headerlink" title="find_all(name , attrs , recursive , string , **kwargs)"></a>find_all(name , attrs , recursive , string , **kwargs)</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 查找所有的a标签
res &#x3D; soup.find_all(&#39;a&#39;)
# # 查找所有的a标签和p标签
res &#x3D; soup.find_all([&#39;a&#39;, &#39;p&#39;])

# 查找class&#x3D;title的p标签
res &#x3D; soup.find_all(&#39;p&#39;, &#39;title&#39;)

# 指定属性查找  可支持字符串，正则表达式，或者函数
# 指定id查找元素
res &#x3D; soup.find_all(id&#x3D;&quot;link1&quot;)
# 指定href查找 [&lt;a class&#x3D;&quot;sister&quot; href&#x3D;&quot;http:&#x2F;&#x2F;example.com&#x2F;elsie&quot; id&#x3D;&quot;link1&quot;&gt;Elsie&lt;&#x2F;a&gt;]
res &#x3D; soup.find_all(href&#x3D;re.compile(&#39;elsie&#39;))
# 指定多个属性查找
res &#x3D; soup.find_all(id&#x3D;&#39;link1&#39;, href&#x3D;re.compile(&#39;elsie&#39;))
# 指定多个属性查找 attrs参数
res &#x3D; soup.find_all(attrs&#x3D;&#123;&#39;id&#39;: &#39;link1&#39;, &#39;href&#39;: re.compile(&#39;elsie&#39;)&#125;)

# 通过css搜索
res &#x3D; soup.find_all(class_&#x3D;&quot;sister bro&quot;)
# 通过函数过滤,查找类名长度大于6的元素
res &#x3D; soup.find_all(class_&#x3D;lambda x: x is not None and len(x) &gt; 6)

# recursive参数，如果只想搜索直接子节点  recursive&#x3D;False
res &#x3D; soup.find_all(&#39;title&#39;, recursive&#x3D;False)

# find_all() 方法的返回结果是值包含一个元素的列表
# 而find()方法直接返回第一个结果，没有则返回None.
res &#x3D; soup.find(&#39;a&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 类查找
res &#x3D; soup.select(&#39;.sister&#39;)
# ID查找
res &#x3D; soup.select(&#39;#link1&#39;)
res &#x3D; soup.select(&#39;a#link1&#39;)
# 通过是否存在某个属性查找
res &#x3D; soup.select(&#39;a[href]&#39;)
# 指定属性值查找
res &#x3D; soup.select(&#39;a[href&#x3D;&quot;http:&#x2F;&#x2F;example.com&#x2F;tillie&quot;]&#39;)

# 查找返回第一个元素
res &#x3D; soup.select_one(&#39;a[href]&#39;)

# 获取元素的属性值
res &#x3D; soup.select_one(&#39;a[href]&#39;).get(&#39;href&#39;)
# 获取元素的文本
res &#x3D; soup.select_one(&#39;a[href]&#39;).text<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="Selenium自动化"><a href="#Selenium自动化" class="headerlink" title="Selenium自动化"></a>Selenium自动化</h1><h2 id="1-基础操作"><a href="#1-基础操作" class="headerlink" title="1.基础操作"></a>1.基础操作</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">from selenium import webdriver
import time
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By

if __name__ &#x3D;&#x3D; &#39;__main__&#39;:
    # 谷歌浏览器驱动
    chromedriver_path &#x3D; &#39;chromedriver72.exe&#39;
    options &#x3D; webdriver.ChromeOptions()
    # 躲避部分网站selenium检测
    options.add_experimental_option(&#39;excludeSwitches&#39;, [&#39;enable-automation&#39;])
    options.add_experimental_option(&quot;useAutomationExtension&quot;, False)

    driver &#x3D; webdriver.Chrome(executable_path&#x3D;chromedriver_path, options&#x3D;options)

    # 躲避部分网站selenium检测
    script &#x3D; &quot;Object.defineProperty(navigator, &#39;webdriver&#39;, &#123;get: () &#x3D;&gt; undefined&#125;);&quot;
    driver.execute_cdp_cmd(&quot;Page.addScriptToEvaluateOnNewDocument&quot;, &#123;&quot;source&quot;: script&#125;)

    # 浏览器最大化
    driver.maximize_window()

    url &#x3D; &#39;https:&#x2F;&#x2F;www.python.org&#x2F;&#39;
    driver.get(url)
    # 显式等待
    wait &#x3D; WebDriverWait(driver, 20, 1)

    # 在主页输入框搜索requests，并点击搜索
    input_ &#x3D; wait.until(EC.presence_of_element_located((By.ID, &#39;id-search-field&#39;)))
    input_.send_keys(&#39;requests&#39;)
    time.sleep(1)
    btn &#x3D; driver.find_element_by_xpath(&#39;&#x2F;&#x2F;button[@title&#x3D;&quot;Submit this Search&quot;]&#39;)
    btn.click()
    time.sleep(10)
    driver.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="2-元素定位"><a href="#2-元素定位" class="headerlink" title="2.元素定位"></a>2.元素定位</h2><h4 id="查找单个元素"><a href="#查找单个元素" class="headerlink" title="查找单个元素"></a>查找单个元素</h4><p>最常用的定位元素的两个方法是通过Xpath和id来定位。</p>
<ul>
<li>find_element_by_id</li>
<li>find_element_by_xpath</li>
</ul>
<h4 id="查找多个元素"><a href="#查找多个元素" class="headerlink" title="查找多个元素"></a>查找多个元素</h4><ul>
<li>find_elements_by_xpath</li>
<li>find_elements_by_name</li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"># 通过xpath查找元素
driver.find_element_by_xpath(&#39;&#x2F;&#x2F;button[@title&#x3D;&quot;Submit this Search&quot;]&#39;)
# 通过id查找元素
driver.find_element_by_id(&#39;id-search-field&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="获取元素内部内容"><a href="#获取元素内部内容" class="headerlink" title="获取元素内部内容"></a>获取元素内部内容</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">text &#x3D; driver.find_element_by_xpath(&#39;&#x2F;&#x2F;*[@id&#x3D;&quot;ISDCaptcha&quot;]&#x2F;div[2]&#x2F;div&#39;).get_attribute(&#39;innerHTML&#39;)
if &#39;请绘制图中手势&#39; in text:
    print(&#39;出现行为认证&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h4 id="获取元素指定属性的属性值"><a href="#获取元素指定属性的属性值" class="headerlink" title="获取元素指定属性的属性值"></a>获取元素指定属性的属性值</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">driver.find_element_by_xpath(&#39;&#x2F;&#x2F;div[@id&#x3D;&quot;find-step3-phone&quot;]&#39;).get_attribute(&#39;style&#39;)
driver.find_element_by_xpath(&#39;&#x2F;&#x2F;*[@id&#x3D;&quot;imgVerifyCodeP&quot;]&#39;).get_attribute(&#39;src&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="切换到指定iframe"><a href="#切换到指定iframe" class="headerlink" title="切换到指定iframe"></a>切换到指定iframe</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 通过id或者名称
driver.switch_to.frame(&quot;iframeLoginIfm&quot;)

driver.switch_to.frame(0)

frame &#x3D; driver.find_element_by_xpath(&#39;&#x2F;&#x2F;div[@id&#x3D;&quot;loginDiv&quot;]&#x2F;iframe&#39;)
driver.switch_to.frame(frame)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="切换到指定窗口"><a href="#切换到指定窗口" class="headerlink" title="切换到指定窗口"></a>切换到指定窗口</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">driver.switch_to.window(browser.window_handles[1])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="切换到alert弹窗"><a href="#切换到alert弹窗" class="headerlink" title="切换到alert弹窗"></a>切换到alert弹窗</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">text &#x3D; driver.switch_to.alert.text
if &#39;图片验证码输入错误&#39; in text:
    print(&#39;图片验证码识别错误&#39;)
    driver.switch_to.alert.accept()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="3-元素交互"><a href="#3-元素交互" class="headerlink" title="3.元素交互"></a>3.元素交互</h2><h4 id="按钮点击"><a href="#按钮点击" class="headerlink" title="按钮点击"></a>按钮点击</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">btn &#x3D; driver.find_element_by_xpath(&#39;&#x2F;&#x2F;div[@role&#x3D;&quot;button&quot;]&#x2F;div&#x2F;span&#x2F;span&#39;)
btn.click()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="执行js代码"><a href="#执行js代码" class="headerlink" title="执行js代码"></a>执行js代码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">style_ &#x3D; driver.find_element_by_xpath(&#39;&#x2F;&#x2F;*[@id&#x3D;&quot;passport-login-pop&quot;]&#39;).get_attribute(&#39;style&#39;)
style_ &#x3D; style_.replace(&#39;display: none;&#39;, &#39;&#39;)
if not style_:
    style_ &#x3D; &#39;left: 259px; top: 212px; z-index: 60001;&#39;
js &#x3D; &#39;document.getElementById(&quot;passport-login-pop&quot;).setAttribute(&quot;style&quot;,&quot;&#123;&#125;&quot;);&#39;.format(style_)
driver.execute_script(js)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="表单输入"><a href="#表单输入" class="headerlink" title="表单输入"></a>表单输入</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">input_ &#x3D; driver.find_element_by_xpath(&#39;&#x2F;&#x2F;input[@name&#x3D;&quot;session[password]&quot; and @dir&#x3D;&quot;auto&quot;]&#39;)
input_.send_keys(&#39;123qwe&#39;)

from selenium.webdriver.common.keys import Keys
input_.send_keys(Keys.BACK_SPACE)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="页面滚动"><a href="#页面滚动" class="headerlink" title="页面滚动"></a>页面滚动</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">driver.execute_script(&quot;&quot;&quot;
                (function () &#123;
                    var y &#x3D; document.body.scrollTop;
                    var step &#x3D; 100;
                    window.scroll(0, y);
                    function f() &#123;
                        if (y &lt; document.body.scrollHeight) &#123;
                            y +&#x3D; step;
                            window.scroll(0, y);
                            setTimeout(f, 50);
                        &#125;
                        else &#123;
                            window.scroll(0, y);
                            document.title +&#x3D; &quot;scroll-done&quot;;
                        &#125;
                    &#125;
                    setTimeout(f, 1000);
                &#125;)();
                &quot;&quot;&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="模拟拖动"><a href="#模拟拖动" class="headerlink" title="模拟拖动"></a>模拟拖动</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">from selenium.webdriver.common.action_chains import ActionChains

def get_track(self, distance):
    track &#x3D; []
    current &#x3D; 0
    mid &#x3D; distance * 3 &#x2F; 4
    t &#x3D; 0.2
    v &#x3D; 0
    while current &lt; distance:
        if current &lt; mid:
            a &#x3D; 2
        else:
            a &#x3D; -3
        v0 &#x3D; v
        v &#x3D; v0 + a * t
        move &#x3D; v0 * t + 1 &#x2F; 2 * a * t * t
        current +&#x3D; move
        track.append(round(move))
    return track

# 模拟拖动
btn &#x3D; wait.until(EC.presence_of_element_located((By.XPATH, xpath_)))
track &#x3D; get_track(500)
action &#x3D; ActionChains(browser)
action.click_and_hold(btn).perform()
action.reset_actions()
for i in track:
    action.move_by_offset(xoffset&#x3D;i, yoffset&#x3D;0).perform()
    action.reset_actions()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="4-等待"><a href="#4-等待" class="headerlink" title="4.等待"></a>4.等待</h2><h4 id="显式等待"><a href="#显式等待" class="headerlink" title="显式等待"></a>显式等待</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"># 显式等待
wait &#x3D; WebDriverWait(driver, 20, 1)

input_ &#x3D; wait.until(EC.presence_of_element_located((By.ID, &#39;id-search-field&#39;)))
input_.send_keys(&#39;requests&#39;)
time.sleep(1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">from selenium import webdriver

driver &#x3D; webdriver.Chrome()
# 隐式等待
driver.implicitly_wait(10)
driver.get(&#39;https:&#x2F;&#x2F;www.zhihu.com&#x2F;explore&#39;)
logo &#x3D; driver.find_element_by_id(&#39;zh-top-link-logo&#39;)
print(logo)
driver.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="5-其他操作"><a href="#5-其他操作" class="headerlink" title="5.其他操作"></a>5.其他操作</h2><h4 id="解决页面加载时间过长问题"><a href="#解决页面加载时间过长问题" class="headerlink" title="解决页面加载时间过长问题"></a>解决页面加载时间过长问题</h4><p>有时候页面有些静态文件加载比较耗时，selenium可以不需要等待页面全部加载完全在去查找元素<br><pre class="line-numbers language-python" data-language="python"><code class="language-python">options &#x3D; webdriver.ChromeOptions()
# 解决页面加载阻塞问题
options.set_capability(&#39;pageLoadStrategy&#39;, &#39;none&#39;)
driver &#x3D; webdriver.Chrome(executable_path&#x3D;self.chromedriver_path, options&#x3D;options)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p>
<h4 id="添加请求头"><a href="#添加请求头" class="headerlink" title="添加请求头"></a>添加请求头</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">options.add_argument(&quot;user-agent&#x3D;&#123;&#125;&quot;.format(&#39;Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;80.0.3987.100 Safari&#x2F;537.36&#39;))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h4 id="添加代理"><a href="#添加代理" class="headerlink" title="添加代理"></a>添加代理</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">socks5 &#x3D; &quot;socks5:&#x2F;&#x2F;&#123;&#125;:&#123;&#125;&quot;.format(socks5_proxy_ip, socks5_proxy_port)
options.add_argument(&quot;--proxy-server&#x3D;&#123;&#125;&quot;.format(socks5))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h4 id="捕捉F12控制台中所有请求记录"><a href="#捕捉F12控制台中所有请求记录" class="headerlink" title="捕捉F12控制台中所有请求记录"></a>捕捉F12控制台中所有请求记录</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

d &#x3D; DesiredCapabilities.CHROME
d[&#39;loggingPrefs&#39;] &#x3D; &#123;&#39;performance&#39;: &#39;ALL&#39;&#125;
d[&#39;goog:chromeOptions&#39;] &#x3D; &#123;
    &#39;perfLoggingPrefs&#39;: &#123;
        &#39;enableNetwork&#39;: True,
    &#125;,
    &#39;w3c&#39;: False,
&#125;
options.add_experimental_option(&#39;perfLoggingPrefs&#39;, &#123;&#39;enableNetwork&#39;: True&#125;)
options.add_experimental_option(&#39;w3c&#39;, False)
driver &#x3D; webdriver.Chrome(executable_path&#x3D;self.chromedriver_path, options&#x3D;options, desired_capabilities&#x3D;d)

# 保存log
log_list &#x3D; []
for entry in driver.get_log(&#39;performance&#39;):
    log_list.append(entry)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="屏幕截图-可以截取图片验证码加以识别"><a href="#屏幕截图-可以截取图片验证码加以识别" class="headerlink" title="屏幕截图,可以截取图片验证码加以识别"></a>屏幕截图,可以截取图片验证码加以识别</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">import win32con
import win32gui
import win32print
from win32api import GetSystemMetrics
from PIL import Image

def get_real_resolution():
    &quot;&quot;&quot;获取真实的分辨率&quot;&quot;&quot;
    hDC &#x3D; win32gui.GetDC(0)
    # 横向分辨率
    w &#x3D; win32print.GetDeviceCaps(hDC, win32con.DESKTOPHORZRES)
    # 纵向分辨率
    h &#x3D; win32print.GetDeviceCaps(hDC, win32con.DESKTOPVERTRES)
    return w, h

def get_screen_size():
    &quot;&quot;&quot;获取缩放后的分辨率&quot;&quot;&quot;
    w &#x3D; GetSystemMetrics(0)
    h &#x3D; GetSystemMetrics(1)
    return w, h

real_resolution &#x3D; get_real_resolution()
screen_size &#x3D; get_screen_size()
screen_scale_rate &#x3D; round(real_resolution[0] &#x2F; screen_size[0], 2)

pic_name &#x3D; &#39;***.png&#39;
driver.save_screenshot(pic_name)
# 找到图片验证码元素
element &#x3D; driver.find_element_by_xpath(xpath_)
left &#x3D; element.location[&#39;x&#39;] * screen_scale_rate
top &#x3D; element.location[&#39;y&#39;] * screen_scale_rate
right &#x3D; (element.location[&#39;x&#39;] + element.size[&#39;width&#39;]) * screen_scale_rate
bottom &#x3D; (element.location[&#39;y&#39;] + element.size[&#39;height&#39;]) * screen_scale_rate
im &#x3D; Image.open(pic_name)
# 裁剪图片
im &#x3D; im.crop((left, top, right, bottom))
im.save(pic_name)
# 把图片转成base64,利用打码平台接口识别
with open(pic_name, &#39;rb&#39;) as f:
    code_img_base64 &#x3D; base64.b64encode(f.read()).decode()
os.remove(pic_name)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="xpath解析"><a href="#xpath解析" class="headerlink" title="xpath解析"></a>xpath解析</h1><ul>
<li>// :从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。</li>
<li>/ : 匹配当前目录下的直接子节点。</li>
<li>.. : 匹配当前节点的父节点。</li>
<li>@：选取属性。</li>
<li>//* : 选取文档中所有元素</li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">text &#x3D; &quot;&quot;&quot;
            &lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;
            &lt;bookstore&gt;
            &lt;book&gt;
              &lt;title lang&#x3D;&quot;eng&quot;&gt;Harry Potter&lt;&#x2F;title&gt;
              &lt;price&gt;29.99&lt;&#x2F;price&gt;
            &lt;&#x2F;book&gt;
            &lt;book&gt;
              &lt;title lang&#x3D;&quot;cn&quot;&gt;Learning XML&lt;&#x2F;title&gt;
              &lt;price&gt;39.95&lt;&#x2F;price&gt;
              &lt;aa lang&#x3D;&quot;cn eng aa bb&quot; name&#x3D;&quot;cc&quot;&gt;Learning XML&lt;&#x2F;aa&gt;
            &lt;&#x2F;book&gt;
            &lt;&#x2F;bookstore&gt;
&quot;&quot;&quot;
from lxml import etree
html &#x3D; etree.HTML(text)
# print(etree.tostring(html).decode(&#39;utf-8&#39;))

# 选取所有指定的节点
res &#x3D; html.xpath(&#39;&#x2F;&#x2F;book&#39;)

# 获取指定节点的所有直接子节点
res &#x3D; html.xpath(&#39;&#x2F;&#x2F;book&#x2F;aa&#39;)

# 获取指定节点的父节点
res &#x3D; html.xpath(&quot;&#x2F;&#x2F;aa&#x2F;..&quot;)

# 通过属性匹配选择节点
res &#x3D; html.xpath(&#39;&#x2F;&#x2F;title[@lang&#x3D;&quot;cn&quot;]&#39;)

# 获取文本值
res &#x3D; html.xpath(&#39;&#x2F;&#x2F;title[@lang&#x3D;&quot;cn&quot;]&#x2F;text()&#39;)
res &#x3D; html.xpath(&#39;&#x2F;&#x2F;price&#x2F;text()&#39;)

# 获取属性值 [&#39;eng&#39;, &#39;cn&#39;]
res &#x3D; html.xpath(&#39;&#x2F;&#x2F;title&#x2F;@lang&#39;)

# 属性多值匹配
res &#x3D; html.xpath(&#39;&#x2F;&#x2F;aa[contains(@lang,&quot;aa&quot;)]&#39;)
# 对于属性值有多个的节点，不用contains函数的话，匹配到的是空[]
res &#x3D; html.xpath(&#39;&#x2F;&#x2F;aa[@lang&#x3D;&quot;aa&quot;]&#39;)

# 文本匹配
res &#x3D; html.xpath(&#39;&#x2F;&#x2F;title[contains(text(), &quot;XML&quot;)]&#39;)

# 运算符
res &#x3D; html.xpath(&#39;&#x2F;&#x2F;aa[contains(@lang,&quot;aa&quot;) and @name&#x3D;&quot;cc&quot;]&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h1 id="Python爬虫—代理池维护"><a href="#Python爬虫—代理池维护" class="headerlink" title="Python爬虫—代理池维护"></a>Python爬虫—代理池维护</h1><h2 id="大致思路"><a href="#大致思路" class="headerlink" title="大致思路"></a>大致思路</h2><ol>
<li>去代理网站上爬取大量代理IP，并将其存储在redis数据库。</li>
<li>定时获取redis中的所有代理IP，检测每一个代理IP是否可用。</li>
<li>通过flask，对外提供获取代理IP的接口，如果想要使用代理池中的代理IP，只需要访问我们提供的接口即可。<br><strong>现在网上免费代理IP网站越来越少，而且免费的代理质量非常不稳定，本文只是提供构建代理IP池的一种思路，实战的话还是要想办法获取优质的代理。</strong></li>
</ol>
<h2 id="代理池系统具体实现思路"><a href="#代理池系统具体实现思路" class="headerlink" title="代理池系统具体实现思路"></a>代理池系统具体实现思路</h2><p><img src="../pic/spiders/proxypool.png" alt=""></p>
<h2 id="代理池完整代码"><a href="#代理池完整代码" class="headerlink" title="代理池完整代码"></a><a href="agent_pool">代理池完整代码</a></h2><h4 id="agent-pool-py-整体流程"><a href="#agent-pool-py-整体流程" class="headerlink" title="agent_pool.py 整体流程"></a>agent_pool.py 整体流程</h4><p>存储模块：主要实现的功能是，去一些免费代理网站爬取大量的代理IP，并存储至redis数据库中。redis的Sorted Set结构是一个有序集合，我们会对每一个爬取到的代理IP<br>设置一个初始化的优先级10，Sorted Set也是通过这个优先级来进行排序的。&lt;/br&gt;</p>
<ul>
<li>Getter:爬取代理网站的免费代理IP，存入redis</li>
<li>Tester:从redis中取出代理，测试代理是否可用，并调整代理IP的优先级</li>
<li>Controller:启动Getter()与Tester()</li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from Crawler import Crawler
from RedisClient import RedisClient
import traceback
import time
import requests
import multiprocessing
from concurrent import futures

FULL_COUNT &#x3D; 2000

class Getter(object):
    # 爬取代理网站的免费代理IP，存入redis
    def __init__(self):
        self.redis_client &#x3D; RedisClient()
        self.crawler &#x3D; Crawler()

    def is_full(self):
        # 判断代理池是否满了
        return self.redis_client.get_proxy_count() &gt;&#x3D; FULL_COUNT

    def run(self):
        # 将爬取到的代理存入redis
        if not self.is_full():
            proxys &#x3D; self.crawler.get_crawler_proxy()
            for proxy in proxys:
                self.redis_client.add(proxy)

class Tester(object):
    # 从redis中取出代理，测试代理是否可用，并调整代理IP的优先级
    def __init__(self, test_url):
        self.redisdb &#x3D; RedisClient()
        # 用来测试代理是否可用的地址
        self.test_url &#x3D; test_url

    def test_proxy(self, proxy):
        try:
            if isinstance(proxy, bytes):
                proxy &#x3D; proxy.decode(&#39;utf-8&#39;)
            proxies &#x3D; &#123;
                &#39;http&#39;: &#39;http:&#x2F;&#x2F;&#39; + proxy,
                &#39;https&#39;: &#39;https:&#x2F;&#x2F;&#39; + proxy
            &#125;
            print(&#39;正在检测:&#123;&#125;&#39;.format(proxy))
            res &#x3D; requests.get(self.test_url, proxies&#x3D;proxies, timeout&#x3D;10)
            if res.status_code &#x3D;&#x3D; 200:
                return True, proxy
            else:
                return False, proxy
                # 代理不可用，就降低其优先级
        except Exception as e:
            return False, proxy
            # print(&#39;代理检测异常:&#123;&#125;  &#123;&#125;&#39;.format(proxy, e))
            self.redisdb.decrease(proxy)
            print(&#39;代理不可用:&#123;&#125;&#39;.format(proxy))


    def run(self):
        print(&#39;启动检测模块......&#39;)
        try:
            # 获取redis中所有爬取到的代理
            proxies &#x3D; self.redisdb.get_all_proxy()
            for i in range(0, len(proxies), 50):
                test_proxies &#x3D; proxies[i:i+50]
                workers &#x3D; len(test_proxies)
                with futures.ThreadPoolExecutor(workers) as executor:
                    tasks_res &#x3D; executor.map(self.test_proxy, test_proxies)
                    for res, proxy in tasks_res:
                        if not res:
                            # 代理不可用，就降低其优先级
                            self.redisdb.decrease(proxy)
                            print(&#39;代理不可用:&#123;&#125;&#39;.format(proxy))
                        else:
                            # 代理可用,将其优先级置为最大
                            self.redisdb.max(proxy)
                            print(&#39;代理可用:&#123;&#125;&#39;.format(proxy))

        except Exception as e:
            print(traceback.format_exc())
            print(&#39;检测模块出错！！！&#39;)

class Controller(object):
    def control_get(self):
        # 获取功能：爬取代理网站，将代理存储到redis
        getter &#x3D; Getter()
        while True:
            try:
                getter.run()
            except:
                print(traceback.format_exc())
            time.sleep(30)

    def control_test(self):
        # 检测功能，检测redis中的代理是否可用
        tester &#x3D; Tester(test_url&#x3D;&#39;http:&#x2F;&#x2F;www.baidu.com&#39;)
        while True:
            try:
                tester.run()
            except:
                print(traceback.format_exc())
            time.sleep(30)

    def run(self):
        print(&#39;代理池开始运行了......&#39;)
        # 两个进程
        get &#x3D; multiprocessing.Process(target&#x3D;self.control_get)
        get.start()
        test &#x3D; multiprocessing.Process(target&#x3D;self.control_test)
        test.start()

if __name__ &#x3D;&#x3D; &#39;__main__&#39;:
    control &#x3D; Controller()
    control.run()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="WebAPI-to-get-proxy-py-通过flask向外提供获取代理IP的接口"><a href="#WebAPI-to-get-proxy-py-通过flask向外提供获取代理IP的接口" class="headerlink" title="WebAPI_to_get_proxy.py 通过flask向外提供获取代理IP的接口"></a>WebAPI_to_get_proxy.py 通过flask向外提供获取代理IP的接口</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">from flask import Flask, g
import RedisClient

&quot;&quot;&quot;
    对外提供web接口，通过提供的web接口，来获取redis中的代理
    g是上下文对象，处理请求时，用于临时存储的对象，每次请求都会重设这个变量。比如：我们可以获取一些临时请求的用户信息。
&quot;&quot;&quot;


app &#x3D; Flask(__name__)


@app.route(&#39;&#x2F;&#39;)
def index():
    return &#39;&lt;h2&gt;欢迎来到daacheng代理池系统&lt;&#x2F;h2&gt;&#39;


def get():
    if not hasattr(g, &#39;redis&#39;):
        g.redis &#x3D; RedisClient.RedisClient()
    return g.redis


@app.route(&#39;&#x2F;random&#39;)
def get_random_proxy():
    # 从代理池中返回一个代理
    redisdb &#x3D; get()
    return redisdb.get_proxy()


@app.route(&#39;&#x2F;count&#39;)
def count():
    # 查询代理池中代理的个数
    redisdb &#x3D; get()
    return str(redisdb.get_proxy_count())


@app.route(&#39;&#x2F;all&#39;)
def get_all():
    # 查询代理池中代理的个数
    redisdb &#x3D; get()
    return str(redisdb.get_all_proxy())


if __name__ &#x3D;&#x3D; &#39;__main__&#39;:
    app.run(host&#x3D;&#39;0.0.0.0&#39;, port&#x3D;5000)
    app.debug &#x3D; True
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
  </entry>
  <entry>
    <title>jupyter_notebook常用插件介绍</title>
    <url>/others/jupyter-notebook/jupyter-notebook%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h2 id="Jupyter-NbExtensions-Configurator"><a href="#Jupyter-NbExtensions-Configurator" class="headerlink" title="Jupyter NbExtensions Configurator"></a>Jupyter NbExtensions Configurator</h2><p>Jupyter NbExtensions Configurator 是Jupyter Notebook的一个扩展工具，它提供了一系列标签，只需勾选相应插件就能自动载入。里面的插件能帮助减少工作量，书写更优雅的代码和更好的展示结构。</p>
<h3 id="安装Jupyter-NbExtensions-Configurator"><a href="#安装Jupyter-NbExtensions-Configurator" class="headerlink" title="安装Jupyter NbExtensions Configurator"></a>安装Jupyter NbExtensions Configurator</h3><p>用pip安装（conda应该同理）</p>
<p>Note:最好在关了jupyter的时候安装，不过问题不大</p>
<pre class="line-numbers language-none"><code class="language-none">pip install jupyter_nbextensions_configurator --user
pip install jupyter_contrib_nbextensions --user

jupyter contrib nbextension install --user

jupyter nbextensions_configurator enable --user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>安装完毕，进入Jupyter Notebook，在主界面会多出一个NbExtensions的标签，里面有很多插件可供选择，示意图如下：</p>
<p><img src="https://img2018.cnblogs.com/blog/1814900/201909/1814900-20190925203501494-1338913967.png" alt="img"></p>
<p> 下面会重点介绍几个插件的用法，其余的不详细介绍，有兴趣的可以到官网（<a href="https://jupyter-contrib-nbextensions.readthedocs.io/en/latest/index.html）自行了解。">https://jupyter-contrib-nbextensions.readthedocs.io/en/latest/index.html）自行了解。</a></p>
<h3 id="Hinterland"><a href="#Hinterland" class="headerlink" title="Hinterland"></a>Hinterland</h3><p>勾选此插件为代码单元格中的每次按键启用“代码自动补全”菜单，而不是仅用Tab键时启用。</p>
<h3 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h3><p>这个插件会根据Markdown的标题层次形成一个目录，可以通过点击目录，直接定位到对应代码位置，在长代码文件中能起到导航的作用。</p>
<p><img src="https://img2018.cnblogs.com/blog/1814900/201909/1814900-20190925205908910-259935432.png" alt="img"></p>
<p> 开启插件后，会在工具栏多出一个按钮，可通过点击按钮选择是否开启（如上图），官方示例如下</p>
<p><img src="https://img2018.cnblogs.com/blog/1814900/201909/1814900-20190925205346881-634502374.gif" alt="img"></p>
<h3 id="Snippets-Menu"><a href="#Snippets-Menu" class="headerlink" title="Snippets Menu"></a>Snippets Menu</h3><p>向Jupyter笔记本添加可定制的菜单项，以插入代码片段、样板文件和示例。</p>
<p>勾选此插件后，会多出一个Snippets的菜单项，菜单里包含多个模块的示例，通过简单的点击就能生成示例代码，可根据自己的需求稍作修改即可运行，减少代码工作量。</p>
<p><img src="https://img2018.cnblogs.com/blog/1814900/201909/1814900-20190925210916560-990218179.png" alt="img"></p>
<h3 id="Codefolding"><a href="#Codefolding" class="headerlink" title="Codefolding"></a>Codefolding</h3><p>这个扩展将代码折叠功能从CodeMirror添加到codecell。</p>
<p>在编辑模式下，单击边距中的三角形(codecell的左边缘)或键入代码折叠热键(默认为Alt+F)，折叠代码。在命令模式下，折叠热键与编解码器的第一行有关。</p>
<p>折叠前：</p>
<p><img src="https://img2018.cnblogs.com/blog/1814900/201909/1814900-20190925211705294-581239589.png" alt="img"></p>
<p>折叠后是这样：</p>
<p> <img src="https://img2018.cnblogs.com/blog/1814900/201909/1814900-20190925211802722-968013526.png" alt="img"></p>
<p>或者是这样：</p>
<p> <img src="https://img2018.cnblogs.com/blog/1814900/201909/1814900-20190925211812161-1047071957.png" alt="img"></p>
<h3 id="Scratchpad-没添加"><a href="#Scratchpad-没添加" class="headerlink" title="Scratchpad(没添加)"></a>Scratchpad(没添加)</h3><p>为Jupyter Notebook提供一个草稿cell，方便随时测试输出。</p>
<p><img src="https://img2018.cnblogs.com/blog/1814900/201909/1814900-20190925213326635-1759656941.gif" alt="img"></p>
<h3 id="Notify（没添加"><a href="#Notify（没添加" class="headerlink" title="Notify（没添加"></a>Notify（没添加</h3><p>在内核繁忙一段时间后再次空闲时显示一个浏览器通知——繁忙0、5、10或30秒后可配置。</p>
<p>这个插件功能在你需要长时间跑一个代码时可启用，无需在页面等待，程序运行完成后，会弹出通知。</p>
<p><img src="https://img2018.cnblogs.com/blog/1814900/201909/1814900-20190925214041517-1148926022.png" alt="img"></p>
<h3 id="Collapsible-Headings"><a href="#Collapsible-Headings" class="headerlink" title="Collapsible Headings"></a>Collapsible Headings</h3><p>允许notebook有可折叠的部分，以标题分开。</p>
<p>任何标记标题单元格(即以1-6 #字符开头的单元格)在呈现后都是可折叠的。</p>
<p>标题的折叠/扩展状态存储在单元格元数据中，并在笔记本加载时重新加载。</p>
<p><img src="https://img2018.cnblogs.com/blog/1814900/201909/1814900-20190925214559004-2102669271.png" alt="img"></p>
<h3 id="Variableinspector（没添加"><a href="#Variableinspector（没添加" class="headerlink" title="Variableinspector（没添加"></a>Variableinspector（没添加</h3><p>Variableinspector（变量检查器）显示我们在Notebook中创建的所有变量的名称，以及它们的类型、大小、形状和值。如下图所示：</p>
<p><img src="https://pic3.zhimg.com/v2-afebf774b1d9e9869b78c218c57e319e_r.jpg" alt="img"></p>
<p>这个工具对于从RStudio迁移来的项目来说是非常宝贵的。或是当我们不想继续打印df.shape、无法回忆x的类型时，Variableinspector将变得非常有用。</p>
<p>如果有其他用到的插件会继续添加</p>
]]></content>
  </entry>
  <entry>
    <title>关于marp-theme-for-tju的探索</title>
    <url>/%E7%A2%8E%E7%A2%8E%E5%BF%B5/Marp/%E5%85%B3%E4%BA%8Emarp-theme-for-tju%E7%9A%84%E6%8E%A2%E7%B4%A2/</url>
    <content><![CDATA[<p>事情的起因是，我无意间了解到marp，然后在github看到这样一个主题：<a href="https://github.com/chenyang1999/Marp_theme_for_THUslides">Marp_theme_for_THUslides</a>，于是我就想给本校做一个类似的主题，方便开组会时使用</p>
<p>但是经过很多尝试，我发现我的一些想法并不能实现，于是我暂时搁置，在解决这个需求的过程中，总结了一些marp的主题，主要是自用。</p>
<p>为了不让自己的时间白白浪费，我把自己有价值的一部分work，放到网络上，希望为后面探索的人节省时间。</p>
<p>放弃做marp-theme-tjuslides的主要原因就是：图片不能透明插入，会自动补白，这是我向rgb背景图插入透明校徽图的情况：</p>
<p><img src="https://raw.githubusercontent.com/ChangQingAAS/for_picgo/main/img/20210810203724.png" alt="image-20210810202422699" style="zoom: 67%;" /></p>
<p>这意味着，我使用的theme的颜色是受到限制的，一旦我使用别人的主题时，如果要加入相关元素就要自己改颜色。</p>
<p>或者我可以直接来几张背景图（不过这种情况下，由于一些遮拦，直接引用别人的样式文件可能会出问题，就需要花费时间调整一些样式语句了，）。虽然我觉得这样不够meaningful，但是我还是做了，毕竟也是用的上的，我用一些天大ppt,在<a href="https://github.com/ChangQingAAS/marp-themes/tree/main/tju-images">这里</a>整理了一些天大PPT背景图。</p>
<h2 id="我常用的样式："><a href="#我常用的样式：" class="headerlink" title="我常用的样式："></a>我常用的样式：</h2><hr>
<pre class="line-numbers language-none"><code class="language-none">---
marp: true

# 主题

theme: default

# 标题

title: TCP协议设计

# 页码，出现在右下角

paginate: True 

# 版本

version: 1.0.0 

# 页脚

# footer: 

# 页眉

header: 

# 大小，也可以写16:9

size: 4K

---

&lt;style&gt;

    section&#123; 

      background-image:url(&#39;.&#x2F;tju-images&#x2F;tju0.png&#39;);  

      background-size:cover;  

      position: absolute;  

    &#125;

    section h1 &#123;font-size:40px;color:black;margin-top:px;&#125;

    section h2 &#123;font-size:30px;color:black;margin-top:px;&#125;

    section p &#123;font-size: 25px;color:black;&#125;

    section table &#123;text-align: center;font-size: 32px;color:black;&#125;

    section a &#123;font-size: 25px;color:black;&#125;

    li &#123;font-size: 30px;text-align: left;&#125;


    img &#123;

        margin-left: auto; 

        margin-right:auto; 

        display:block;

        margin:0 auto;

        width:25cm;

      &#125;

&lt;&#x2F;style&gt;
---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>正式使用了一次，ppt做出来是图片，啥都不能动，真的难顶。</p>
<p>感觉不适合多人协作</p>
]]></content>
      <categories>
        <category>碎碎念</category>
      </categories>
      <tags>
        <tag>marp</tag>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>用Markdown制作幻灯片:Marp</title>
    <url>/%E6%95%99%E7%A8%8B/Marp/%E7%94%A8Markdown%E5%88%B6%E4%BD%9C%E5%B9%BB%E7%81%AF%E7%89%87-Marp/</url>
    <content><![CDATA[<h2 id="特别鸣谢"><a href="#特别鸣谢" class="headerlink" title="特别鸣谢"></a>特别鸣谢</h2><p>本文对以下链接进行了整理：</p>
<ul>
<li><a href="https://www.lianxh.cn/news/97fccdca2d7a5.html">用Markdown制作幻灯片-五分钟学会Marp（上篇）-M110a| 连享会主页 (lianxh.cn)</a></li>
<li><a href="https://www.lianxh.cn/news/521900220dd33.html">用Markdown制作幻灯片-五分钟学会Marp（下篇）-M110b| 连享会主页 (lianxh.cn)</a></li>
<li><a href="https://www.mina.moe/archives/11046">【教程】你在用 Marp 时可能会用的语法 ——litble – MiNa!</a></li>
</ul>
<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>​    在 Microsoft PowerPoint 里面，我们需要调整幻灯片的格式，操作起来些许麻烦。幻灯片通常是辅助演讲者的一个工具，这也是说，幻灯片不需要制作太复杂，简洁美观即可 </p>
<p>​    Markdown 文字排版高效，且风格简洁美观，是许多写作者的不二之选。而多数场景中， Markdown 的这种特点对幻灯片的制作也很合适。</p>
<p>​    那么，我们是否可以使用 Markdown 高效地制作一个漂亮的幻灯片？</p>
<p>​    答案就是：makedown + marp（based on vscode)</p>
<p>注：</p>
<ul>
<li><p>基于Markdown语法,复制黏贴笔记—-&gt;ppt/pdf/html/png</p>
</li>
<li><p>PPT 里面需要的各种文字效果可以用html,css,js等解决</p>
</li>
<li><p>可以用 latex直接写数学公式</p>
</li>
<li><p>可以画表格等(markdown 语法)  </p>
</li>
<li><p>可以直接插入 Emoji</p>
</li>
<li><p>在弹出保存页面时，可以自己选保存的格式</p>
</li>
</ul>
<h2 id="2-下载与安装"><a href="#2-下载与安装" class="headerlink" title="2.下载与安装"></a>2.下载与安装</h2><h3 id="vscode的安装方式"><a href="#vscode的安装方式" class="headerlink" title="vscode的安装方式"></a>vscode的安装方式</h3><p>在VS Code下载插件：marp for VS code 和 markdown  all in one</p>
<p><img src="https://fig-lianxh.oss-cn-shenzhen.aliyuncs.com/Marp%E5%88%9B%E5%BB%BA%E5%B9%BB%E7%81%AF%E7%89%87_Fig6_%20Marp%E6%8F%92%E4%BB%B6%E4%B8%8B%E8%BD%BD_%E5%AE%8B%E6%A3%AE%E5%AE%89.png" alt="img"></p>
<h3 id="其他安装方式"><a href="#其他安装方式" class="headerlink" title="其他安装方式"></a>其他安装方式</h3><p>还可以通过npm 安装 marp,读者可以自行探索</p>
<p>（不过在生成相关文件时，需要做一些命令行，vscode版的基本通过图形界面就可以解决）</p>
<h2 id="3-操作流程"><a href="#3-操作流程" class="headerlink" title="3.操作流程"></a>3.操作流程</h2><h3 id="3-1-新建文件"><a href="#3-1-新建文件" class="headerlink" title="3.1 新建文件"></a>3.1 新建文件</h3><p>打开 VS Code ，点击<code>文件-&gt;新建文件</code>，将其存为 <code>.md</code> 文件。此时，我们就创建好一个 Markdown 文档。</p>
<h3 id="3-2-幻灯片分页"><a href="#3-2-幻灯片分页" class="headerlink" title="3.2 幻灯片分页"></a>3.2 幻灯片分页</h3><p>首先，我们需要在 Markdown 文档开头标记 <code>marp: true</code>，以启用 Marp 功能。也就是告诉编辑器，你要制作的是幻灯片（Slide）。</p>
<p><strong>需要说明的有两点：</strong></p>
<ul>
<li>其一，<code>marp: true</code> 语句中的冒号为半角模式下录入的；上下的 <code>---</code> 不可省略；</li>
<li>其二，新建的 Markdown 文档也可以不做上述标记，通过点击菜单条中的 Marp 图标即可自动添加。具体步骤为：依次点击 <code>Marp 图标</code> → <code>Toggle Marp feature for current Markdown ( markdown.marp.toggleMarpFeature )</code>，软件会自动在文档开头添加 <code>marp: true</code>。如下图所示：</li>
</ul>
<p><img src="https://fig-lianxh.oss-cn-shenzhen.aliyuncs.com/20210602233115.png" alt="img"></p>
<p>文字信息如下：</p>
<pre class="line-numbers language-none"><code class="language-none">---
marp: true
---# Your slide deck

Start writing!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>幻灯片通常有多个页面，那么该如何分页？</strong></p>
<p>Markdown 通常用<code>---</code>作为水平分割线，而 Marp 则用 <code>---</code> 表示「分页符」，即用以「分割幻灯片」（Slide）。</p>
<p><em>演示效果如下：</em></p>
<p><img src="https://fig-lianxh.oss-cn-shenzhen.aliyuncs.com/Marp%E5%88%9B%E5%BB%BA%E5%B9%BB%E7%81%AF%E7%89%87_Fig9_%20%E5%88%86%E9%9A%94%E7%AC%A6_%E5%AE%8B%E6%A3%AE%E5%AE%89.gif" alt="img"></p>
<h3 id="3-3-幻灯片预览"><a href="#3-3-幻灯片预览" class="headerlink" title="3.3 幻灯片预览"></a>3.3 幻灯片预览</h3><p>点击 Marp 图标的右侧，我们就可以在 VS Code 编辑器的右侧实时预览幻灯片。</p>
<p><img src="https://fig-lianxh.oss-cn-shenzhen.aliyuncs.com/Marp%E5%88%9B%E5%BB%BA%E5%B9%BB%E7%81%AF%E7%89%87_Fig10_%20%E9%A2%84%E8%A7%88_%E5%AE%8B%E6%A3%AE%E5%AE%89.gif" alt="img"></p>
<h3 id="3-4-导出幻灯片"><a href="#3-4-导出幻灯片" class="headerlink" title="3.4 导出幻灯片"></a>3.4 导出幻灯片</h3><p>点击 <code>Marp 图标-&gt; Export slide deck ....( markdown.marp.export )</code>即可导出文件。</p>
<p><img src="https://fig-lianxh.oss-cn-shenzhen.aliyuncs.com/Marp%E5%88%9B%E5%BB%BA%E5%B9%BB%E7%81%AF%E7%89%87_Fig10_%20Marp%E9%80%89%E6%8B%A9%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F_%E5%AE%8B%E6%A3%AE%E5%AE%89.png" alt="img"></p>
<p>目前，<strong>Marp</strong> 可导出四种格式的文件：</p>
<ul>
<li><strong>HTML</strong></li>
<li><strong>PDF</strong></li>
<li><strong>PPTX</strong> (幻灯片)</li>
<li><strong>PNG</strong> (仅限于幻灯片的第一页)</li>
<li><strong>JPEG</strong> (仅限于幻灯片的第一页)</li>
</ul>
<p>需要注意的是：</p>
<ul>
<li><p>导出 <strong>HTML</strong> 格式的文档不需要安装任何插件，也可以很方便地转换为 PDF 格式。</p>
<ul>
<li>HTML 格式的幻灯片双击即可用默认浏览器打开，亦可右击文件，选择特定的浏览器打开 (建议用 Google 浏览器打开)。</li>
<li>展示时建议采用全屏播放模式：按快捷键 <strong>F11</strong> 即可；再次按下 <strong>F11</strong> 即可退出全屏。</li>
<li>用 Google 浏览器打开后，按快捷键 <strong>Ctrl+P</strong>，并选择「另存为 PDF」，即可把 HTML 格式的幻灯片转换为 PDF 格式。</li>
</ul>
</li>
<li><p>若需导出 PDF 和 PPTX 格式，可能需要安装 <code>pandoc</code></p>
</li>
</ul>
<h2 id="4-指令"><a href="#4-指令" class="headerlink" title="4.指令"></a>4.指令</h2><p>仅靠 Markdown 制作出的幻灯片格式可能会比较单调。为了制作出更加漂亮的幻灯片，我们还需要学习一种被称之为 <strong>指令（Directives）</strong> 的扩展语法。例如，指令 <code>theme</code> 可改变幻灯片的主题，<code>paginate</code> 可显示出幻灯片的页码，<code>footer</code> 用于设置幻灯片的页脚内容， <code>size</code> 可调整幻灯片的大小， <code>backgroundColor</code> 用于变换幻灯片的背景颜色等。</p>
<h3 id="4-1-指令的使用方法"><a href="#4-1-指令的使用方法" class="headerlink" title="4.1 指令的使用方法"></a>4.1 指令的使用方法</h3><p><strong>那么，如何使用这些指令呢？</strong></p>
<p>Marp 提供两种使用方法：</p>
<ul>
<li><p><strong>HTML comment</strong></p>
<p>这种需要在 <code>theme</code> 等指令前后添加<code>&lt;!-- --&gt;</code>。</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;!--
theme: default
paginate: true
--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><strong>Front-matter</strong></p>
<p>第二种则是直接写在 Markdown 文档的开头（就是将指令和 <code>marp: ture</code> 写一块），此时无须再添加<code>&lt;!-- --&gt;</code>。</p>
<pre class="line-numbers language-none"><code class="language-none">---
marp: ture
theme: default
paginate: true
---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<p> </p>
<h3 id="4-2-指令类型"><a href="#4-2-指令类型" class="headerlink" title="4.2 指令类型"></a>4.2 指令类型</h3><p>指令类型（ Type of directives ）可分为全局指令（ Global directives ）和局部指令（ Local directives ），有点类似于 Stata 中的宏。</p>
<p>其中，全局指令是整个幻灯片设定值，例如 <code>theme</code>、<code>headingDivider</code>、<code>style</code>。在全局指令前面添加前缀 <code>$</code>，就可以实现对整个幻灯片的设定。</p>
<p>而<strong>局部指令用以设置当前幻灯片页面以及后续页面</strong>。例如，我们用<code>&lt;!-- backgroundColor: aqua --&gt;</code> 设置幻灯片的背景颜色。</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;!-- backgroundColor: aqua --&gt;

This page has aqua background.

---

The second page also has same color.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>幻灯片演示效果如下：</p>
<p><img src="https://fig-lianxh.oss-cn-shenzhen.aliyuncs.com/Marp%E5%88%9B%E5%BB%BA%E5%B9%BB%E7%81%AF%E7%89%87_Fig17_%20%E5%85%A8%E5%B1%80%E6%8C%87%E4%BB%A4_%E5%AE%8B%E6%A3%AE%E5%AE%89.png" alt="img"></p>
<p>当然，如果您只想将局部指令应用于当前页面，则需要指令前添加前缀 <code>_</code> 。</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;!-- _backgroundColor: aqua --&gt;

Add underscore prefix &#96;_&#96; to the name of local directives.

---

The second page would not apply setting of directives.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对比上下两图，可以明显地看出两者之间的差异。</p>
<p><img src="https://fig-lianxh.oss-cn-shenzhen.aliyuncs.com/Marp%E5%88%9B%E5%BB%BA%E5%B9%BB%E7%81%AF%E7%89%87_Fig18_%20%E5%B1%80%E9%83%A8%E6%8C%87%E4%BB%A4_%E5%AE%8B%E6%A3%AE%E5%AE%89.png" alt="img"></p>
<h3 id="4-3-标题分隔符"><a href="#4-3-标题分隔符" class="headerlink" title="4.3 标题分隔符"></a>4.3 标题分隔符</h3><p>除了页面分割符<code>---</code>，如果文章结构比较清晰，我们还可以使用全局指令 <code>headingDivider</code> 分隔幻灯片页面。换句话说，就是 <code>headingDivider</code> 通过识别 Markdown 文档的标题来实现幻灯片分页。</p>
<p>例如，下面两个 Markdown 文档具有相同的输出。</p>
<p>一般语法如下：</p>
<pre class="line-numbers language-none"><code class="language-none"># 1st page

The content of 1st page

---

## 2nd page### The content of 2nd page

Hello, world!

---

# 3rd page

Thanks <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Heading Divider 如下：</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;!-- headingDivider: 2 --&gt;# 1st page

The content of 1st page

## 2nd page### The content of 2nd page

Hello, world!

# 3rd page

Thanks <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>个人认为用处不大</p>
<h3 id="4-4-页码"><a href="#4-4-页码" class="headerlink" title="4.4 页码"></a>4.4 页码</h3><p>局部命令 <code>paginate</code> 用于显示幻灯片的页码。</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;!-- paginate: true --&gt;

You would be able to see a page number of slide in the lower right.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>当然，如果我们不想在标题页面出现页码，只需将指令 <code>paginate</code> 移到第二页即可。</p>
<pre class="line-numbers language-none"><code class="language-none"># Title slide

This page will not paginate by lack of &#96;paginate&#96; local directive.

---

&lt;!-- paginate: true --&gt;

It will paginate slide from a this page.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>添加页码：<code>&lt;!-- page_number: true --&gt;</code>，取消页码：<code>&lt;!-- page_number:false --&gt;</code>，这个也是，加<code>*</code>表示只对某一页操作</p>
<h3 id="4-5-页眉和页脚"><a href="#4-5-页眉和页脚" class="headerlink" title="4.5 页眉和页脚"></a>4.5 页眉和页脚</h3><p>当需要在多张幻灯片中显示相同的页眉或页脚时，可将局部指令 <code>header</code>或 <code>footer</code> 写在 Markdown 文档的最前面。</p>
<pre class="line-numbers language-none"><code class="language-none">---

marp: true
header: &#39;Stata连享会&#39;
footer: 连享会 · [直播间](http:&#x2F;&#x2F;lianxh.duanshu.com) &amp;emsp;  | &amp;emsp;  lianxh.cn &amp;emsp; | &amp;emsp;  [课程主页](https:&#x2F;&#x2F;lianxh.duanshu.com&#x2F;#&#x2F;brief&#x2F;course&#x2F;c3f79a0395a84d2f868d3502c348eafc) &amp;emsp; | &amp;emsp;  [课程展示](https:&#x2F;&#x2F;gitee.com&#x2F;arlionn&#x2F;p101)

---

# VS Code + Marp : 用 Markdown 制作幻灯片##### 作者:宋森安 (西南财经大学)；张家豪(西北大学)##### 邮箱: songsean@88.com

--- 

### 文章目录
- #### 一、前言
- #### 二、下载与安装
- #### 三、操作教程
- #### 四、讨论
- #### 五、参考资料
- #### 六、相关推文<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上述 Markdown 文档改动自 <strong><a href="https://gitee.com/arlionn/md/wikis/Marp - 用 Markdown 写幻灯片.md?sort_id=1987882">连玉君老师的幻灯片</a></strong>，其演示效果如下图：</p>
<p><img src="https://fig-lianxh.oss-cn-shenzhen.aliyuncs.com/Marp%E5%88%9B%E5%BB%BA%E5%B9%BB%E7%81%AF%E7%89%87_Fig27_%20%E9%A1%B5%E8%84%9A_%E5%AE%8B%E6%A3%AE%E5%AE%89.gif" alt="img"></p>
<p>添加页脚：<code>&lt;!-- footer: 页脚内容 --&gt;</code>，如果写为<code>&lt;!-- *footer: 页脚内容 --&gt;</code>，就是仅本页添加页脚。<code>&lt;!-- footer: --&gt;</code> 就相当于取消页脚</p>
<h3 id="4-6页面大小"><a href="#4-6页面大小" class="headerlink" title="4.6页面大小"></a>4.6页面大小</h3><p>写上类似这种：<code>&lt;!-- $size: 16:9 --&gt;</code>，可以调节 PPT 尺寸。</p>
<h3 id="4-7-summary"><a href="#4-7-summary" class="headerlink" title="4.7 summary"></a>4.7 summary</h3><p>下面是我的日常使用</p>
<pre class="line-numbers language-none"><code class="language-none">---
marp: true
# 主题
theme: nord
# 标题
title: 我是标题
# 页码，出现在右下角
paginate: True 
# 版本
version: 1.0.0 
# 页脚
footer: 我是页脚
# 页眉
header: 我是页眉
# 大小，也可以写16:9
size: 4K
# 类别,原理应该就是样式的叠加，这部分我不太清楚，读者可以自行探索
class:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="5-主题风格"><a href="#5-主题风格" class="headerlink" title="5. 主题风格"></a>5. 主题风格</h2><h3 id="简单演示"><a href="#简单演示" class="headerlink" title="简单演示"></a>简单演示</h3><p>目前，Marp 提供 <strong>Default (书页黄)、Gaia(海蓝) 和 uncover</strong> 三种主题风格。</p>
<p>下面笔者简单演示这三种主题风格：</p>
<pre class="line-numbers language-none"><code class="language-none">---
marp: true
---
&lt;!-- theme: Default--&gt;
## &lt;!-- fit --&gt; 
VS Code + Marp: 用 Markdown 制作幻灯片
### 来源：Stata 连享会
### 作者：宋森安(西南财经大学); 张家豪(西北大学)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>注释：<code>&lt;!-- fit --&gt;</code> 用于自动调整标题（一级标题）大小，以适应幻灯片大小。</p>
</blockquote>
<p>Default 主题风格的演示效果如下：</p>
<p><img src="https://www.mina.moe/wp-content/uploads/2019/01/TIM%E5%9B%BE%E7%89%8720190118110508.png" alt="default"></p>
<p>将<code>&lt;!-- theme: Default--&gt;</code>更换为<code>&lt;!-- theme: Gaia--&gt;</code>，幻灯片演示风格就变成下图：</p>
<p><img src="https://www.mina.moe/wp-content/uploads/2019/01/TIM%E5%9B%BE%E7%89%8720190118110629.png" alt="gaia"></p>
<p>可以发现，在 Gaia 主题背景下，幻灯片的内容会对齐到左上方。但是我们可以使用 <code>class: lead</code> 来改变。</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;!--
theme: gaia
class: lead
--&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>添加 <code>class: lead</code> 后，幻灯片的演示效果如下：</p>
<p><img src="https://fig-lianxh.oss-cn-shenzhen.aliyuncs.com/Marp%E5%88%9B%E5%BB%BA%E5%B9%BB%E7%81%AF%E7%89%87_Fig13_%20%E9%A3%8E%E6%A0%BC3_%E5%AE%8B%E6%A3%AE%E5%AE%89.png" alt="img"></p>
<p>Uncover 主题风格演示效果如下：</p>
<p><img src="https://fig-lianxh.oss-cn-shenzhen.aliyuncs.com/Marp%E5%88%9B%E5%BB%BA%E5%B9%BB%E7%81%AF%E7%89%87_Fig16_%20%E9%A3%8E%E6%A0%BC4_%E5%AE%8B%E6%A3%AE%E5%AE%89.png" alt="img"></p>
<h3 id="添加新的主题"><a href="#添加新的主题" class="headerlink" title="添加新的主题"></a>添加新的主题</h3><p>在./vscode/settings.json中，把css主题样式文件加入路径：</p>
<pre class="line-numbers language-none"><code class="language-none">&#123;
  &quot;markdown.marp.themes&quot;: [
    &quot;https:&#x2F;&#x2F;tapioca24.github.io&#x2F;marp-themes&#x2F;tapioca24.css&quot;
  ]
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>路径可以是网络地址，也可以是本地地址（最好是你的marp项目所在地址</p>
<h3 id="使用主题"><a href="#使用主题" class="headerlink" title="使用主题"></a>使用主题</h3><ul>
<li><p>引用一种主题：<code>&lt;!-- $theme: gaia --&gt;</code></p>
</li>
<li><p>在使用了 gaia 主题后，写上：<code>&lt;!-- template: invert --&gt;</code> 后，所有 PPT 默认使用 invert 背景色。</p>
</li>
<li><p>在某一页写上<code>&lt;!-- *template: invert --&gt;</code> 后，仅这一页 PPT 用 invert（<code>*</code>就是仅这一页使用的意思）。</p>
</li>
<li><p>或者直接在header，使用指令直接指定全局主题。（可通过指定某一页的主题来屏蔽全局主题）</p>
<pre class="line-numbers language-none"><code class="language-none">---
marp: true
theme: tapioca24
---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><h2 id="6-图片语法"><a href="#6-图片语法" class="headerlink" title="6. 图片语法"></a>6. 图片语法</h2><p>图片语法句式为 <code>![](image.jpg)</code>。其中，<code>[keywords]</code> 用于设置幻灯片的尺寸、颜色等参数，<code>(image.jpg)</code>是图片地址。</p>
<p>插入图片的语法：<code>![](图片路径)</code> 路径可以是本机路径也可以是http路径</p>
<h3 id="6-1-调整图片大小"><a href="#6-1-调整图片大小" class="headerlink" title="6.1 调整图片大小"></a>6.1 调整图片大小</h3><p>在<code>[keywords]</code>中添加 <code>width</code> 、 <code>height</code> 等关键词调整图片的大小。</p>
<pre class="line-numbers language-none"><code class="language-none">![width:200px](image.jpg) &lt;!-- Setting width to 200px --&gt;
![height:30cm](image.jpg) &lt;!-- Setting height to 300px --&gt;
![width:200px height:30cm](image.jpg) &lt;!-- Setting both lengths --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>这里也可以使用关键词的缩写 <code>w</code> 和 <code>h</code> ：</p>
<pre class="line-numbers language-none"><code class="language-none">![w:32 h:32](image.jpg) &lt;!-- Setting size to 32x32 px --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p> <code>![缩放比例（如 200%)](图片路径)</code>：图片缩放后插入 PPT 中</p>
<h3 id="6-2-图片滤镜"><a href="#6-2-图片滤镜" class="headerlink" title="6.2 图片滤镜"></a>6.2 图片滤镜</h3><p>Marp 还支持将 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/filter">CSS filters</a> 应用于图片语法，替换<code>[keywords]</code>中的内容，可对图片进行渲染。例如，<code>![blur:10px]()</code>、<code>![brightness:1.5]()</code> 、 <code>![contrast:200%]()</code>、<code>![saturate:2.0]()</code>、<code>![sepia:1.0]()</code>等指令。当省略括号内的参数时，软件会直接使用默认参数。</p>
<p>当然，我们可以将多个滤镜应用于图片。</p>
<pre class="line-numbers language-none"><code class="language-none">![brightness:.8 sepia:50%](https:&#x2F;&#x2F;fig-lianxh.oss-cn-shenzhen.aliyuncs.com&#x2F;Marp%E5%88%9B%E5%BB%BA%E5%B9%BB%E7%81%AF%E7%89%87_Fig20_%20%E8%A5%BF%E5%8D%97%E8%B4%A2%E7%BB%8F%E5%A4%A7%E5%AD%A6_%E5%AE%8B%E6%A3%AE%E5%AE%89.jpg)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>例如，笔者使用 <code>![brightness:.8 sepia:50%](https://example.com/image.jpg)</code>，原图就被渲染成深褐色。</p>
<p><img src="https://fig-lianxh.oss-cn-shenzhen.aliyuncs.com/Marp%E5%88%9B%E5%BB%BA%E5%B9%BB%E7%81%AF%E7%89%87_Fig21_%20%E8%A5%BF%E5%8D%97%E8%B4%A2%E7%BB%8F%E5%A4%A7%E5%AD%A6_%E5%AE%8B%E6%A3%AE%E5%AE%89.png" alt="img"></p>
<p> </p>
<h3 id="6-3-幻灯片背景"><a href="#6-3-幻灯片背景" class="headerlink" title="6.3 幻灯片背景"></a>6.3 幻灯片背景</h3><p>关键词 <code>bg</code> 可设置幻灯片的背景，具体句式为：<code>![bg](https://example.com/background.jpg)</code>。</p>
<p>此外，我们可在 <code>bg</code> 后添加关键词选项，用于调整背景图片的尺寸。</p>
<p>例如，<code>![bg cover](image.jpg)</code>（缩放图像以填充幻灯片，这也是默认图片设置） 、 <code>![bg contain](image.jpg)</code> （缩放图像以适应幻灯片） 、 <code>![bg auto](image.jpg)</code>（不缩放图像，并使用原始大小） 、 <code>![bg 150%](image.jpg)</code>（按照指定百分比缩放）。</p>
<p> 若一页 PPT 内插入多张背景图片，它们会并列分布</p>
<p>也可使用这样的语法定义幻灯片背景</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;style scoped&gt;
section&#123;
  background-image:url(&#39;.&#x2F;tju-images&#x2F;tju1.png&#39;);
  background-size:cover;
  position: absolute;
  &#125;
&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="6-4-高级背景"><a href="#6-4-高级背景" class="headerlink" title="6.4 高级背景"></a>6.4 高级背景</h3><p>我们还可以通过高级背景来实现多重背景、背景拆分，甚至通过图片滤镜来设置幻灯片背景。</p>
<pre class="line-numbers language-none"><code class="language-none">![bg](https:&#x2F;&#x2F;fakeimg.pl&#x2F;800x600&#x2F;0288d1&#x2F;fff&#x2F;?text&#x3D;A)
![bg](https:&#x2F;&#x2F;fakeimg.pl&#x2F;800x600&#x2F;02669d&#x2F;fff&#x2F;?text&#x3D;B)
![bg](https:&#x2F;&#x2F;fakeimg.pl&#x2F;800x600&#x2F;67b8e3&#x2F;fff&#x2F;?text&#x3D;C)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>注释：背景图片由网站 <a href="https://fakeimg.pl/">fakeimg.pl</a> 自动生成的<strong>假图片</strong>，改变 <code>text=</code> 后的内容，图片文字随之改变。</p>
</blockquote>
<p>多重背景图的演示效果如下：</p>
<p><img src="https://fig-lianxh.oss-cn-shenzhen.aliyuncs.com/Marp%E5%88%9B%E5%BB%BA%E5%B9%BB%E7%81%AF%E7%89%87_Fig14_%20%E8%83%8C%E6%99%AF1_%E5%AE%8B%E6%A3%AE%E5%AE%89.png" alt="img"></p>
<pre class="line-numbers language-none"><code class="language-none">![bg vertical](https:&#x2F;&#x2F;fakeimg.pl&#x2F;800x600&#x2F;0288d1&#x2F;fff&#x2F;?text&#x3D;A)
![bg](https:&#x2F;&#x2F;fakeimg.pl&#x2F;800x600&#x2F;02669d&#x2F;fff&#x2F;?text&#x3D;B)
![bg](https:&#x2F;&#x2F;fakeimg.pl&#x2F;800x600&#x2F;67b8e3&#x2F;fff&#x2F;?text&#x3D;C)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>在 <code>bg</code> 后加入 <code>vertical</code> 后，背景图片就会垂直排列，幻灯片演示效果如下图：</p>
<p><img src="https://fig-lianxh.oss-cn-shenzhen.aliyuncs.com/Marp%E5%88%9B%E5%BB%BA%E5%B9%BB%E7%81%AF%E7%89%87_Fig15_%20%E8%83%8C%E6%99%AF2_%E5%AE%8B%E6%A3%AE%E5%AE%89.png" alt="img"></p>
<p>在 <code>bg</code> 右侧添加 <code>left</code> 或 <code>right</code> 可设置背景图的位置。添加 <code>left</code> 或 <code>right</code> 后，幻灯片内容所占的空间也会减小一半。</p>
<pre class="line-numbers language-none"><code class="language-none">---
marp: true
---
![bg left](https:&#x2F;&#x2F;fig-lianxh.oss-cn-shenzhen.aliyuncs.com&#x2F;Marp%E5%88%9B%E5%BB%BA%E5%B9%BB%E7%81%AF%E7%89%87_Fig20_%20%E8%A5%BF%E5%8D%97%E8%B4%A2%E7%BB%8F%E5%A4%A7%E5%AD%A6_%E5%AE%8B%E6%A3%AE%E5%AE%89.jpg)

&lt;!-- color: black--&gt;# 欢迎报考 西北大学<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>拆分背景的演示效果如下图：</p>
<p><img src="https://fig-lianxh.oss-cn-shenzhen.aliyuncs.com/Marp%E5%88%9B%E5%BB%BA%E5%B9%BB%E7%81%AF%E7%89%87_Fig22_%20%E5%88%86%E6%8B%86%E8%83%8C%E6%99%AF1_%E5%AE%8B%E6%A3%AE%E5%AE%89.png" alt="img"></p>
<p>我们也可以将多张图片固定在一侧。</p>
<p>文本信息如下：</p>
<pre class="line-numbers language-none"><code class="language-none">---
marp: true
---
![bg right](https:&#x2F;&#x2F;fig-lianxh.oss-cn-shenzhen.aliyuncs.com&#x2F;Marp%E5%88%9B%E5%BB%BA%E5%B9%BB%E7%81%AF%E7%89%87_Fig20_%20%E8%A5%BF%E5%8D%97%E8%B4%A2%E7%BB%8F%E5%A4%A7%E5%AD%A6_%E5%AE%8B%E6%A3%AE%E5%AE%89.jpg)

![bg](https:&#x2F;&#x2F;fig-lianxh.oss-cn-shenzhen.aliyuncs.com&#x2F;Marp%E5%88%9B%E5%BB%BA%E5%B9%BB%E7%81%AF%E7%89%87_Fig20_%20%E8%A5%BF%E5%8D%97%E8%B4%A2%E7%BB%8F%E5%A4%A7%E5%AD%A6_%E5%AE%8B%E6%A3%AE%E5%AE%89.jpg)

&lt;!-- color: black--&gt;# 欢迎报考 ##  西北大学、西南财经大学<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>幻灯片演示效果如下图：</p>
<p><img src="https://fig-lianxh.oss-cn-shenzhen.aliyuncs.com/Marp%E5%88%9B%E5%BB%BA%E5%B9%BB%E7%81%AF%E7%89%87_Fig23_%20%E5%88%86%E6%8B%86%E8%83%8C%E6%99%AF2_%E5%AE%8B%E6%A3%AE%E5%AE%89.png" alt="img"></p>
<p>除了通过图片设置背景外，Marp 也支持设定颜色参数来改变幻灯片背景。背景颜色的基本句式为 <code>![bg](颜色参数)</code> ，文字颜色的基本句式为 <code>![](颜色参数)</code>。如下图所示：</p>
<p><img src="https://fig-lianxh.oss-cn-shenzhen.aliyuncs.com/Marp%E5%88%9B%E5%BB%BA%E5%B9%BB%E7%81%AF%E7%89%87_Fig24_%20%E9%A2%9C%E8%89%B2%E8%AE%BE%E7%BD%AE_%E5%AE%8B%E6%A3%AE%E5%AE%89.png" alt="img"></p>
<h2 id="7-一些技巧"><a href="#7-一些技巧" class="headerlink" title="7.一些技巧"></a>7.一些技巧</h2><h3 id="from-tapioca24"><a href="#from-tapioca24" class="headerlink" title="from tapioca24"></a>from <a href="https://github.com/tapioca24">tapioca24</a></h3><p>There are several utility classes that can be used to enrich the presentation of slides.</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Class</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>text-center</code></td>
<td>Align all content to the center.</td>
</tr>
<tr>
<td><code>text-&lt;size&gt;</code></td>
<td>Increase the font size. The <code>size</code> can be specified in intervals of 25 from 125 to 1000.</td>
</tr>
</tbody>
</table>
</div>
<p>Give the class to only the desired page by writing the following in the slide.</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;!-- _class: text-center text-125 --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://sspai.com/post/55718">Marp：用 Markdown「写」PPT 的新选择 - 少数派 (sspai.com)</a></li>
<li><a href="https://marpit.marp.app/"><strong>Marpit</strong>: Markdown slide deck framework</a></li>
<li><a href="https://marp.app/"><strong>Marp</strong>: Markdown Presentation Ecosystem</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=marp-team.marp-vscode"><strong>Marp for VS Code</strong> - Visual Studio Marketplace</a></li>
<li><a href="https://github.com/marp-team/marp-vscode"><strong>GitHub - Marp for VS Code</strong>: Create slide deck written in Marp Markdown on VS Code</a></li>
<li><a href="https://fakeimg.pl/"><strong>fakeimg.pl</strong></a></li>
<li><strong><a href="https://gitee.com/arlionn/md">连享会 Markdown 仓库</a></strong></li>
</ul>
<p> </p>
<h2 id="相关推文"><a href="#相关推文" class="headerlink" title="相关推文"></a>相关推文</h2><ul>
<li>专题：<a href="https://www.lianxh.cn/blogs/30.html">Markdown</a><ul>
<li><a href="https://www.lianxh.cn/news/03ff18d8a9957.html">Markdown：五分钟Markdown教程</a></li>
<li><a href="https://www.lianxh.cn/news/845d7f5a2d977.html">Markdown教程之LaTeX数学公式简介</a></li>
<li><a href="https://www.lianxh.cn/news/6dfbbaefbb2d5.html">Markdown：一键将-Word-转换为-Markdown</a></li>
<li><a href="https://www.lianxh.cn/news/e3116b7e22ff8.html">Markdown-图床</a></li>
<li><a href="https://www.lianxh.cn/news/554f3e9c9f08d.html">Markdown常用LaTex数学公式</a></li>
<li><a href="https://www.lianxh.cn/news/dbbd90d8b96ac.html">连玉君Markdown笔记</a></li>
<li><a href="https://www.lianxh.cn/news/c061d6b77c6aa.html">Markdown中书写LaTeX数学公式简介</a></li>
<li><a href="https://www.lianxh.cn/news/61836b4326f32.html">在 Markdown 中使用表情符号</a></li>
<li><a href="https://www.lianxh.cn/news/1be9d1ba1a023.html">在 Markdown 中使用表情符号</a></li>
<li><a href="https://www.lianxh.cn/news/054fd41922063.html">mdnice.cn——Markdown、知乎、公众号排版神器</a></li>
<li><a href="https://www.lianxh.cn/news/b37f5fac84457.html">两种网页转Markdown的简便方法</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>折腾</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器上配置jupyter_notebook_个人简易教程</title>
    <url>/%E6%9C%8D%E5%8A%A1%E5%99%A8/jupyter-notebook/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E9%85%8D%E7%BD%AEjupyter-notebook-%E4%B8%AA%E4%BA%BA%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="后续有时间再细写"><a href="#后续有时间再细写" class="headerlink" title="后续有时间再细写"></a>后续有时间再细写</h2><h2 id="准备工作："><a href="#准备工作：" class="headerlink" title="准备工作："></a>准备工作：</h2><p>现在服务器上下载anaconda和jupyter notebook</p>
<p>然后配置文件，密码之类的</p>
<p>然后在xshell连接端口</p>
<p>然后localhost:8888，输入密码即可</p>
<h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><p><a href="https://blog.csdn.net/watermel__/article/details/114988331">https://blog.csdn.net/watermel__/article/details/114988331</a></p>
<p><a href="https://blog.csdn.net/qq_24027563/article/details/80589880">https://blog.csdn.net/qq_24027563/article/details/80589880</a></p>
<p><a href="https://www.baidu.com/link?url=V_stHI6UhDDIIwOfI1dRk0CxGUz7JLQJvAAVplwItVLOykn1ZuSlBmJK_OaKaSui&amp;wd=&amp;eqid=eb38869200037c5e00000003610f9dfc">https://www.baidu.com/link?url=V_stHI6UhDDIIwOfI1dRk0CxGUz7JLQJvAAVplwItVLOykn1ZuSlBmJK_OaKaSui&amp;wd=&amp;eqid=eb38869200037c5e00000003610f9dfc</a></p>
]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>踩坑</tag>
        <tag>jupyter_notebook</tag>
      </tags>
  </entry>
  <entry>
    <title>耶鲁大学博弈论公开课笔记</title>
    <url>/%E5%8D%9A%E5%BC%88%E8%AE%BA/Math/%E8%80%B6%E9%B2%81%E5%A4%A7%E5%AD%A6%E5%8D%9A%E5%BC%88%E8%AE%BA%E5%85%AC%E5%BC%80%E8%AF%BE%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="耶鲁大学博弈论公开课笔记"><a href="#耶鲁大学博弈论公开课笔记" class="headerlink" title="耶鲁大学博弈论公开课笔记"></a><strong>耶鲁大学博弈论公开课笔记</strong></h1><p><strong><a href="https://wenku.baidu.com/view/d9e4d40fc5da50e2524d7fc1.html">耶鲁大学公开课博弈论笔记(博弈论24讲) - 百度文库 (baidu.com)</a></strong></p>
<h2 id="P1-导论-五个入门结论"><a href="#P1-导论-五个入门结论" class="headerlink" title="P1 导论-五个入门结论"></a>P1 导论-五个入门结论</h2><h4 id="理性人"><a href="#理性人" class="headerlink" title="理性人"></a>理性人</h4><p>​    指代这一类人，他们只关心自己的利益<em>(这个定义并不完备，需要修改）</em></p>
<h4 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h4><ul>
<li>囚徒困境（注意模型的不完备性）</li>
<li>宿舍卫生打扫问题（没人愿意投入）</li>
<li>企业打价格战（无限降价会使得自己收到损失）</li>
</ul>
<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><ul>
<li><p>如果选择a的结果严格优于b,那么就说a相当于b来说是一个严格优势策略。结论：不要选择严格劣势策略（<strong>Do not play a strictly dominated strategy.</strong></p>
</li>
<li><p>选择严格优势策略（无论对方选择什么，自己的收益都会更高）</p>
</li>
<li><p>在不同的参与者，不同的利益关心情况下，做出的选择都会不同</p>
</li>
<li><p>理性人的理性选择导致了次优的结果（<strong>Rational choice in this case,can lead to outcomes that suck.(Rational choice by rational players,can lead to bad outcomes.</strong></p>
</li>
<li><p>协和谬误 Payoffs matter.苟欲求之，必先知之（<strong>You can’t get what you want,till you know what you want.</strong></p>
</li>
<li><p>人总是以自己为出发点思考问题。</p>
</li>
<li><p>策略决策的核心：换位思考，站在别人的立场上看比人会怎样做，在考虑自己受益的同时，要注意别人的选择。（<strong>Put yourself in other’s shoes and try to figure out what they will do.</strong></p>
</li>
<li><p>耶鲁大学的学生都很自私。（<strong>Yale students are evil.</strong></p>
</li>
</ul>
<h2 id="P2-学会换位思考"><a href="#P2-学会换位思考" class="headerlink" title="P2 学会换位思考"></a>P2 学会换位思考</h2><h4 id="博弈的三大要素"><a href="#博弈的三大要素" class="headerlink" title="博弈的三大要素"></a>博弈的三大要素</h4><ul>
<li>players;参与人</li>
<li>strategies；策略集合</li>
<li>payoffs; 收益</li>
</ul>
<h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><ul>
<li>打渔问题</li>
<li>解决全球变暖问题（控制碳排放</li>
<li>防线布置问题（汉尼拔是否翻越阿尔卑斯山</li>
</ul>
<h4 id="严格劣势策略"><a href="#严格劣势策略" class="headerlink" title="严格劣势策略"></a>严格劣势策略</h4><ul>
<li>​    无论对方做出哪个选择，你的这个选择都是 strictly 不利的 弱劣势策略：其中的一个策略严格劣于另外一个策略。 </li>
</ul>
<p>​    </p>
<p>​    当对手有严格优势策略时，而我方两个策略相同时，考虑对手优势策略下的收益。 </p>
<h4 id="互动活动：-全班同学写1-100的数字，写到平均数的三分之二的人即为获胜方。"><a href="#互动活动：-全班同学写1-100的数字，写到平均数的三分之二的人即为获胜方。" class="headerlink" title="互动活动： 全班同学写1-100的数字，写到平均数的三分之二的人即为获胜方。"></a>互动活动： 全班同学写1-100的数字，写到平均数的三分之二的人即为获胜方。</h4><ul>
<li><h5 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h5><ul>
<li>所有人都从 1 到 100 中选个数字，最接近所有人选的数字的均值的2/3 者为获胜方</li>
</ul>
</li>
<li><h5 id="推理过程"><a href="#推理过程" class="headerlink" title="推理过程"></a>推理过程</h5><ul>
<li>作为理性人．每个人都会选择67（ 100 <em> 2/3 ）以下的数，进一步假设你的对手也是理性的，你会选择 45 ( 100</em> 4/9 ）以下的数 … … </li>
<li>依据哲学观点，如果大家都是理性程度相当的，（极端理性）那么最后数字将为 1 ，然而结果却是 9 （在本次实验中</li>
<li>这说明<strong>博弈的复杂性</strong></li>
</ul>
</li>
<li><h5 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h5><ul>
<li>共同知识的概念<ul>
<li>在本次实验中，是这样的：要在其中了解到对方都是理性人，知道对方知道对方都是理性人，知道对方知道对方知道对方都是理性人……</li>
</ul>
</li>
<li>共同知识与共有知识之间的区别<ul>
<li>common knowledge（不同于 mutual knowledge共有知识.） ：站在对手的角度思考对手在这次博弈中有多老练，思考对手知道你在博弈中有多老练，思考对手知道你在思考他有多老练，如此一直循环成立 （<em>这个是网上抄的，我觉得不strict</em> </li>
</ul>
</li>
</ul>
</li>
<li><p>共有知识和共同知识</p>
<ul>
<li>共有知识 + 外部信息 -&gt; 共同知识<ul>
<li>例如：脏脸博弈，皇帝的新衣，沉默的螺旋</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="P3-迭代剔除和中位选民定理"><a href="#P3-迭代剔除和中位选民定理" class="headerlink" title="P3 迭代剔除和中位选民定理"></a>P3 迭代剔除和中位选民定理</h2><p>学会在剔除劣势策略的情况下再重新审视博弈问题，再做决策。站在对方的立场上，考虑他们不会选择什么，再考虑对方会认为我们不会选择什么</p>
<h5 id="利用迭代剔除法领悟中间选民问题"><a href="#利用迭代剔除法领悟中间选民问题" class="headerlink" title="利用迭代剔除法领悟中间选民问题"></a>利用迭代剔除法领悟中间选民问题</h5><ul>
<li>迭代剔除法<ul>
<li>反复消去严格下策，不断把劣势策略剔除出去，最后只剩下相对优势的策略</li>
</ul>
</li>
<li>中间选民问题<ul>
<li>政治选举候选人的politic position. 如果从极左到极右有10个程度，则大部分人会选择5，6。 在政治上，人们倾向于中间站位。</li>
<li>在两党制中，政党表述纲领要吸引中间位置的选民，他们认为在选举中处于中间标度可以吸引左右两边的选民，并以此获得胜利。</li>
<li>理论的不完备性<ul>
<li>太多了，qaq</li>
<li>这个公开课是200几年的，此时并没有发生民粹主义的崛起，可以用川普当选等所谓黑天鹅事件来find这个theory的missing</li>
<li>可以由理论的missing导出理论成立所需的假设条件</li>
</ul>
</li>
<li>理论成立的条件<ul>
<li>有两个参与人</li>
<li><del>政治立场能使选民相信</del></li>
</ul>
</li>
<li>延伸出的问题（在商业上，人们倾向于选址集中。）<ul>
<li>加油站选址</li>
<li>快餐店选址<ul>
<li>比如顾客认为这一片都是快餐店，从而帮助顾客选择这个地方（对于快餐企业，在不确定哪个位置较佳的时候会选在同一处）</li>
<li>对于某快餐企业：根据其他快餐店地址，确定自己的新店地址可以减少决策量</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>在迭代剔除法不能运用时，比如说该博弈方1和2均没有严格下策，可以用二维坐标系画出选择策略之后的收益分布（即<strong>做一个函数辅助决策</strong>）</p>
<p>最佳策略：在对方不同选择的概率下，做出自己的最佳选择。 列方程，线性规划，求不同范围下的最优解。用数字使得自己的解释更为有力。</p>
<h2 id="P4-足球比赛和商业合作之最佳对策"><a href="#P4-足球比赛和商业合作之最佳对策" class="headerlink" title="P4 足球比赛和商业合作之最佳对策"></a>P4 足球比赛和商业合作之最佳对策</h2><h3 id="罚点球"><a href="#罚点球" class="headerlink" title="罚点球"></a>罚点球</h3><ul>
<li>​    一个进过模型简化的点球模型：罚球这可以选择左路，中路，右路3种路线去踢点球，们将可以选择向左扑救或者向右扑救。罚球者的收益很容易计算</li>
<li>结论<ul>
<li>无论什么时候，罚球者向中路踢都不是一个最优的选择</li>
<li>不要选择一个在任何brief下都不是最优策略的策略</li>
<li>这里的brief并不是门将会向左或向右，而是指概率。我的理解是对中庸之道的批判。所以本例中，虽然罚球者的3种策略里没有劣势策略，不过还是可以用以上原则剔除掉一个策略</li>
</ul>
</li>
<li>missing<ul>
<li>罚球者是右撇子</li>
<li>门将可以中出（to be continued)</li>
</ul>
</li>
</ul>
<h3 id="Partnership-game：商业合作"><a href="#Partnership-game：商业合作" class="headerlink" title="Partnership game：商业合作"></a>Partnership game：商业合作</h3><ul>
<li>列出合作对象的效用函数，对此求导，令其一介导数为0，即可得出其最佳投入精力关于对方投入精力的函数（使自己的效益最大化，总效益-个人投入）。 </li>
<li>假设合作只有两方，令两函数相等，所得交点即为纳什均衡。 即双方都不愿意偏离这一点。</li>
</ul>
<h2 id="P5-纳什均衡"><a href="#P5-纳什均衡" class="headerlink" title="P5 纳什均衡"></a>P5 纳什均衡</h2><h3 id="1-纳什均衡的两大定义"><a href="#1-纳什均衡的两大定义" class="headerlink" title="1.纳什均衡的两大定义"></a>1.纳什均衡的两大定义</h3><ul>
<li><p>No individual can do better by divieting. </p>
</li>
<li><p>NE can be thought of self-fullfiling. </p>
</li>
</ul>
<p>2.任何参与人都严格不会改变策略，改变策略严格不会使参与人获得增益</p>
<p>3.其他参与人不改变行为的前提下，自己改变行为并没有任何好处</p>
<p>4.严格劣势永远不是最佳策略，最佳策略才可以出现NE</p>
<p>5.博弈会朝着趋向于一个均衡方向自然发展，结果不断趋向于一个NE</p>
<p>6.协和谬误不同于囚徒困境</p>
<ul>
<li>它有两个(nash)均衡，即all in和all out</li>
<li>前者可以通过沟通解决，本身具有强制力，因为符合自身利益。例如： 在银行里存钱、微软垄断（规模效应） 等。</li>
<li>后者无沟通</li>
</ul>
<p>7.区分协和谬误和沉默的螺旋之间的关系</p>
<ul>
<li>沉默的螺旋（The Spiral Of Silence）是一个政治学和大众传播理论。理论基本描述了这样一个现象：人们在表达自己想法和观点的时候，如果看到自己赞同的观点受到广泛欢迎，就会积极参与进来，这类观点就会越发大胆地发表和扩散；而发觉某一观点无人或很少有人理会（有时会有群起而攻之的遭遇），即使自己赞同它，也会保持沉默。意见一方的沉默造成另一方意见的增势，如此循环往复，便形成一方的声音越来越强大，另一方越来越沉默下去的螺旋发展过程。理论是基于这样一个假设：大多数个人会力图避免由于单独持有某些态度和信念而产生的孤立。</li>
</ul>
<h2 id="P6-第六讲：约会策略与古诺模型"><a href="#P6-第六讲：约会策略与古诺模型" class="headerlink" title="P6 第六讲：约会策略与古诺模型"></a>P6 第六讲：约会策略与古诺模型</h2><p><del>策略互补博弈 》协调博弈：性别大战（不同人有不同偏好） 策略代替博弈》</del></p>
<h5 id="古诺模型"><a href="#古诺模型" class="headerlink" title="古诺模型"></a>古诺模型</h5><ul>
<li>假设：2个公司生产可以完全互补产品，</li>
<li>在完全竞争市场上，成本=价格 </li>
<li>在完全垄断市场上，价格=边际成本 </li>
<li>古诺模型中，价格高于完全竞争市场，低于完全垄断市场</li>
</ul>
]]></content>
      <categories>
        <category>博弈论</category>
      </categories>
      <tags>
        <tag>数学</tag>
        <tag>经济学</tag>
      </tags>
  </entry>
  <entry>
    <title>《深度学习中的数学》读书记录</title>
    <url>/%E4%B9%A6%E6%91%98/Math/%E3%80%8A%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E6%95%B0%E5%AD%A6%E3%80%8B/</url>
    <content><![CDATA[<h2 id="《深度学习中的数学》"><a href="#《深度学习中的数学》" class="headerlink" title="《深度学习中的数学》"></a>《深度学习中的数学》</h2><p><img src="https://img1.doubanio.com/view/subject/s/public/s32295077.jpg" alt="深度学习的数学">{: style=”width: 135px;”}</p>
<p>知道了一些基本概念</p>
<ul>
<li>神经网络：相较于原来更为抽象的原理学习，这次学到了一些具体的表述方式，以及核函数的意义</li>
<li>BP：没有仔细看 但是对原理的理解进一步加深了</li>
<li>CNN： 一些实例加强了我对CNN的理解</li>
</ul>
]]></content>
      <categories>
        <category>书摘</category>
      </categories>
      <tags>
        <tag>books</tag>
      </tags>
  </entry>
  <entry>
    <title>Python函数参数的传递机制</title>
    <url>/%E7%A2%8E%E7%A2%8E%E5%BF%B5/Python/Python%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%9A%84%E4%BC%A0%E9%80%92%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="Python函数参数的传递机制"><a href="#Python函数参数的传递机制" class="headerlink" title="Python函数参数的传递机制"></a>Python函数参数的传递机制</h1><h2 id="不可变对象是值传递"><a href="#不可变对象是值传递" class="headerlink" title="不可变对象是值传递"></a>不可变对象是值传递</h2><p><strong>python中不可变对象，函数实际参数(实参)传递给形式参数(形参)的过程，实际上是把实际参数值的副本(复制品)传入函数，参数本身不会收到任何影响。</strong></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def func(a, b):
    a, b &#x3D; b, a
    # 函数内 a:2 b:1
    print(&#39;函数内 a:&#123;&#125; b:&#123;&#125;&#39;.format(a, b))

if __name__ &#x3D;&#x3D; &#39;__main__&#39;:
    a &#x3D; 1
    b &#x3D; 2
    # 可以理解为是将a, b的值复制一份传入
    func(a, b)
    # 函数外 a:1 b:2
    print(&#39;函数外 a:&#123;&#125; b:&#123;&#125;&#39;.format(a, b))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="可变对象是引用传递-地址传递"><a href="#可变对象是引用传递-地址传递" class="headerlink" title="可变对象是引用传递(地址传递)"></a>可变对象是引用传递(地址传递)</h2><p>对于可变对象如字典，列表等，参数传递的方式是引用传递，也就是将可变对象的引用(内存地址)传递给函数，参数会受到影响。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">def func(a):
    a.append(4)
    a.append(5)
    # 函数内 a:[1, 2, 3, 4, 5]
    print(&#39;函数内 a:&#123;&#125;&#39;.format(a))

if __name__ &#x3D;&#x3D; &#39;__main__&#39;:
    a &#x3D; [1, 2, 3]
    func(a)
    # 函数内 a:[1, 2, 3, 4, 5]
    print(&#39;函数外 a:&#123;&#125;&#39;.format(a))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>碎碎念</category>
      </categories>
  </entry>
  <entry>
    <title>保护变量的访问与设置</title>
    <url>/python/Python/%E4%BF%9D%E6%8A%A4%E5%8F%98%E9%87%8F%E7%9A%84%E8%AE%BF%E9%97%AE%E4%B8%8E%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="保护变量的访问与设置"><a href="#保护变量的访问与设置" class="headerlink" title="保护变量的访问与设置"></a>保护变量的访问与设置</h1><p>对于私有变量（双下划线）或者保护变量（单下划线），不允许外部直接访问，类似于Java的private，可以通过对外提供get，set接口来访问和修改这类变量，便于控制。</p>
<ul>
<li>@property装饰器会将方法转换为相同名称的只读属性，相当于实现get方法</li>
<li>@xxx.setter装饰器使得可以直接通过 对象.xxx来修改保护变量的值，相当于实现set方法</li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">class Student(object):
    def __init__(self, name):
        self.name &#x3D; name
        self._score &#x3D; None

    @property
    def score(self):
        return self._score

    @score.setter
    def score(self, value):
        self._score &#x3D; value

if __name__ &#x3D;&#x3D; &#39;__main__&#39;:
    s &#x3D; Student(&#39;王大锤&#39;)
    s.score &#x3D; 100  # 设置保护变量的值
    print(s.score)  # 访问保护变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>猴子补丁</title>
    <url>/%E7%A2%8E%E7%A2%8E%E5%BF%B5/Python/%E7%8C%B4%E5%AD%90%E8%A1%A5%E4%B8%81/</url>
    <content><![CDATA[<h1 id="猴子补丁"><a href="#猴子补丁" class="headerlink" title="猴子补丁"></a>猴子补丁</h1><p><strong>monkey patch允许在运行期间动态修改一个类或模块</strong></p>
<ul>
<li>在运行时替换方法、属性等</li>
<li>在不修改第三方代码的情况下增加原来不支持的功能</li>
<li>在运行时为内存中的对象增加patch而不是在磁盘的源代码中增加</li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">class A:
    def func(self):
        print(&#39;这是A类下的func方法&#39;)

# arg 这个参数是没有用到的，因为func有一个参数，如果这个函数没有参数的话不能这样直接赋值
def monkey_func(arg):
    print(&#39;这是猴子补丁方法&#39;)

if __name__ &#x3D;&#x3D; &#39;__main__&#39;:
    a &#x3D; A()
    # 运行原类下的方法
    a.func()  # 这是A类下的func方法

    # 在不改变原类代码的情况下，动态修改原类的方法，打补丁
    A.func &#x3D; monkey_func

    # 运行替换后的方法
    a.func()  # 这是猴子补丁方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>gevent通过打补丁的方式，利用自己的socket替换了python的标准socket模块，利用gevent协程处理高并发的情况</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">from gevent import monkey
monkey.patch_all()
import gevent
from socket import *


def talk(conn):
    while 1:  # 循环通讯
        try:
            from_client_msg &#x3D; conn.recv(1024)
            if not from_client_msg:break
            print(&quot;来自客户端的消息:%s&quot; %(from_client_msg))
            conn.send(from_client_msg.upper())
        except:
            break
    conn.close()

if __name__ &#x3D;&#x3D; &#39;__main__&#39;:
    server &#x3D; socket()
    ip_port &#x3D; (&quot;127.0.0.1&quot;, 8001)
    server.bind(ip_port)
    server.listen(5)
    while 1:  # 循环连接
        conn, addr &#x3D; server.accept()
        gevent.spawn(talk, conn)  # 开启一个协程
    server.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>碎碎念</category>
      </categories>
  </entry>
</search>
